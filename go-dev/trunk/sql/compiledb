#!/usr/local/bin/perl
use strict;
use FileHandle;

my $outf;
my $target = "mysql";
while ($ARGV[0] =~ /^\-/) {
    my $arg = shift @ARGV;
    if ($arg =~ /^\-o$/) {
        $outf = shift @ARGV;
    }
    elsif ($arg =~ /^\-h/) {
        print usage();
        exit;
    }
    elsif ($arg =~ /^\-t/) {
        $target = shift @ARGV;
    }
    else {
        die ("switch $arg not regognized");
    }
}

my $inf = shift @ARGV || die usage();
my $fho;
$fho = FileHandle->new(">$outf") if $outf;

readf($inf);
$fho->close if $fho;

exit 0;

sub readf {
    my $f = shift @_;
    my $dirname = `dirname $f`;
    chomp $dirname;
    print STDERR "READING $f\n";
    my $fh = FileHandle->new($f);
    $fh || die("can't read $f");
    while(<$fh>) {
        chomp;
        if (/\#include\s+(.*)/) {
            readf("$dirname/$1");
        }
        else {
            if ($target eq "mysql") {
                s/serial/integer AUTO_INCREMENT not null/g;
                s/ text/ mediumtext/g;
                # comments look nicer with # in mysql
                s/^\s*\-\-\-/\#/;
            }
            if ($target eq "pg") {
                my $l;
                if (/enum *\((.*)\)/){split(/\,/,$1);map{/\'(.*)\'/;$l=length($1) if length($1) > $l}@_;s/enum *\(.*\)/char($l)/}
                # mysql style comments
                s/^\#/\-\-\-/;
            }
            outf("$_\n");
        }
    }
    $fh->close;
}

sub outf {
    my $ln = shift;
    if ($fho) {
        print $fho $ln;
    }
    else {
        print $ln;
    }
}

sub usage {
    return <<EOM

compiledb [-t dbms] [-o outfile] sqlsrc

EOM
}
