#!/usr/local/bin/perl -w
####
#### Tags that I use: BUG, TODO, WARN, NOTE, ASK
####
#### TODO: Make sure that all errors will work with all formats. Gunna
#### need an error chooser pretty early on.
####
#### BUG: These need to be moved onto core for all caching and communication!
####

## Try to get the local environment sane.
BEGIN {
  require "config.pl" if -f "config.pl" ;
  if( ! defined($ENV{GO_ROOT}) &&
      -f "../cvs/go-dev/"){
    $ENV{GO_ROOT} = "../cvs/go-dev";
  }
  die "cannot find templates: $!" if ! $ENV{AMIGO_TEMPLATE_PATHS};
}
use lib "$ENV{GO_ROOT}/go-perl";
use lib "$ENV{GO_ROOT}/go-db-perl";
use lib "$ENV{GO_ROOT}/amigo/perl";

## Bring in necessaries.
use utf8;
use strict;
use Template;
use Template::Constants qw( :debug );
use AmiGO::Aid;
use AmiGO::Reader;
use AmiGO::LabelResolve;
use GO::AppHandle;

my $core = AmiGO::Aid->new();
my $google_id = $core->amigo_env('AMIGO_GOOGLE_ANALYTICS_ID') || '';

## Set up CGI environment,
use CGI qw/:standard/;
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
$CGI::POST_MAX = 1024 * 100000;	## 100M uploads max.
my $query = new CGI;

use GO::CGI::Utilities;

use Data::Dumper;

##########
##
## I hate to do this at the top, but we need this to get names of the
## different subsets, databases, evcodes, etc. for creating the
## initial page. Ask the db...
##
##########

my $apph = GO::CGI::Utilities::create_apph();

#my $apph = GO::AppHandle->connect(
#				-dbname=>$ENV{GO_DBNAME},
#				-dbhost=>$ENV{GO_DBHOST},
#				);

## Need these for errors.
my $time_stamp = 'unknown';
my $html_url = $ENV{AMIGO_HTML_URL};

## First check.
server_die_template({MESSAGE => "Could not connect to GO database.",
	      STAMP => $time_stamp, URL => $html_url})
  if ! $apph;

## Correct the time assuming that we have the handle.
my $instance_hash = $apph->instance_data();
$time_stamp = $instance_hash->{release_name} if $instance_hash->{release_name};

## Available species databases.
my $apph_sd_hash = {};
my $tmp_apph_sd_hash = $core->source();
foreach my $src (keys %$tmp_apph_sd_hash) {
  $apph_sd_hash->{$src} = $src;
}

## BUG/TODO: Ugh--need to bring DBIX::Class stuff in here to cleanse
## this kind of hard coding.
## Available evidence codes.
my $apph_ontology_hash = {};
$apph_ontology_hash->{biological_process} = 'Biological Process';
$apph_ontology_hash->{cellular_component} = 'Cellular Component';
$apph_ontology_hash->{molecular_function} = 'Molecular Function';

## Available evidence codes.
#my $apph_evcode_hash = {};
#%{$apph_evcode_hash} = map {$_ => $_} $apph->evidence_codes;

## Available gp upload filetypes.
#my $gp_upload_type_hash = {};
#$gp_upload_type_hash->{obo} = 1;
#$gp_upload_type_hash->{gene_association} = 1;


##########
##
## Sanity check all possible incoming parameters:
##
## Flow arguments:
## 'session_id' maintain for the time being so we can easily link back into
##              the main AmiGO bits
## 'request' drop into data mode, build data structure
## 'force' this will force continuation instead of dying for *small*
##         problems
##
## Results arguments:
## 'output' what we output (e.g. map, gafile, count, etc.)
## 'format' how we output
##
## Data arguments:
## 'gp_list' list of gene ids
## 'gp_file' content of a gene id file (post)
## 'gp_file_type'
## 'bggp_file' content of a gene id file (post) for the background set
## 'bggp_file_type'
##
## Filter arguments:
## 'cutoff'
## 'min_gps'
## 'speciesdb'
## 'ontology'
## 'iea'
##### 'evcode' TODO
##
##########

my $upper_arg_size_limit = 256;
my $upper_list_arg_size_limit = 100000;


## Optional--if we don't have it, don't make a new one (for now...)
my $session_id = $query->param('session_id');
my $session_id_for_url = 'session_id=';
if( $session_id ){
  $session_id_for_url .= $session_id;
}


## Required
my $request = $query->param('request');
if( $request && $request ne 'results' ){
  client_die_template({MESSAGE => 'illegitimate request type (unknown value)',
		       STAMP => $time_stamp, URL => $html_url});
}

##
my $force = $query->param('force');
if( $force && ( $force ne 'yes' &&  $force ne 'no' ) ){
  client_die_template({MESSAGE => 'illegitimate force value',
		       STAMP => $time_stamp, URL => $html_url});
}
if( $force && $force eq 'yes' ){
  $force = 1; }
else{
  $force = 0; }


## What do we want to output?
my $output = $query->param('output');
if( $output && length($output) > $upper_arg_size_limit ){
  client_die_template({MESSAGE => "illegitimate output value",
		       STAMP => $time_stamp, URL => $html_url});
}elsif( $output && ( $output eq 'normal' ||
		     $output eq 'raw' ) ){
  ## OK, let it go.
}elsif( $output ){
  client_die_template({MESSAGE => "unknown output value",
		       STAMP => $time_stamp, URL => $html_url});
}else{
  ## Default value.
  $output = 'normal';
}


## Which format do we want? Force format to a defined and known value:
## html. Other formats are 'tab' (tab-delimited text file) and xml
## (TODO).
my $format = $query->param('format');
if( $format && length($format) > $upper_arg_size_limit ){
  client_die_template({MESSAGE => "illegitimate format value",
		       STAMP => $time_stamp, URL => $html_url});
}elsif( $format && ( $format eq 'tab' ||
 		     $format eq 'xml' ||
 		     $format eq 'html' ) ){
  ## OK, let it go.
}else{
  $format = 'html';
}


## Gene labels in the input box for enrichment processing.
my $gp_list = $query->param('gp_list');
if( $gp_list && length($gp_list) > $upper_list_arg_size_limit ){
  client_die_template({MESSAGE => 'illegitimate gene list value',
		       STAMP => $time_stamp, URL => $html_url});
}
if( $gp_list && $gp_list !~ /[a-z0-9]/i ){ # text in there too
  $gp_list = '';
}

## Stub for the background gene product list.
my $bggp_list = $query->param('bggp_list');
if( $bggp_list && length($bggp_list) > $upper_list_arg_size_limit ){
  client_die_template({MESSAGE => 'illegitimate background gene list value',
		       STAMP => $time_stamp, URL => $html_url});
}
if( $bggp_list && $bggp_list !~ /[a-z0-9]/i ){ # text in there too
  $bggp_list = '';
}

## The gene product list file.
my $gp_filehandle = $query->upload('gp_file');
if ( ! $gp_filehandle  && $query->cgi_error() ){
  my $error = $query->cgi_error();
  server_die_template({MESSAGE => "gp_file upload failed: $error ",
		       STAMP => $time_stamp, URL => $html_url});
}else{
  if ( $gp_filehandle && (
			  $gp_filehandle =~ /\.gz/i ||
			  $gp_filehandle =~ /\.bz/i ||
			  $gp_filehandle =~ /\.bz2/i ||
			  $gp_filehandle =~ /\.zip/i ||
			  $gp_filehandle =~ /\.z/i ||
			  $gp_filehandle =~ /\.tgz/i ) ){
    server_die_template({MESSAGE =>
			 "AmiGO does not currently accept compressed files. " .
			 "Please uncompress your file and try again.",
			 STAMP => $time_stamp, URL => $html_url});
  }
}

## The background gene product list file.
my $bggp_filehandle = $query->upload('bggp_file');
if ( ! $bggp_filehandle  && $query->cgi_error() ){
  my $error = $query->cgi_error();
  server_die_template({MESSAGE => "bggp_file upload failed: $error ",
		       STAMP => $time_stamp, URL => $html_url});
}else{
  if ( $bggp_filehandle && (
			  $bggp_filehandle =~ /\.gz/i ||
			  $bggp_filehandle =~ /\.bz/i ||
			  $bggp_filehandle =~ /\.bz2/i ||
			  $bggp_filehandle =~ /\.zip/i ||
			  $bggp_filehandle =~ /\.z/i ||
			  $bggp_filehandle =~ /\.tgz/i ) ){
    server_die_template({MESSAGE =>
			 "AmiGO does not currently accept compressed files. " .
			 "Please uncompress your file and try again.",
			 STAMP => $time_stamp, URL => $html_url});
  }
}

## What is the GP file type?
my $gp_file_type = $query->param('gp_file_type');
if( $gp_file_type && length($gp_file_type) > $upper_arg_size_limit ){
  client_die_template({MESSAGE => "illegitimate gp_file_type value",
		       STAMP => $time_stamp, URL => $html_url});
}elsif( $gp_file_type && ( $gp_file_type eq 'list' ||
			   $gp_file_type eq 'ga' ) ){
  ## OK, let it go.
}elsif( $gp_file_type ){
  client_die_template({MESSAGE => "unknown gp_file_type value",
		       STAMP => $time_stamp, URL => $html_url});
}

## What is the BGGP file type?
my $bggp_file_type = $query->param('bggp_file_type');
if( $bggp_file_type && length($bggp_file_type) > $upper_arg_size_limit ){
  client_die_template({MESSAGE => "illegitimate bggp_file_type value",
		       STAMP => $time_stamp, URL => $html_url});
}elsif( $bggp_file_type && ( $bggp_file_type eq 'list' ||
			     $bggp_file_type eq 'ga' ) ){
  ## OK, let it go.
}elsif( $bggp_file_type ){
  client_die_template({MESSAGE => "unknown bggp_file_type value",
		       STAMP => $time_stamp, URL => $html_url});
}


## BUG: There's a reason for all this oddness: the CGI was taking
## empty arguments and making legitimate arrays out of them.
my $no_incoming_speciesdbs = 0;
my @speciesdbs = ();
my @in_speciesdbs = $query->param('speciesdb');
my $speciesdbs_cardinality = scalar(keys %{$apph_sd_hash});
if( @in_speciesdbs && scalar(@in_speciesdbs) != 0 ){
  foreach my $speciesdb (@in_speciesdbs){
    if( $speciesdb ){
      if( length($speciesdb) > $upper_arg_size_limit ){
	client_die_template({MESSAGE => 'illegitimate speciesdb value',
			     STAMP => $time_stamp, URL => $html_url});
      }elsif( ! $apph_sd_hash->{$speciesdb} ){
	client_die_template({MESSAGE => 'unknown speciesdb value: '. $speciesdb,
			     STAMP => $time_stamp, URL => $html_url});
      }
      push @speciesdbs, $speciesdb;
    }
  }
}
if ( ! @speciesdbs ){
  @speciesdbs = keys %{$apph_sd_hash};
  ## This is for later to check on whether or not we have an error
  ## where the background was not properly specified.
  $no_incoming_speciesdbs = 1;
}

## Ontology filters.
my @ontologies = ();
my @in_ontologies = $query->param('ontology');
if( @in_ontologies ){
  foreach my $ontology (@in_ontologies){
    if( $ontology ){
      if( length($ontology) > $upper_arg_size_limit ){
	client_die_template({MESSAGE => 'illegitimate ontology value',
			     STAMP => $time_stamp, URL => $html_url});
      }elsif( $ontology && ! $apph_ontology_hash->{$ontology} ){
	client_die_template({MESSAGE => 'unknown ontology value: ' . $ontology,
			     STAMP => $time_stamp, URL => $html_url});
      }
      push @ontologies, $ontology;
    }
  }
}else{
  @ontologies = ();
}

## IEA filter: yes/no ~> 1/0
my $iea_p = $query->param('iea');
if( $iea_p && ( $iea_p ne 'yes' && $iea_p ne 'no' ) ){
  client_die_template({MESSAGE => 'illegitimate iea value',
		       STAMP => $time_stamp, URL => $html_url});
}
if( $iea_p && $iea_p eq 'no' ){
  $iea_p = 0;
}else{
  $iea_p = 1;
}

# ##
# my @evcodes = ();
# my @in_evcodes = $query->param('evcode');
# if( @in_evcodes ){
#   foreach my $evcode (@in_evcodes){
#     if( $evcode ){
#       if( length($evcode) > $upper_arg_size_limit ){
# 	die_template({MESSAGE => 'illegitimate evcode value');
#       }elsif( $evcode && ! $apph_evcode_hash->{$evcode} ){
# 	die_template({MESSAGE => 'unknown evcode value: ' . $evcode);
#       }
#       push @evcodes, $evcode;
#     }
#   }
# }else{
#   @evcodes = ();
# }

## Optional but necessary numeric argument.
my $cutoff = $query->param('cutoff');
if( $cutoff &&
    ( length($cutoff) > $upper_arg_size_limit ||
      $cutoff =~ /[^0-9\.]+/ ) ){ # TODO: Make this a better check.
  client_die_template({MESSAGE => 'illegitimate cutoff value',
		       STAMP => $time_stamp, URL => $html_url});
}elsif( $cutoff ){
  $cutoff = $cutoff + 0.0;
}else{
  $cutoff = 0.01;
}

## Optional but necessary numeric argument.
my $min_gps = $query->param('min_gps');
if( $min_gps &&
    ( length($min_gps) > $upper_arg_size_limit ||
      $min_gps =~ /[^0-9]+/ ) ){ # TODO: Make this a better check.
  client_die_template({MESSAGE => 'illegitimate min_gps value',
		       STAMP => $time_stamp, URL => $html_url});
}elsif( $min_gps ){
  $min_gps = $min_gps + 0;
}else{
  $min_gps = 2;
}


##########
##
## Set defaults for values that will be used during template
## processing.
##
##########

## Main/default template.
my $template = 'term_enrichment_main.tmpl';

## Main template variable.
my $vars = {};

## TODO: Temporary fix until new framework brought in.
## Variables for AmiGO
$vars->{session_id} = $session_id;
$vars->{session_id_for_url} = $session_id_for_url;
$vars->{show_goose_links} = $ENV{AMIGO_SHOW_GOOSE_LINKS} || 0;
$vars->{SHOW_BLAST_P} = $ENV{AMIGO_SHOW_BLAST} || 0;
$vars->{BETA} = $core->amigo_env('AMIGO_BETA') || 0;
$vars->{TROUBLE} = $core->amigo_env('AMIGO_TROUBLE_SWITCH') || 0;
$vars->{TROUBLE_MESSAGE} = $core->amigo_env('AMIGO_TROUBLE_MESSAGE') || '';
$vars->{GOOGLE_ANALYTICS_ID} = $google_id;
$vars->{VERSION} = $core->amigo_env('VERSION') || 'unknown';

## Variables for results.
$vars->{DISPLAY_MAIN_RESULTS} = 0;
$vars->{NUMBER_OF_RESULTS} = 0;
$vars->{NUMBER_OF_RESULTS_OVER_THRESHOLDS} = 0;
$vars->{NUMBER_OF_GPS_INPUTTED} = -1;

$vars->{DISPLAY_MISSING_GPS} = 0; # show
$vars->{DISPLAY_MISSING_BGGPS} = 0; # show bggps not found
$vars->{MISSING_GPS} = []; # gps not found
$vars->{MISSING_BGGPS} = []; # bggps not found

$vars->{DISPLAY_DUPLICATE_GPS} = 0; # show
$vars->{DISPLAY_DUPLICATE_BGGPS} = 0; # show bggps
$vars->{DUPLICATE_GPS} = []; # dupe gps
$vars->{DUPLICATE_BGGPS} = []; # dupe bggps

$vars->{DISPLAY_REPEAT_GPS} = 0; # show
$vars->{DISPLAY_REPEAT_BGGPS} = 0; # show bggps
$vars->{REPEAT_GPS} = {}; # repeat gps
$vars->{REPEAT_BGGPS} = {}; # repeat bggps

$vars->{GO_TERMS} = []; #

## Variables for GUI
$vars->{AVAILABLE_ONTOLOGIES} = $apph_ontology_hash; # Onts we can choose from.
%{$vars->{ECHO_ONTOLOGIES}} = map { $_ => 1 } @ontologies;

#$vars->{AVAILABLE_EVCODES} = $apph_evcode_hash; # evcodes we can choose from.
#%{$vars->{ECHO_EVCODES}} = map { $_ => 1 } @evcodes;

$vars->{AVAILABLE_SPECIESDBS} = $apph_sd_hash; # DBs we can choose from.

## BUG: This is still fallout from the TermFinder argument bug from
## above.
if( scalar(@speciesdbs) == $speciesdbs_cardinality ){
  %{$vars->{ECHO_SPECIESDBS}} = ();
  $vars->{ECHO_SPECIESDBS_STRING} = 'all databases used';
}else{
  %{$vars->{ECHO_SPECIESDBS}} = map { $_ => 1 } @speciesdbs;
  $vars->{ECHO_SPECIESDBS_STRING} = join ' ', @speciesdbs;
}

$vars->{ECHO_GP_LIST} = $gp_list;
$vars->{ECHO_BGGP_LIST} = $bggp_list;
$vars->{ECHO_IEA_P} = $iea_p;
$vars->{ECHO_MIN_GPS} = $min_gps;
$vars->{ECHO_CUTOFF} = $cutoff;

## A couple of things for template niceness.
$vars->{LAST_UPDATE_STRING} = $time_stamp;
$vars->{HTML_URL} = $html_url;


##
if ( $request && $request eq 'results' ) {

  ## Gotta have a format and a target output.
  #die_template({MESSAGE => "Need to have an output type.") if ! $output;
  client_die_template({MESSAGE => "Need to have a format type.",
		       STAMP => $time_stamp, URL => $html_url})
    if ! $format;

  ## Required arguments so the client knows where the output is.
  #die_template({MESSAGE => "a field is required for results")
  #  if ! $field;

  $apph->filters({speciesdbs=>\@speciesdbs})
    if @speciesdbs;
  #$apph->filters({ontology=>\@ontologies})
  #  if @ontologies;
  #$apph->filters({evcodes=>\@evcodes}) if @evcodes;
  #$apph->filters({speciesdb=>\@speciesdbs}) if @speciesdbs;
  #$apph->filters({evcode=>\@evcodes}) if @evcodes;

  ##########
  ##
  ## Handle incoming gps.
  ##
  ##########

  ## Make sure that we have input...
  client_die_template({MESSAGE =>
		       "A gene product list is necessary for this operation",
		       STAMP => $time_stamp, URL => $html_url})
    if ! $gp_list && ! $gp_filehandle;

  ## ...but only one sample...
  #if( ( $gp_list && $gp_filehandle ) ||
  #    ( $gp_filehandle && @speciesdbs ) ||
  #    ( @speciesdbs && $gp_list ) ){
  if( $gp_filehandle && $gp_list ){
    client_die_template({MESSAGE => "Please choose just a single sample gene p".
			 "roduct input method: you have selected at least two.",
			 STAMP => $time_stamp, URL => $html_url});
  }

  ## ...and only one background set.
  #if( ( $bggp_list && $bggp_filehandle ) ||
  #    ( $bggp_filehandle && @speciesdbs ) ||
  #    ( @speciesdbs && $bggp_list ) ){
  if( $bggp_filehandle && $bggp_list ){
    client_die_template({MESSAGE => "Please choose just a single background " .
			 "gene product input method: " .
			 "you have selected at least two.",
			 STAMP => $time_stamp, URL => $html_url});
  }

  ## And make sure that there is *some* kind of input coming in--in
  ## our case, we should not be using the entire DB as a background
  ## set.
  if( ! $bggp_filehandle && ! $bggp_list && $no_incoming_speciesdbs ){
    client_die_template({MESSAGE => "You must either select an organism database for your background set OR upload your own background set (with a database filter as well if desired).",
			 STAMP => $time_stamp, URL => $html_url});
  }

  ## TODO/BUG: non-IEA and filter as background are currently
  ## incompatible.
  client_die_template({MESSAGE => "You may only choose to not use IEAs when you upload your own background list. Please go back and adjust your inputs.",
		       STAMP => $time_stamp, URL => $html_url})
    if ! $iea_p && ! $bggp_filehandle && ! $bggp_list;


  ## If there is no gp_list, but we have a gp_filehandle, turn the one
  ## into the other.
  if( $gp_filehandle ){

    if( $gp_file_type eq 'ga' ){

      ## Get gene associations in upload.
      my $reader = AmiGO::Reader->new('go_assoc', 'sessions/scratch');
      my $term_list = $reader->readh($gp_filehandle);
      client_die_template({MESSAGE => "Failed on association input (file): " .
			   $reader->error_message,
			   STAMP => $time_stamp, URL => $html_url})
	if ! $reader->success;

      ## Squeeze all of the gps out of the term list.
      my @minibuf = ();
      foreach my $term (@$term_list){
	my $gp_list = $term->product_list;
	foreach my $gp (@$gp_list){
	  push @minibuf, $gp->acc;
	}
      }
      $gp_list = join ' ', @minibuf;

    }elsif( $gp_file_type eq 'list' ){

      my @minibuf = ();
      while ( <$gp_filehandle> ) {
	push @minibuf, $_; }
      $gp_list = join ' ', @minibuf;

    }else{
      die "Impossible doesn\'t mean what I think it means.";
    }
  }

  ## Now that we hopefully have some kind of gp list, let's check it
  ## against the actual ontology.
  my @gp_list = ();
  my $complete_gp_list = [];
  if( $gp_list ){

    ## May be an incoming spammer--stop them.
    if( $gp_list =~ /http\:\/\//gos ){
      client_die_template({MESSAGE => 'illegitimate gene list value:' .
			   'URLs not allowed',
			   STAMP => $time_stamp, URL => $html_url});
    }

    ## Tokenize--crop trailing and leading ws, split on ws-like
    ## things. Remove all of the dupes.
    #     $gp_list =~ s/^\s+//;
    #     $gp_list =~ s/\s+$//;
    #     my @gp_list = split /\s+/, $gp_list;
    @gp_list = @{$core->clean_list($gp_list)};
    #$core->kvetch("# gp list: " . scalar(@gp_list));

    ##
    my $lresolve = AmiGO::LabelResolve->new($apph->dbh, \@speciesdbs);
    $core->kvetch("# specdbs: " . scalar(@speciesdbs));
    $lresolve->convert_list(\@gp_list);

    ## Warn about dupes.
    my $duplicate_list = $lresolve->get_duplicate_gps();
    $core->kvetch("_dupes :" . scalar(@$duplicate_list));
    if( scalar(@$duplicate_list) ){
      push @{$vars->{DUPLICATE_GPS}}, @$duplicate_list;
      $vars->{DISPLAY_DUPLICATE_GPS} = 1;
    }

    ## Warn about missing labels.
    my $missing_list = $lresolve->get_missing_gps();
    $core->kvetch("_missing :" . scalar(@$missing_list));
    if( scalar(@$missing_list) ){
      if ( $force ) {
	push @{$vars->{MISSING_GPS}}, @$missing_list;
	$vars->{DISPLAY_MISSING_GPS} = 1;
      }else {
	client_die_template({STAMP => $time_stamp, URL => $html_url,
			     MESSAGE => "Couldn't find: " . @$missing_list .
			     ' with current filters. ' .
			     'If the filters are correct, ' .
			     'the gene product may not be present in the ' .
			     'GO database.'});
      }
    }

    ## Warn about repeats.
    my $repeat_hash = $lresolve->get_repeat_gps_hash();
    $core->kvetch("_sample repeat :" . scalar(keys %$repeat_hash) . ' '.
		  $repeat_hash);
    if( scalar(keys %$repeat_hash) ){
      if( $force ){
	$vars->{REPEAT_GPS} = $repeat_hash;
	$vars->{DISPLAY_REPEAT_GPS} = 1;
      }else{
	client_die_template({STAMP => $time_stamp, URL => $html_url,
			     MESSAGE => keys(%$repeat_hash) .
			     ' were found in the sample set' .
			     ' under multiple species or'.
			     ' with an ambiguous identifier.'});
      }
    }

    ## TODO: This is a bottleneck--DBIx and blessing might be able to
    ## power through it.
    ## Add to complete_gp_list.
    my $good_list = $lresolve->get_good_gps();
    #     $complete_gp_list = $apph->get_products({acc=>$good_list});
    #     $core->kvetch("_end jump (sample): " . scalar(@$complete_gp_list));
    foreach( @$good_list ){
      #$core->kvetch("_good:\"$_\"");
      my $gp = $apph->get_product({acc=>$_});
      if( $gp ){
	#$core->kvetch("\t_found \"$_ -> $gp\"");
	push @$complete_gp_list, $gp;
      }else{
	#$core->kvetch("\t_not found \"$_");
	## TODO/BUG: we shouldn't be able to get in here.
	push @{$vars->{MISSING_GPS}}, $_;
	$vars->{DISPLAY_MISSING_GPS} = 1;
      }
    }
  }

  ## Extra check/error message when repeats have thrown things so
  ## badly for the hypergeometric variables that we might not make it
  ## to the results page where the announcement would normally be.
  if( scalar(@gp_list) < scalar(@$complete_gp_list) ){

    ## Generate nice display of the problems.
    my @c1 = ();
    foreach my $amb (keys %{$vars->{REPEAT_GPS}}){
      my @c2 = ();
      foreach my $lamb (keys %{$vars->{REPEAT_GPS}{$amb}}){
	push @c2, $lamb;
	$core->kvetch('lamb: ' . $lamb);
      }
      my $ts = $amb . ' (' . join(', ', @c2) . ')' ;
      $core->kvetch('ts: ' . $ts);
      push @c1, $ts;
    }
    my $mstr = join '; ', @c1;

    client_die_template({STAMP => $time_stamp, URL => $html_url,
			 MESSAGE => 'The following labels were found in the sample set under multiple species or with an ambiguous identifier. The number of repeated labels is high enough that it may render the results unusable. Please try and resolve these to a more unique identifier: ' . $mstr . '.'});
  }

  ##########
  ##
  ## Handle incoming background gps.
  ##
  ##########

  $core->kvetch("___before bggp fh");

  ##
  if( $bggp_filehandle ){

    if( $bggp_file_type eq 'ga' ){

      ## Get gene associations in upload.
      my $reader = AmiGO::Reader->new('go_assoc', 'sessions/scratch');
      my $term_list = $reader->readh($bggp_filehandle);
      server_die_template({MESSAGE => "Failed on bggp input (file): " .
			   $reader->error_message,
			   STAMP => $time_stamp, URL => $html_url})
	if ! $reader->success;

      ## Squeeze all of the gps out of the term list.
      my @minibuf = ();
      foreach my $term (@$term_list){
	my $gp_list = $term->product_list;
	foreach my $gp (@$gp_list){
	  push @minibuf, $gp->acc;
	}
      }
      $bggp_list = join ' ', @minibuf;

    }elsif( $bggp_file_type eq 'list' ){

      my @minibuf = ();
      while ( <$bggp_filehandle> ) {
	push @minibuf, $_; }
      $bggp_list = join ' ', @minibuf;

    }else{
      die "Impossible doesn\'t mean what I think it means.";
    }
  }

  $core->kvetch("___before bggp list");

  ##
  #my %complete_bggp_hash = ();
  my $complete_bggp_list = [];
  if( $bggp_list ){

    ## May be an incoming spammer--stop them.
    if( $bggp_list =~ /http\:\/\//gos ){
      client_die_template({MESSAGE =>
			   'illegitimate background gene list value: '.
			   'URLs not allowed',
			   STAMP => $time_stamp, URL => $html_url});
    }

    ## Tokenize--crop trailing and leading ws, split on ws-like
    ## things.
    #     $bggp_list =~ s/^\s+//;
    #     $bggp_list =~ s/\s+$//;
    #     my @bggp_list = split /\s+/, $bggp_list;
    my @bggp_list = @{$core->clean_list($bggp_list)};

    ##
    ## The next section is essentially a dupe of the one above.
    ##

    ##
    #my $lresolve = AmiGO::LabelResolve->new($apph->dbh);
    my $lresolve = AmiGO::LabelResolve->new($apph->dbh, \@speciesdbs);
    $lresolve->convert_list(\@bggp_list);

    ## Note: this will only find textual dupes.
    my $duplicate_list = $lresolve->get_duplicate_gps();
    if( scalar(@$duplicate_list) ){
      push @{$vars->{DUPLICATE_BGGPS}}, @$duplicate_list;
      $vars->{DISPLAY_DUPLICATE_BGGPS} = 1;
    }

    ##
    my $missing_list = $lresolve->get_missing_gps();
    if( scalar(@$missing_list) ){
      if ( $force ) {
	push @{$vars->{MISSING_BGGPS}}, @$missing_list;
	$vars->{DISPLAY_MISSING_BGGPS} = 1;
      }else {
	client_die_template({MESSAGE => "Couldn't find: " . @$missing_list .
			     ' with current filters. ' .
			     'If the filters are correct, ' .
			     'the gene product may not be present in the ' .
			     'GO database.',
			     STAMP => $time_stamp, URL => $html_url});
      }
    }

    ## Warn about repeats.
    my $repeat_hash = $lresolve->get_repeat_gps_hash();
    $core->kvetch("_sample repeat :" . scalar(keys %$repeat_hash) . ' '.
		  $repeat_hash);
    if( scalar(keys %$repeat_hash) ){
      if ( $force ) {
	$vars->{REPEAT_BGGPS} = $repeat_hash;
	$vars->{DISPLAY_REPEAT_BGGPS} = 1;
      }else {
	client_die_template({STAMP => $time_stamp, URL => $html_url,
			     MESSAGE => keys(%$repeat_hash) .
			     ' were found in the background set' .
			     ' under multiple species or'.
			     ' with an ambiguous identifier.'});
      }
    }

    ## TODO: This is a bottleneck--DBIx and blessing might be able to
    ## power through it.
    ## Add to complete_bggp_list.
    my $good_list = $lresolve->get_good_gps();
    #     $core->kvetch("_start jump (bg): " . scalar(@$good_list));
    #     $complete_bggp_list = $apph->get_products({acc=>$good_list});
    #     $core->kvetch("_end jump (bg): " . scalar(@$complete_bggp_list));
    foreach( @$good_list ){
      #$core->kvetch("_good (bg): \"$_\"");
      my $gp = $apph->get_product({acc=>$_});
      if( $gp ){
	#$core->kvetch("\t_found \"$gp\"");
	push @$complete_bggp_list, $gp;
      }else{
	## TODO/BUG: we shouldn't be able to get in here.
	push @{$vars->{MISSING_BGGPS}}, $_;
	$vars->{DISPLAY_MISSING_BGGPS} = 1;
      }
    }
  }

  $core->kvetch("___before complete check");

  ## We did get something, right? Check to see if the filters hacked
  ## everything out.
  if( ! scalar( @$complete_gp_list )){
    if( $gp_list ){
      client_die_template({MESSAGE => $gp_list .
			   ': target gene product(s) could ' .
			   'not be found with the current filters. ' .
			   'If the filters are correct, ' .
			   'the gene product(s) may not be present in the ' .
			   'GO database.',
			   STAMP => $time_stamp, URL => $html_url});
    }else{
      client_die_template({MESSAGE => "No gene products defined in gp_list.",
			   STAMP => $time_stamp, URL => $html_url});
    }
  }
  $core->kvetch("___|complete_gp_list| " . scalar(@$complete_gp_list));

  ## And now do the same for the background list, but we don't care if
  ## nothing at all is defined--that will default us to using
  ## everything.
  if( $bggp_list && ! @$complete_bggp_list ){
    client_die_template({MESSAGE => $bggp_list .
			 ': background list gene product(s) could ' .
			 'not be found with the current filters. ' .
			 'If the filters are correct, ' .
			 'the gene product(s) may not be present in the ' .
			 'GO database.',
			 STAMP => $time_stamp, URL => $html_url});
  }
  $core->kvetch("___|complete_bggp_list| " . scalar(@$complete_bggp_list));

  ##
  ## TODO: This next section should be folded into LabelResolve. There
  ## are already several places where this has started...or maybe I
  ## should just wait for the rewrite with the DBIx::Class stuff? That
  ## would certainly make the logic easier.
  ##

  my %bggp_dupe_cache = ();
  my %bggp_dupe_suppliment = ();
  foreach (@$complete_bggp_list){
    if( ! $bggp_dupe_cache{$_->id} ){
      $bggp_dupe_cache{$_->id} = $_->symbol;
    }else {
      $bggp_dupe_suppliment{$_->id} = $_->symbol;
      $core->kvetch("___found a bg dupe before enrichment: " . $_->id);
    }
  }
  foreach (keys %bggp_dupe_suppliment){
    push @{$vars->{DUPLICATE_BGGPS}}, $bggp_dupe_suppliment{$_};
    $vars->{DISPLAY_DUPLICATE_BGGPS} = 1;
    $core->kvetch("___echo bg dupe: " . $bggp_dupe_suppliment{$_});
  }
  $core->kvetch("___number of bg new dupes: " .
		scalar(@{$vars->{DUPLICATE_BGGPS}}));
  ##DEBUG: SAMPLE
  my %gp_dupe_cache = ();
  my %gp_dupe_suppliment = ();
  foreach (@$complete_gp_list){
    if( ! $gp_dupe_cache{$_->id} ){
      $gp_dupe_cache{$_->id} = $_->symbol;
    }else {
      $gp_dupe_suppliment{$_->id} = $_->symbol;
      $core->kvetch("___found a sample dupe before enrichment: " . $_->id);
    }
  }
  foreach (keys %gp_dupe_suppliment){
    push @{$vars->{DUPLICATE_GPS}}, $gp_dupe_suppliment{$_};
    $vars->{DISPLAY_DUPLICATE_GPS} = 1;
    $core->kvetch("___echo sample dupe: " . $gp_dupe_suppliment{$_});
  }
  $core->kvetch("___number of new sample dupes: " .
		scalar(@{$vars->{DUPLICATE_GPS}}));

  ##
  ## END: section that should be folded into LabelResolve.
  ##


  $core->kvetch("___before enrichment (a): sample: " .
	       scalar(@$complete_gp_list) .
	       ", bg: " .
	       scalar(@$complete_bggp_list));

  ## Now, since we're resonably sure that the array ref is populated,
  ## we'll go ahead with the enrichment.
  #my $eth = $apph->get_enriched_term_hash( $complete_gp_list, $ontology );
  $vars->{NUMBER_OF_GPS_INPUTTED} = scalar( @$complete_gp_list )
    if @$complete_gp_list;
  $core->kvetch("___before enrichment (b):");
  $core->kvetch("\t(sample): " . scalar( @$complete_gp_list ));
  $core->kvetch("\t(bggp): " . scalar( @$complete_bggp_list ));

  my $eth = $apph->fast_get_enriched_term_hash( $complete_gp_list,
						$complete_bggp_list,
						\@speciesdbs,
						$iea_p);

  $core->kvetch("___after enrichment:" . keys(%$eth));

  server_die_template({MESSAGE => "couldn\'t generate enriched term hash (1)",
		       STAMP => $time_stamp, URL => $html_url})
    if ! defined $eth || ! $eth;

  ## Sort according to p-value.
  my @eth_rows =
    sort {
      #$a->{p_value} <=> $b->{p_value}
      $a->{corrected_p_value} <=> $b->{corrected_p_value}
    } values %$eth;

  ## Chew into an easily digested form for the TT and direct output.
  $vars->{ROWS} = [];
  $vars->{BP_ROWS} = [];
  $vars->{CC_ROWS} = [];
  $vars->{MF_ROWS} = [];
  foreach ( @eth_rows ) {

    ##
    my $acc = $_->{term}->acc || '';
    my $name = $_->{term}->name || '';
    my $aspect = $_->{term}->get_code_from_namespace || '';
    my $pval = sprintf "%.2e", $_->{corrected_p_value};

    my $number_gps_in_sample = $_->{n_gps_in_sample};
    my $number_gps_in_sample_annotated = $_->{n_gps_in_sample_annotated};
    my $sample_ratio = sprintf "%.1f",
      ($number_gps_in_sample_annotated / $number_gps_in_sample) * 100.0;

    my $number_gps_in_background = $_->{n_gps_in_background};
    my $number_gps_in_background_annotated =
      $_->{n_gps_in_background_annotated};
    my $background_ratio = sprintf "%.1f",
      ($number_gps_in_background_annotated / $number_gps_in_background) * 100.0;

    ## TODO: Convert the below genes into something a little more
    ## palatable.
    my $gene_accs =
      [ map {sprintf("%s", $_->acc)} @{$_->{gps_in_sample_annotated}} ];
    my $genes = $_->{gps};

    ## Drop everything below our threshold. TODO: Is the coersion
    ## really necessary?
    if( $output eq 'raw' || ( $_->{corrected_p_value} + 0.0 <= $cutoff + 0.0 &&
			      $_->{n_gps_in_sample_annotated} + 0.0 >=
			      $min_gps + 0.0 &&
			      $acc ne 'all' ) ){

      ## Add to GO terms list.
      push @{ $vars->{GO_TERMS} }, $acc;

      ## Add to the filtered output buffer.
      my $current_item = {
			  acc => $acc,
			  aspect => $aspect,
			  name => $name,
			  pval => $pval,

			  number_gps_in_sample_annotated =>
			  $number_gps_in_sample_annotated,
			  number_gps_in_sample =>
			  $number_gps_in_sample,
			  sample_ratio =>
			  $sample_ratio,

			  number_gps_in_background_annotated =>
			  $number_gps_in_background_annotated,
			  number_gps_in_background =>
			  $number_gps_in_background,
			  background_ratio =>
			  $background_ratio,

			  gene_accs => $gene_accs,
			  genes => $genes
			 };

      push @{ $vars->{ROWS} }, $current_item;
      if( $aspect eq 'P' ){
	push @{ $vars->{BP_ROWS} }, $current_item;
      }elsif( $aspect eq 'C' ){
	push @{ $vars->{CC_ROWS} }, $current_item;
      }elsif( $aspect eq 'F' ){
	push @{ $vars->{MF_ROWS} }, $current_item;
      }

    }
  }

  ## We've had no problems--looks like we're gunna try to show
  ## results.
  $vars->{NUMBER_OF_RESULTS_OVER_THRESHOLDS} = scalar(@{ $vars->{ROWS} });
  $vars->{NUMBER_OF_RESULTS} = scalar(@eth_rows);
  $vars->{DISPLAY_MAIN_RESULTS} = 1;

  $vars->{DISPLAY_BP_RESULTS} = scalar(	@{ $vars->{BP_ROWS} } );
  $vars->{DISPLAY_CC_RESULTS} = scalar(	@{ $vars->{CC_ROWS} } );
  $vars->{DISPLAY_MF_RESULTS} = scalar(	@{ $vars->{MF_ROWS} } );

  ## Data to make POST transfer viable.
  $vars->{TRANSFER_GP_LIST} =
    join ' ', map { $_->acc; } @{ $complete_gp_list };
  $vars->{TRANSFER_SLIM_LIST} =
    join ' ', @{ $vars->{GO_TERMS} };
  $vars->{TRANSFER_SESSION_ID} = $session_id;

#   ## Make a link for the transfer.
#   ## TODO/BUG:: switch over to get_interlink
#   my $gp_list_string = join '%0D%0A', map { $_->acc; } @{ $complete_gp_list };
#   my $term_list_string = join '%0D%0A', @{ $vars->{GO_TERMS} };
#   $vars->{transfer_link} =
#     'slimmer?slim_list=' . $term_list_string . '&gp_list=' . $gp_list_string .
#       '&' . $session_id_for_url;

  ## Create links for the visualizer.
  my $jhash = {};
  foreach my $r (@{ $vars->{ROWS} }){
    $jhash->{$r->{acc}} = $r->{pval};
  }
  my $jspvals = $core->pvals_to_json($jhash);
  #$core->kvetch("jsonified pvals: " . $jspvals);
  #my $conv_data = $core->ticks_to_quot($jspvals),

  ## Please note that we're not gettting the typical safe URL from
  ## get_interlink, but rather passing the hash to TT for
  ## rendering. The POST string will be messed-up if there it is
  ## escaped. TODO/BUG: this needs to be fixed in a more consistant
  ## way than the current hack.
  $vars->{visualize_limit} = 500;
  $vars->{visualize_form_hash} =
    $core->get_interlink({mode => 'visualize',
			  optional => {hash => 1},
			  arg => {
				  data => $core->ticks_to_quot($jspvals),
				  #data => $conv_data,
				  #data => $jspvals,
				  data_type => 'json',
				  format => 'png',
				 }});
}

##########
##
## Publish results using template or direct.
##
##########

if( $format eq 'html' ){

  $core->kvetch("start html template processing");

  ## Template runtime parameters.
  my $tt = Template->new({
			  INCLUDE_PATH => $ENV{AMIGO_TEMPLATE_PATHS},
			  EVAL_PERL => 1,
			  #PRE_CHOMP => 1,
			  #POST_CHOMP => 1,
			  TRIM => 1,
			  RECURSION => 1
			 });

  html_header();
  $tt->process($template, $vars) ||
    server_die_template({MESSAGE => "failed to process $template (" .
			 $tt->error() . ")",
			 STAMP => $time_stamp, URL => $html_url});

  $core->kvetch("done html template processing");

}elsif( $format eq 'tab' ){

  ## Hand emit.
  # tab_header();
  unknown_header();
  if( ! scalar(@{ $vars->{ROWS} })){
    print "## No results above threshold.\n";
  }
  foreach my $row (@{ $vars->{ROWS} }){

    my @minibuf = ();
    foreach my $gene (@{$$row{genes}}){
      push @minibuf, $gene->{SPECIESDB} . ':' . $gene->{ACC};
    }
    my $gstring = join ' ', @minibuf;

    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
      $$row{acc}, $$row{aspect}, $$row{name}, $$row{pval},
	$$row{number_gps_in_sample_annotated}, $$row{number_gps_in_sample},
	  $$row{number_gps_in_background_annotated},
	    $$row{number_gps_in_background}, $gstring;
  }

}elsif( $format eq 'xml' ){

  ## Hand emit.
  xml_header();
  print"<response>";
  if( ! scalar(@{ $vars->{ROWS} })){
    print "<error>";
    print "No results above threshold";
    print "</error>";
  }
  foreach my $row (@{ $vars->{ROWS} }){
    print"<term>";
    print"<acc>";
    printf "%s", $$row{acc};
    print"</acc>";
    print"<aspect>";
    printf "%s", $$row{aspect};
    print"</aspect>";
    print"<name>";
    printf "%s", $$row{name};
    print"</name>";
    print"<pval>";
    printf "%s", $$row{pval};
    print"</pval>";
    print"<sample_annotated>";
    printf "%s", $$row{number_gps_in_sample_annotated};
    print"</sample_annotated>";
    print"<sample>";
    printf "%s", $$row{number_gps_in_sample};
    print"</sample>";
    print"<database_annotated>";
    printf "%s", $$row{number_gps_in_background_annotated};
    print"</database_annotated>";
    print"<database>";
    printf "%s", $$row{number_gps_in_background};
    print"</database>";
    print"<genes>";
    foreach my $gene (@{$$row{genes}}){
      print"<gene>";
      print $gene->{SPECIESDB} . ':' . $gene->{ACC};
      print"</gene>";
    }
    print"</genes>";
    print"</term>";
  }
  print"</response>";

}else{
  client_die_template({MESSAGE => "How did you get here? Impossible!",
		       STAMP => $time_stamp, URL => $html_url});
}

#####
##
## Subs.
##
####


##
sub status_error_client{ print "Status: 400 Bad Request\n"; }
sub status_error_server{ print "Status: 500 Internal Server Error\n"; }
sub html_header{ print "content-type:text/html\n\n"; }
sub tab_header{ print "content-type:text/plain\n\n"; }
sub xml_header{ print "content-type:text/xml\n\n"; }
sub unknown_header{ print "content-type:unknown\n\n"; }


##
sub client_die_template {
  my $message = shift || 'generic error';
  status_error_client();
  die_template($message);
}


##
sub server_die_template {
  my $message = shift || 'generic error';
  status_error_server();
  die_template($message);
}


##
sub die_template {

  my $arg = shift || {};
  my $message = $arg->{MESSAGE} || 'generic error';
  my $stamp = $arg->{STAMP} || '';
  my $url = $arg->{URL} || '';

  ## Template runtime parameters.
  my $diet = Template->new({
			    INCLUDE_PATH => $ENV{AMIGO_TEMPLATE_PATHS},
			    EVAL_PERL => 1,
			    TRIM => 1
			   });
  html_header();
  $diet->process('amigo_error.tmpl',
		 {
		  ERROR_MESSAGE => $message,
		  LAST_UPDATE_STRING => $stamp,
		  HTML_URL => $url,
		  BETA => $core->amigo_env('AMIGO_BETA') || 0,
		 })
    || die "$message: $!"; # ASK: Is croak or confess more appropriate?
  exit(-1); ## BUG: Why do I need both.
}
