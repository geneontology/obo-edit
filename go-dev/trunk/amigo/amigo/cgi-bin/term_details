#!/usr/bin/perl -w
####
#### Replacement for term-details-cgi. Not in amigo for backwards
#### compat reasons, but we might want to consider changing that in
#### the future. OTOH, it might make it easier to transition to
#### mod_perl if things are broken up like this...
####
#### TODO: Spin out large chunks to workers--there is a lot of
#### reusable code here...
####

BEGIN { require "config.pl"; }
use lib $ENV{GO_DEV_ROOT} . '/go-perl';
use lib $ENV{GO_DEV_ROOT} . '/go-db-perl';
use lib $ENV{GO_DEV_ROOT} . '/amigo/perl';
use lib $ENV{GOBO_ROOT};

package AmiGO::WebApp::TermDetails;
use base 'AmiGO::WebApp';

use Data::Dumper;

use CGI::Application::Plugin::Session;
use CGI::Application::Plugin::TT;
use CGI::Application::Plugin::Redirect;

use AmiGO::WebApp::Input;

use GOBO::DBIC::GODBModel::Schema;

use JSON;

## Real external workers.
use AmiGO::Worker::Term;
use AmiGO::Worker::Subset;
use AmiGO::Worker::GeneProductCount;
use AmiGO::External::XML::GONUTS;
use AmiGO::External::QuickGO::Term;


##
sub setup {

  my $self = shift;

  $self->{STATELESS} = 0;

  ## Configure how the session stuff is going to be handled when and
  ## if it is necessary.
  $self->session_config(
			CGI_SESSION_OPTIONS => [
						"driver:File",
						$self->query,
						{Directory=> $self->{CORE}->amigo_env('AMIGO_CGI_ROOT_DIR') . '/sessions'}
					       ],
			COOKIE_PARAMS       => {
						-path  => '/',
					       },
			SEND_COOKIE         => 1,
 );

  $self->tt_config(TEMPLATE_OPTIONS =>
		   {INCLUDE_PATH =>
		    $self->{CORE}->amigo_env('GO_DEV_ROOT') .
		    '/amigo/amigo/templates'});

  $self->mode_param('mode');
  $self->start_mode('details');
  $self->error_mode('mode_fatal');
  $self->run_modes(
		   'details'   => 'mode_term_details',
		   'compact'   => 'mode_term_details_compact',
		   'AUTOLOAD'  => 'mode_exception'
		  );
}


## TODO: Temporary muxing while we get the style finalized.
sub mode_term_details {
  my $self = shift;
  return mode_term_details_core($self, 'basic');
}
sub mode_term_details_compact {
  my $self = shift;
  return mode_term_details_core($self, 'compact');
}


## Nice example: amigo/term-details.cgi?term=GO:0022008
sub mode_term_details_core {

  my $self = shift;
  my $type = shift || 'basic'; # TODO: temporary muxing until final.

  ##
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile('term');
  my $input_term_id = $params->{term};
  $self->_common_params_settings({'title' =>
				  'AmiGO: Term Details for ' . $input_term_id});

  ## Input sanity check.
  if( ! $input_term_id ){
    return $self->mode_die_with_message("Term acc could not be found! Is it".
					" possible that what you're looking".
					" for is not a term acc?");
  }

  ###
  ### Get full term info.
  ###

  # my $term_q = AmiGO::Worker::Term->new("excessive");
  my $term_q = AmiGO::Worker::Term->new();
  my $term_info = $term_q->get_info($input_term_id);
  if( ! defined($term_info) || $self->{CORE}->empty_hash_p($term_info) ){
    return $self->mode_die_with_message("The acc you're looking for could".
					" not be found in the database!");
  }

  ## Should just be one now, yeah?
  my $foo = (keys %$term_info)[0];
  #$self->{CORE}->kvetch('$term_info: ' . Dumper($term_info->{$foo}));
  $self->set_template_parameter('TERM_INFO', $term_info->{$foo});

  ## First switch on term vs. subset.
  my $is_term_acc_p = $self->{CORE}->is_term_acc_p($input_term_id);
  my $acc_list_for_gpc_info = [];
  my $input_term_id_list = [];
  if( $is_term_acc_p ){

    $self->{CORE}->kvetch('Looks like a term acc...');

    ## Even if just a single acc, put it into list form--that's what
    ## we'll be using.
    $input_term_id_list = [$input_term_id];
    push @$acc_list_for_gpc_info, $input_term_id;

  }else{

    $self->{CORE}->kvetch('Looks like a subset acc...');

    ## Convert input subset acc to term accs.
    my $sget = AmiGO::Worker::Subset->new();
    my @subset_term_list = keys(%{$sget->get_term_accs($input_term_id)});
    foreach my $k (@subset_term_list){
      push @$input_term_id_list, $k;
      push @$acc_list_for_gpc_info, $k;
    }
  }

  ###
  ### Get neighborhood below term.
  ###

  ## Note: won't be included in subset case (too messy), so don't
  ## push.
  if( $is_term_acc_p ){
    my $sorted_child_chunks = $term_q->get_child_info($input_term_id_list);
    #$self->{CORE}->kvetch('scc: ' . Dumper($sorted_child_chunks));
    foreach my $cinfo (@$sorted_child_chunks){ 
      push @$acc_list_for_gpc_info, $cinfo->{acc};
    }
    $self->set_template_parameter('CHILD_CHUNKS', $sorted_child_chunks);
  }

  ###
  ### Get term ancestor information.
  ###

  #$self->{CORE}->kvetch("input_term_id_list" . Dumper($input_term_id_list));

  ##
  my $anc_info = undef;
  if( $is_term_acc_p ){
    $anc_info = $term_q->get_ancestor_info($input_term_id_list);
  }else{
    ## We want to include self in ancestors in this case.
    $anc_info = $term_q->get_ancestor_info($input_term_id_list, {reflexive=>1});
  }
  $self->set_template_parameter('MAX_DEPTH', $anc_info->{max_depth});
  $self->set_template_parameter('MAX_DISPLACEMENT',
				$anc_info->{max_displacement});
  $self->set_template_parameter('PARENT_CHUNKS_BY_DEPTH',
				$anc_info->{parent_chunks_by_depth});
  push @$acc_list_for_gpc_info, @{$anc_info->{seen_acc_list}};

  ## Now that we have all accs that we want counts for, create a
  ## mapping between terms and a random address.
  my $rand_to_acc = {};
  my $acc_to_rand = {};
  for( my $i = 0; $i < scalar(@$acc_list_for_gpc_info); $i++ ){
    my $acc = $acc_list_for_gpc_info->[$i];
    my $rand = $self->{CORE}->unique_id();
    $rand_to_acc->{$rand} = $acc;
    $acc_to_rand->{$acc} = $rand;
  }

  $self->set_template_parameter('ACC_TO_RAND', $acc_to_rand);
  $self->set_template_parameter('RAND_TO_ACC', $rand_to_acc);

  ###
  ### Pull gene_product_count info.
  ###

  #print STDERR "<<TIME_START>>\n";
  ## TODO/BUG: If nothing explodes, memoize this sucker a la Visualize:
  my $gpc_q = AmiGO::Worker::GeneProductCount->new($input_term_id,
                                                   $acc_list_for_gpc_info);
  #print STDERR "<<TIME_MID>>\n";
  my $gpc_info = $gpc_q->get_info();

  ## Get total counts for all terms (to use in fallback cases where JS
  ## is not enabled).
  my $gpc_total_count = {};
  foreach my $acc (@$acc_list_for_gpc_info){
    $gpc_total_count->{$acc} = $gpc_q->get_count($acc);
  }
  $self->set_template_parameter('GPA_COUNTS', $gpc_total_count);
  $self->set_template_parameter('GENE_PRODUCT_ASSOCIATIONS_COUNT',
				$gpc_total_count->{$input_term_id});

  ## Bridge variables from old system.
  #$self->set_template_parameter('cgi', 'term-details');
  $self->set_template_parameter('cgi', 'browse');
  $self->set_template_parameter('vbridge', 'term=' . $input_term_id);

  ## These things are of limited use to subsets.
  if( $is_term_acc_p ){

    ###
    ### External links.
    ###

    $self->set_template_parameter('GENE_PRODUCT_ASSOCIATIONS_LINK',
				  $self->{CORE}->get_interlink({mode => 'term-assoc',
								arg =>
								{acc =>
								 $input_term_id}}));
    $self->set_template_parameter('VIZ_STATIC_LINK',
				  $self->{CORE}->get_interlink({mode => 'visualize',
								arg =>
								{data => $input_term_id,
								 format => 'png'}}));
    $self->set_template_parameter('VIZ_DYNAMIC_LINK',
				  $self->{CORE}->get_interlink({mode => 'visualize',
								arg =>
								{data => $input_term_id,
								 format => 'svg'}}));
    $self->set_template_parameter('NAVIGATION_LINK',
				  $self->{CORE}->get_interlink({mode => 'layers_graph',
								arg =>
								{terms =>
								 $input_term_id}}));
    
    $self->set_template_parameter('VIZ_QUICKGO_LINK',
				  $self->{CORE}->get_interlink({mode=>'visualize_simple',
								arg =>
								{engine=>'quickgo',
								 term =>
								 $input_term_id}}));

    my $qg_term = AmiGO::External::QuickGO::Term->new();
    $self->set_template_parameter('QUICKGO_TERM_LINK',
				  $qg_term->get_term_link($input_term_id));

    $self->set_template_parameter('QUICKGO_ENGINE_P',
				  $self->{CORE}->amigo_env('AMIGO_GO_ONLY_GRAPHICS'));

    ###
    ### GONUTs
    ###

    ## TODO: I'd like to be able to set this up for some trivial GONUTS
    ## kappa tests.
    ## GONuts query.
    ## Cutoff a year ago (in seconds).
    ## TODO: we should compact this into a worker now that we have a chance.
    my $gonuts = AmiGO::External::XML::GONUTS->new({cutoff_time => 31536000});
    my $answer_p = $gonuts->query_term($input_term_id);
    $self->set_template_parameter('GONUTS_SUCCESS', 0);
    if( $answer_p ){
      $self->set_template_parameter('GONUTS_SUCCESS', 1);
      $self->set_template_parameter('GONUTS_TOTAL_COUNT',
				    $gonuts->get_total_count());
      $self->set_template_parameter('GONUTS_RECENT_COUNT',
				    $gonuts->get_recent_count());
      $self->set_template_parameter('GONUTS_PAGE_TITLE',
				    $gonuts->get_page_title());
      $self->set_template_parameter('GONUTS_PAGE_URL',
				    $gonuts->get_page_url());
      $self->set_template_parameter('GONUTS_DATE_STRING',
				    $gonuts->get_date_string());

      # ## DEBUG
      # $gonuts->kvetch('GONUTS: got an answer:');
      # $gonuts->kvetch("\t" . $gonuts->get_total_count());
      # $gonuts->kvetch("\t" . $gonuts->get_recent_count());
      # $gonuts->kvetch("\t" . $gonuts->get_page_title());
      # $gonuts->kvetch("\t" . $gonuts->get_page_url());
    }

  }else{

    ## It'll be good to differentiate subset stuff from the οἱ πολλοί.
    my %in_term_hash = map { $_ => 1 } @$input_term_id_list;
    $self->set_template_parameter('SUBSET_TERMS', \%in_term_hash);

    $self->set_template_parameter('VIZ_STATIC_LINK',
      $self->{CORE}->get_interlink({mode => 'visualize_subset',
				    arg => {subset => $input_term_id}}));
  }

  ###
  ### Standard setup.
  ### TODO: We see this a lot--should this be abstracted out too? No?
  ###

  ## Non-standard settings.
  $self->set_template_parameter('STANDARD_YUI', 'no'); # no YUI please
  # $self->set_template_parameter('STANDARD_YUI', 1);

  ## Our AmiGO services CSS.
  my $prep =
    {
     css_library =>
     [
      # 'standard', # basic GO-styles
      # 'org.bbop.amigo.ui.autocomplete'
      'standard', # basic GO-styles
      'com.jquery.jqamigo.custom',
      #'com.jquery.tablesorter',
      'org.bbop.amigo.ui.widgets'
     ],
     javascript_library =>
     [
      'com.jquery',
      'com.jquery-ui',
      'com.jquery.tablesorter',
      'org.bbop.amigo',
      'org.bbop.amigo.go_meta',
      'org.bbop.amigo.ui.widgets'
     ],
     javascript =>
     [
      # $self->{JS}->make_var('global_addresses', $node_addresses),
      # $self->{JS}->make_var('global_home_address', $home_address),
      $self->{JS}->make_var('global_count_data', $gpc_info),
      $self->{JS}->make_var('global_rand_to_acc', $rand_to_acc),
      $self->{JS}->make_var('global_acc_to_rand', $acc_to_rand),
      $self->{JS}->make_var('global_acc', $input_term_id)
     ]
    };
  $self->add_template_bulk($prep);

  ## Initialize javascript app.
  $self->add_template_javascript($self->{JS}->get_lib('TermDetails.js'));
  $self->add_template_javascript($self->{JS}->initializer_jquery('TermDetailsInit();'));

  ##
  ## These things are of limited use to subsets.
  if( $is_term_acc_p ){
    if( $type eq 'compact' ){
      $self->add_template_content('html/main/term_details_compact.tmpl');
    }else{
      $self->add_template_content('html/main/term_details.tmpl');
    }
  }else{
    $self->add_template_content('html/main/subset_details.tmpl');
  }

  return $self->generate_template_page();
}


###
### Callables:
###


package main;

use AmiGO;
my $td = AmiGO::WebApp::TermDetails->new(PARAMS => {});
$td->run();
