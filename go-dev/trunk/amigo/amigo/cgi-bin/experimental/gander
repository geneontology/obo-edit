#!/usr/local/bin/perl -w

####
#### Usage:
####    reset; /bin/cp -f config.pl.debug config.pl; DBIC_TRACE=1 gander
#### Then go to localhost:8080
####
#### BUG/TODO: If the current closed session seems to keep
#### disappearing, reset everything by using cont-test on same host
#### and port; it seems to somehow clear out the sessions...
####
#### TODO: figure out how to get it to listen to another host
#### TODO: need to add filtering to GUI
####

## Try to get the local environment sane.
BEGIN { require "config.pl" }
use lib "$ENV{GO_ROOT}/go-perl";
use lib "$ENV{GO_ROOT}/go-db-perl";
use lib "$ENV{GO_ROOT}/amigo/perl";

## Bring in necessaries.
use utf8;
use strict;
use Continuity;
use Continuity::Adapt::HttpDaemon;
use URI::Escape;
use AmiGO;
use GOBO::DBIC::GODBModel::Graph;
use AmiGO::GraphViz;
use AmiGO::JavaScript;
use AmiGO::SVGRewrite;
use Time::HiRes qw(gettimeofday tv_interval);

## Server settings.
my $OUR_HOST = 'localhost';
#my $OUR_HOST = '131.243.195.53';
#my $OUR_HOST = 'moiraine.dhcp.lbl.gov';
my $OUR_PORT = '8080';
my $HOST_STRING = 'http://' . $OUR_HOST . ':' . $OUR_PORT;

## Our "globals"...
my $core = AmiGO->new();
my $go_graph = GOBO::DBIC::GODBModel::Graph->new();
my $js = AmiGO::JavaScript->new(1);
my $svg_rewriter = AmiGO::SVGRewrite->new();


## Continuity...
$core->kvetch("Should only be seen once...");
#my $adapter = Continuity::Adapt::HttpDaemon->new();
#my $adapter =
#  Continuity::Adapt::HttpDaemon->new(LocalAddr => $OUR_HOST,
#				     LocalPort => $OUR_PORT);
#my $c = Continuity->new(adapter => $adapter);
## BUG: not ours--look in the source...just not there...
my $c = Continuity->new( addr => $OUR_HOST,
			 port => $OUR_PORT,
			 no_content_type => 1 );
$c->loop;

## Session closure.
sub main {

  ## We are given a handle to get new requests
  my $request = shift;

  ## Our "locals"...
  $core->kvetch("Setting roots...");
  my $node_hash = $go_graph->get_roots();
  my $species_hash = {};

  ## Enter a loop. Forever. If not, reset using the test script.
  while(1) {

    my $action = $request->param('action') || '';
    $core->kvetch("Have action: " . $action);

    ## How should we change the graph?
    if( $action eq 'reset' ){

      ## Reset the graph to its original state.
      $core->kvetch("Reset...");
      ## Add roots.
      $node_hash = $go_graph->get_roots();

    }elsif( $action eq 'seed' ){

      ## Reset the graph to its original state.
      $core->kvetch("Reset...");
      ## Add roots.
      $node_hash = $go_graph->get_roots();

      ## Allow seeding.
      $core->kvetch("Add a set of seeds...");
      my @accs = $request->param('acc');
      foreach my $acc (@accs){
	my $term = $go_graph->get_term($acc);
	if( $term ){
	  $core->kvetch("\tAdding: " . $term->acc);
	  $node_hash->{$term->acc} = $term;
	}
      }

    }elsif( $action eq 'add' ){

      ## Add a single node to the graph.
      my $acc = $request->param('acc') || undef;
      $core->kvetch("Add single child node of " . $acc . '...');
      my $kid = $go_graph->get_term($acc);
      $core->kvetch("\tAdding: " . $kid->acc);
      $node_hash->{$kid->acc} = $kid;

    }elsif( $action eq 'open' ){

      ## Open all of the children of a node.
      my $acc = $request->param('acc') || undef;
      $core->kvetch("Add all child nodes of " . $acc . '...');
      foreach my $kid ( @{$go_graph->get_children($acc)} ){
	$core->kvetch("\tAdding: " . $kid->acc);
	$node_hash->{$kid->acc} = $kid;
      }

    }elsif( $action eq 'close' ){

      ## Remove all of the descendents of a node from the graph.
      ## TODO: this is done inefficiently...
      my $acc = $request->param('acc') || undef;
      $core->kvetch("Close all of the descendents of " . $acc . '...');

      ## Run the graph climb so that we have access to the
      ## descendents of the node in question.
      my $seed_terms = [];
      foreach my $key (keys %$node_hash){
	push @$seed_terms, $node_hash->{$key};
      }
      my($nodes, $edges, $desc_hash) = $go_graph->climb($seed_terms);

      ## Make a new node hash, but skip closing node's descendents
      ## (which will include the closing node itself). This will
      ## necessarily be a subset of the nodes hash from the climb, so
      ## we'll use it as a node cache.
      my $new_node_hash = $go_graph->get_roots();
      foreach my $node_acc (keys %{$nodes}){
	if( ! defined $desc_hash->{$acc}{$node_acc} ){
	  $core->kvetch("\tRe-adding: " . $node_acc);
	  $new_node_hash->{$node_acc} = $nodes->{$node_acc};
	}else{
	  $core->kvetch("\tIgnoring: " . $node_acc);
	}
      }
      $node_hash = $new_node_hash;

    }elsif( $action eq 'add_filter' ){

      ## Add filter(S) to the count.
      $core->kvetch('Filter out species...');
      my @species = $request->param('acc');
      foreach my $s (@species){
	$core->kvetch("\tFiltering (adding): " . $s);
	$species_hash->{$s} = 1;
      }

    }elsif( $action eq 'remove_filter' ){

      ## Remove filters from the count.
      $core->kvetch('Remove species filter...');
      my @species = $request->param('acc');
      foreach my $s (@species){
	$core->kvetch("\tFiltering (removing): " . $s);
	delete $species_hash->{$s} if defined $species_hash->{$s};
      }

    }else{
      $core->kvetch("Passed without parameters.");
    }


    ## Render the current graph defined by the node hash and wait for
    ## the next action.
    my $output = $request->param('output') || 'svg';
    $core->kvetch("Display current graph and wait...type: " . $output);
    if( $output eq 'svg' ){
      $request->print("Cache-Control: no-cache\n");
      $request->print("Content-Type: image/svg+xml\n\n");
      $request->print(graph_prompt($node_hash, $species_hash, 'svg'));
    }elsif( $output eq 'png' ){
      $request->print("Cache-Control: no-cache\n");
      $request->print("Content-Type: image/png\n\n");
      $request->print(graph_prompt($node_hash, $species_hash, 'png'));
    }else{
      ## TODO: Examine the graph for leaf nodes and convert them into
      ## a seed URL. This is too verbose and sooo dirty.
      $request->print("Cache-Control: no-cache\n");
      $request->print("Content-Type: text/html\n\n");

      ## BUG: A bunch of hard-coding from here...

      ## Make seed string...
      my @seeds = keys %{$node_hash};
      my @e_seeds = map{ 'acc=' . $_ } @seeds;
      my $seed_string = join '&', @e_seeds;
      $seed_string = $HOST_STRING . '?action=seed&' . $seed_string;

      ## Make session string...
      my @terms = keys %{$node_hash};
      my @adders = map{ 'add=' . $_ } @terms;
      my $session_string = join '&', @adders;
      $session_string = 'http://localhost/cgi-bin/amigo/amigo?mode=workspace&workspace=gander&' . $session_string;

      $request->print('<html><head></head><body>');
      $request->print('<p>Bookmark:');
      $request->print('<br />');
      $request->print('<a title="bookmark" href="' .
		      $seed_string . '">' . $seed_string . '</a>');
      $request->print('</p><p>');
      $request->print('<p>Session:');
      $request->print('<br />');
      $request->print('<a title="session" href="' .
		      $session_string . '">transfer to session</a>');
      $request->print('</p>');
      $request->print('</body></html>');
    }

    ## Wait for the user reaction.
    $request->next;
    $core->kvetch("Incoming--loop to top.");
  }
  $core->kvetch("Escaping control...");
}


## Just render the graph with the given parameters and output type.
sub graph_prompt {

  #my $request = shift;
  my $node_hash = shift;
  my $species_hash = shift;
  my $output_type = shift || 'svg';

  ## Decided whether we want an unbounded bitmap.
  my $gv = undef;
  if( $output_type eq 'svg' ){
    $gv = AmiGO::GraphViz->new();
  }else{
    $gv = AmiGO::GraphViz->new({bitmap=>1});
  }

  ## Get the seeds and then run the climber.
  my $seed_terms = [];
  foreach my $key (keys %$node_hash){
    $core->kvetch("_r_ $key " .  $node_hash->{$key});
    push @$seed_terms, $node_hash->{$key};
  }
  my($nodes, $edges, $garbage) = $go_graph->climb($seed_terms);

  ###
  ### Make SVG text with climber results.
  ###

  ## Go through all of the edges; add them and cache graph info to
  ## test for "open_p" later.
  my %is_a_child_of = ();
  foreach my $key (keys %$edges){

    ## Add edge.
    my $t2t = $edges->{$key};
    my $s = $t2t->subject->acc;
    my $o = $t2t->object->acc;
    my $r = $t2t->relationship->name;
    $gv->add_edge($s, $r, $o);
    #$gv->add_edge($t2t->subject->acc, 'is_a', $t2t->object->acc);
    $core->kvetch("_r_ Render edge ($key): " . $s . " $r " . $o);

    ## Cache.
    $is_a_child_of{$o} = {}
      if ! defined $is_a_child_of{$o};
    $is_a_child_of{$o}{$s} = 1;
  }

  ## Add all of the terms.
  ## Also, add a catcher for term information for adding to the SVG later.
  my $term_info = {};
  foreach my $key (keys %$nodes){

    my $t = $nodes->{$key};
    $core->kvetch("_r_ Render node: " . $t->acc);

    $gv->add_node($t->acc, $t->name);

    ## Fetch up kids' info.
    my $children = {};
    foreach my $kid ( @{$go_graph->get_children($t->acc)} ){

      ## Check to see if the child is open from the previous cache.
      my $is_open = 0;
      if( defined $is_a_child_of{$t->acc} &&
	  defined $is_a_child_of{$t->acc}{$kid->acc} &&
	  $is_a_child_of{$t->acc}{$kid->acc} == 1 ){
	$is_open = 1;
      }

      ## Add child information.
      $children->{$kid->acc} = {
				open_p => $is_open,
				name => $kid->name,
			       };
    }

    ## Accumulate the count. NOTE: this may be a time consuming
    ## process, so we might want to make this optional...
    my $count = 0;
    ## If no species are in the filter, do all of them, otherwise,
    ## just the species in the filter.
    ## TODO: add some Query.pm magic to make this go faster; this
    ## looks ugly too.
    if( scalar(keys %$species_hash) == 0 ){
      foreach my $gpc ( $t->gene_product_count->all ){
	$count += $gpc->product_count;
      }
    }else{
      foreach my $gpc ( $t->gene_product_count->all ){
	if( defined $gpc->speciesdbname &&
	    defined $species_hash->{$gpc->speciesdbname} ){
	  $count += $gpc->product_count;
	}
      }
    }

    $term_info->{$t->acc} = {
			     name => $t->name,
			     count => $count,
			     children => $children,
			    };
  }

  ###
  ### Return the format.
  ###

  ##Make a nice SVG app...
  my $retfile = '';
  if( $output_type eq 'svg' ){

    my $svg_rewriter = AmiGO::SVGRewrite->new();

    $svg_rewriter->add_js_variable('amigo_terms', $term_info);

    $svg_rewriter->add_js_library('Browser');
    $svg_rewriter->add_js_library('org.bbop.NodeClick');
    $svg_rewriter->add_js_initializer("org.bbop.NodeClick(BrowserInit('control_context', '$HOST_STRING'));");

    $svg_rewriter->add_js_library('org.bbop.NodeDetails');
    $svg_rewriter->add_js_initializer("org.bbop.NodeDetails('detail_context');");

    $svg_rewriter->add_js_library('org.bbop.Viewer');
    $svg_rewriter->add_js_initializer("org.bbop.Viewer('rgsvg','tform_matrix');");

    ## TODO: make this good enough to add...
    #$svg_rewriter->add_js_library('org.bbop.Crosshair');
    #$svg_rewriter->add_js_initializer("org.bbop.Crosshair('super_context', 400, 400);");

    my $svg_file = $gv->get_svg(0);
    $retfile = $svg_rewriter->rewrite($svg_file);

  }else{
    $retfile = $gv->get_png(0);
  }

  return $retfile;
}



1;
