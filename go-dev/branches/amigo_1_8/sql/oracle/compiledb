#!/usr/local/bin/perl
# Thu Jul 25 2002 Frank Schacherer <bioinformatics@schacherer.de>: added Code for Oracle transformation
use strict;
use FileHandle;

my $outf;
my $target = "mysql";
while ($ARGV[0] =~ /^\-/) {
    my $arg = shift @ARGV;
    if ($arg =~ /^\-o$/) {
        $outf = shift @ARGV;
    }
    elsif ($arg =~ /^\-h/) {
        print usage();
        exit;
    }
    elsif ($arg =~ /^\-t/) {
        $target = shift @ARGV;
    }
    else {
        die ("switch $arg not regognized");
    }
}

my $inf = shift @ARGV || die usage();
my $fho;
$fho = FileHandle->new(">$outf") if $outf;

readf($inf);
$fho->close if $fho;

exit 0;

sub readf {
    my $f = shift @_;
    my $dirname = `dirname $f`;
    chomp $dirname;
    print STDERR "READING $f\n";
    my $fh = FileHandle->new($f);
    $fh || die("can't read $f");

    my $in_table;    # current table name, if any
    my $open_pars;   # current depth in parentheses nesting
    my $serial;      # current serial column name

    while(<$fh>) {
        chomp;
        if (/\#include\s+(.*)/) {
            readf("$dirname/$1");
        }
        else {
            if ($target eq "mysql") {
                s/serial/integer AUTO_INCREMENT not null/g;
                s/ text/ mediumtext/g;
                # comments look nicer with # in mysql
                s/^\-\-\-/\#/;
            }
            if ($target eq "pg") {
                my $l;
                if (/enum *\((.*)\)/){split(/\,/,$1);map{/\'(.*)\'/;$l=length($1) if length($1) > $l}@_;s/enum *\(.*\)/char($l)/}
                # mysql style comments
                s/^\#/\-\-\-/;
            }
            if ($target eq "oracle") {
                # Notes for data type conversions
                # text   -> varchar2(2000) which is enough for all tables except 
                #           long           for table seq
                # serial -> Oracle doesn't support auto increment. 
                #           Uncomment below to create a sequence 
                #           and a trigger for each such field.
                #           Only one such field per table supported.
                # char   -> varchar2. More efficient for common field sizes.
                # PRIMARY KEY fields will be auto-indexed by Oracle.
                s/^---.*//;
                s/char/varchar2/;
                s/\btext\b/varchar2(2000)/;
                s/\bvarchar2\(2000\)/long/ if lc($in_table) eq 'seq';
                s/not null default\s+([\w\']+)/default $1 not null/; 
                if (/^create table\s+(\w+)/i) { #beginnig of table
                    $in_table = $1;
                    $open_pars = 0; 
                }
                if (/\bserial\b/i and /^\s+(\w+)/) {
                    $serial and die "Only one serial statement supported for Oracle.\n";
                    $serial = $1; 
                }
                s/serial/integer not null/g;
                $open_pars = $open_pars + length(join("", /\(/g)) - length(join("", /\)/g)) if $in_table;
                if ($in_table and $serial and $open_pars == 0 and /;/) { #end of table
                    # outf("$_\n");
                    # outf("CREATE SEQUENCE ${in_table}_${serial}_seq start with 1 increment by 1 nomaxvalue;\n"); 
                    # outf("CREATE TRIGGER  ${in_table}_${serial}_trg before insert on ${in_table} for each row\n");
                    # outf("   begin select ${in_table}_${serial}_seq.nextval into :new.${serial} from dual; end;\n");
                    # outf("/\n");
                    # $_ = "";
                    $serial = undef;
                    $in_table = undef;
                }
            }
            outf("$_\n") if length($_) > 0;
        }
    }
    $fh->close;
}

sub outf {
    my $ln = shift;
    if ($fho) {
        print $fho $ln;
    }
    else {
        print $ln;
    }
}

sub usage {
    return <<EOM

compiledb [-t dbms] [-o outfile] sqlsrc

EOM
}
