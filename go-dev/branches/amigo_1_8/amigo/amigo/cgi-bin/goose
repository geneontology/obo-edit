#!/usr/local/bin/perl
#!/usr/local/bin/perl -w

##
## Tags that I use: BUG, TODO, WARN, NOTE, ASK
##
## TODO:
##   *) work with dan to sync mirrors with common name
##   *) add historical to mirrors
##   *) add historical to interface
##   *) add option to to report available databases
##   *) PHP module to work with this (almost done)
##   *) each goose run should have a way of killing long running GOOSE spawn
##

## GOOSE is now in the fold.
BEGIN { require "config.pl"; }
#use lib $ENV{GO_DEV_ROOT} . '/go-perl';
#use lib $ENV{GO_DEV_ROOT} . '/go-db-perl';
use lib $ENV{GO_DEV_ROOT} . '/amigo/perl';

## Bring in necessaries.
use strict;
use utf8;
use DBI;
#use SQL::Tokenizer;
use Utility::Sanitize;
use Template;
use Template::Constants qw( :debug );
use LWP::UserAgent;
use WWW::Mechanize;
# Watchdog::Mysql
use AmiGO; # qw(:google_analytics_id);

## Set up CGI environment,
use CGI qw/:standard/;
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
$CGI::POST_MAX = 0;	## no uploads.
my $q = new CGI;

## Set up sanitizer.
my $sane = Utility::Sanitize->new({
				   UPPER_LIMIT => 5000,
				   FULL_QUERY => 1,
				  });

## Available mirror information.
my $databases = {};
$databases->{bbop} =
  {
   label => 'Berkeley BOP',
   desc => 'Berkeley',
   is_main_p => 1,
   login => 'go_select',
   password => 'amigoer',
   database_name => 'go_latest',
   server => 'spitz.lbl.gov',
   port => '3306',
  };
$databases->{ebi} =
  {
   label => 'EBI',
   desc => 'EBI',
   is_main_p => 1,
   login => 'go_select',
   password => 'amigo',
   database_name => 'go_latest',
   server => 'mysql.ebi.ac.uk',
   port => '4085',
  };
$databases->{fsbbop} =
  {
   label => 'Failsafe',
   desc => 'BBOP (June seqdb)',
   is_main_p => 0,
   login => 'go_select',
   password => 'amigoer',
   database_name => 'go_failsafe',
   server => 'spitz.lbl.gov',
   port => '3306',
  };
# $databases->{exp} =
#   {
#    label => 'Experimental',
#    desc => 'BBOP (alpha)',
#    is_main_p => 0,
#    login => 'go_select',
#    password => 'amigoer',
#    database_name => 'go_latest_sc',
#    server => 'spitz.lbl.gov',
#    port => '3306',
#   };
$databases->{bbop_lite} =
  {
   label => 'Berkeley BOP (lite)',
   desc => 'Berkeley (lite)',
   is_main_p => 0,
   login => 'go_select',
   password => 'amigoer',
   database_name => 'go_latest_lite',
   server => 'spitz.lbl.gov',
   port => '3306',
  };

## Get the meta info from all of the databases--including:
## release_name
## release_type
## is_dead_p
my @main_db_list = ();
my @nonmain_db_list = ();
foreach my $db (keys %$databases) {

  my $curr = $databases->{$db};

  ## Map number to DB and user/password.
  my $login = $curr->{login};
  my $password = $curr->{password};
  my $database_name = $curr->{database_name};
  my $server = $curr->{server};
  my $port = $curr->{port};

  ## Main yes/no?
  if ( $curr->{is_main_p} ) {
    push @main_db_list, $curr;
  }else {
    push @nonmain_db_list, $curr;
  }

  eval{
    my $db_h =
      DBI->connect("DBI:mysql:$database_name:$server:$port",
		   $login,
		   $password);
    #DBI->connect("DBI:mysql:$database_name:$server:$port",
    #		   $login,
    #		   $password) ||
    #		     server_die_template("Couldn't connect during meta:" . $db);

    ## Get meta info.
    my $statement =
      $db_h->prepare('SELECT release_name, release_type FROM instance_data');
    #$statement->execute()
    #  or server_die_template("Couldn't run meta query.");
    $statement->execute();
    my @meta_info = $statement->fetchrow_array();
    $curr->{release_name} = 'unknown release';
    $curr->{release_type} = 'unknown type';
    $curr->{release_name} = $meta_info[0] if $meta_info[0];
    $curr->{release_type} = $meta_info[1] if $meta_info[1];
    $curr->{is_dead_p} = 0;

    ## Close connection.
    $statement->finish();
    $db_h->disconnect();
  };
  ## Whoops, there was an error!
  if ($@) {
    $curr->{release_name} = 'unknown release';
    $curr->{release_type} = 'unknown type';
    $curr->{is_dead_p} = 1;
  }
}

## Map number to DB and user/password.
my $login = '';
my $password = '';
my $database_name = '';
my $server = '';
my $port = '';
my $is_dead_p = undef;


##########
##
## Sanity check all possible incoming parameters:
##
## 'mirror'
## 'sql_query'
## 'limit'
## 'format'
## 'wiki'
##
##########


## TODO/NOTE: We reverse the non-main list for the reason that in the
## case that both of the main dbs are down, it's nice to hit the
## failsafe for default action rather than the exp. Maybe we should
## have something more robust here...
my @all_db_list = ();
foreach my $cell (@main_db_list) { push @all_db_list, $cell; }
foreach my $cell (reverse(@nonmain_db_list)) { push @all_db_list, $cell; }

my $number_of_safe_mirrors = scalar(@main_db_list);
my $total_number_of_mirrors = scalar(@all_db_list);
#print STDERR "___" . scalar(@main_db_list) . "\n";
#print STDERR "___" . scalar(@nonmain_db_list) . "\n";
#sleep 2;

## Choose a mirror.
my $mirror = $q->param('mirror');
if( $mirror &&
    ( length($mirror) > 1 ||
      $mirror =~ /^[^1-9]$/ ) ){
  client_die_template("illegitimate mirror value: $!");
}elsif( ! defined($mirror) || $mirror eq '' ){
  ## Randomly choose safe (i.e. "main") database.
  $mirror = int(rand($number_of_safe_mirrors));
}else{
  $mirror = int($mirror); # make sure we have the right type
}

#print STDERR "___" . $mirror . "\n";
#sleep 2;

## Get information for the mirror.
if( $mirror < $total_number_of_mirrors ){

  my $my_mirror = $all_db_list[$mirror];
  $login = $my_mirror->{login};
  $password = $my_mirror->{password};
  $database_name = $my_mirror->{database_name};
  $server = $my_mirror->{server};
  $port = $my_mirror->{port};
  $is_dead_p = $my_mirror->{is_dead_p};

}else{
  client_die_template("unknown mirror value: $!");
}

## If the mirror is dead, walk through and pick one that's not.
if ( $is_dead_p ) {
  my $mirror_walk = 0;
  foreach my $my_mirror (@all_db_list) {

    $login = $my_mirror->{login};
    $password = $my_mirror->{password};
    $database_name = $my_mirror->{database_name};
    $server = $my_mirror->{server};
    $port = $my_mirror->{port};
    $is_dead_p = $my_mirror->{is_dead_p};

    last if ! $is_dead_p;
    $mirror_walk++;
  }

  $mirror = $mirror_walk;
}

## If we couldn't find one, die.
if ( $is_dead_p ) {
  server_die_template("All mirrors are down, please contact admins: $!");
}


#print STDERR "___" . $mirror . "\n";
#print STDERR "___" . $server . "\n";
#sleep 2;

## Location of examples.
my $wiki_sql_file = 'example_queries.txt';
my $wiki_sql_url = 'http://wiki.geneontology.org/index.php/Example_Queries';
my $wikimatch = '<span class=\"mw-headline\">\s*([^\n]*?)<\/span><\/h[3-4]>.*?<pre>\s*(.*?)<\/pre>';

my $go_template_paths = 'templates/pages:templates/includes';

## Start output queue.
my $results_string = '';

## Arg size limit
my $upper_arg_size_limit = 5000;
my $sql_query = $q->param('sql_query');
#if( $sql_query &&
#    length($sql_query) > $upper_arg_size_limit ){
#  client_die_template("illegitimate sql_query value");
#}


## Will there be a limit on the result size?
my $limit_string = $q->param('limit');
if( defined($limit_string) && length($limit_string) > $upper_arg_size_limit ){
  client_die_template("illegitimate limit value: $!");
}elsif( $limit_string &&
	$limit_string ne '0' &&
	$limit_string ne '10' &&
	$limit_string ne '100' &&
	$limit_string ne '1000' &&
	$limit_string ne '10000' ){
  client_die_template("unrecognized limit value: $!");
}elsif( ! defined($limit_string) ) {
  ## Force definition if undefined.
  $limit_string = '1000';
}
## Let's keep it reeeeaaal safe.
my $limit = 0; # default val for incoming
if ( $limit_string eq '0' ) {
  $limit = 0;
}elsif ( $limit_string eq '10' ) {
  $limit = 10;
}elsif ( $limit_string eq '100' ) {
  $limit = 100;
}elsif ( $limit_string eq '1000' ) {
  $limit = 1000;
}elsif ( $limit_string eq '10000' ) {
  $limit = 10000;
}

## Which format do we want? Force format to a defined and known value.
my $format = $q->param('format');
if( $format && length($format) > $upper_arg_size_limit ){
  client_die_template("illegitimate format value: $!");
}elsif( $format && $format eq 'tab' ){
  ## OK, let it go.
}else{
  $format = 'html';
}

## Force a scrape from the wiki instead of using the download page.
my $scrape = $q->param('wiki');
if( $scrape &&
    length($scrape) < $upper_arg_size_limit &&
    ($scrape eq '1' ||
     $scrape eq 'true' ||
     $scrape eq 't') ){
  $scrape = 1;
}else{
  ## Default to scraping.
  #$scrape = 0;
  $scrape = 1;
}


my $core = AmiGO->new();
my $google_id = $core->amigo_env('AMIGO_GOOGLE_ANALYTICS_ID') || '';


##########
##
## Set defaults for values that will be used during template
## processing.
##
##########

## Main/default template.
my $template = 'goose_main.tmpl';

## Main template variable.
my $vars = {};
$vars->{ALL_MIRRORS} = \@all_db_list;
#$vars->{CURRENT_MIRROR_INDEX} = $mirror || 0;
$vars->{CURRENT_MIRROR_INDEX} = $mirror;
$vars->{SQL_QUERY} = $sql_query;
#$vars->{MIRROR_SELECTION} = $mirror || "2";
$vars->{DATABASE_SELECTION} = "1";
$vars->{LIMIT} = $limit || "-1";
$vars->{TOTAL} = "-1";
$vars->{DISPLAY_MAIN_RESULTS} = 0;
$vars->{MAIN_RESULTS} = '';
$vars->{NUMBER_OF_RESULTS} = 0;
$vars->{RESULTS_HEADER_ARRAY} = [];
$vars->{RESULTS_ARRAY_ARRAY} = [];

## TODO/BUG: make this dynamic when it goes into AmiGO main.
$vars->{path} = '/goose';
#$vars->{html_url} = 'http://go.berkeleybop.org/goose';
$vars->{html_url} =
  $core->amigo_env('AMIGO_HTML_URL') || 'http://go.berkeleybop.org/goose';
$vars->{HTML_URL} = $vars->{html_url};
$vars->{GOOGLE_ANALYTICS_ID} = $google_id;


## 
if( $sql_query ){

  #die_template("No database has been selected.")
  #  if ! $database;
  #die_template("No mirror has been selected.")
  #  if ! $mirror;
  server_die_template("The selected mirror is dead.")
    if $is_dead_p;

  ## Do the actual all important checking.
  $sql_query = $sane->rationalize($sql_query);
  #$sql_query = $sane->check($sql_query);
  $sane->check($sql_query);
  $sql_query = $sane->limit_fix($sql_query, $limit) if $limit;

  #print STDERR "___" . $sane->success() . "\n";
  #sleep 2;

  ## If something went wrong...
  if( ! $sane->success() ){

    my $errors = $sane->error_messages;
    if( scalar($errors) ){
      my $error = pop @$errors;
      client_die_template($error);
    }else{
      client_die_template("There was an unknown error...")
    }
  }

  ## We're good? Great! Connect to DB.
  my $db_handle =
    DBI->connect("DBI:mysql:$database_name:$server:$port",
		 $login,
		 $password) ||
		   server_die_template("Couldn't connect to that database on that host.");

  #print STDERR "___" . $sql_query . "\n";
  #sleep 2;

  ## Scrape out results.
  my $statement = undef;
  eval {
    $statement = $db_handle->prepare($sql_query);
    ## TODO/BUG: ? Why are these error catchers nested? I just wrote
    ## it now and am having trouble remembering...
    $statement->execute()
      or server_die_template("Couldn't run query.");
  };
  if( @_ ){
    server_die_template("There seems to be something wrong in your syntax...");
  }

  ## Switch on whether or not I got results.
  $vars->{DISPLAY_MAIN_RESULTS} = 1;
  $vars->{NUMBER_OF_RESULTS} = $statement->rows();
  $vars->{RESULTS_HEADER_ARRAY} = $statement->{NAME};
  while( my @row = $statement->fetchrow_array ){

    ## TODO: This needs to be speeded up.
    foreach my $item (@row){
      ## Not all columns are defined.
      if( $item ){
	$item =~ s/\&/\&amp\;/g;
	$item =~ s/\</\&lt\;/g;
	$item =~ s/\>/\&gt\;/g;

	## Convert GO IDs to links.
	## TODO: This probably needs to be speeded up too.
	if( $format eq 'html' ){
	  $item =~ s/(GO:\d{7})/\<a href="http:\/\/amigo.geneontology.org\/cgi-bin\/amigo\/term_details\?term=$1" title="Go to $1 in AmiGO" \>$1\<\/a\>/g;
	}
      }
    }
    push @{ $vars->{RESULTS_ARRAY_ARRAY} }, \@row;
  }

  ## Collect total results if we used a limit.
  if ( $limit ) {

      $statement = $db_handle->prepare("SELECT FOUND_ROWS()");
      $statement->execute()
	or server_die_template("Couldn't run count.");
      my @meta_info = $statement->fetchrow_array();
      $vars->{TOTAL} = $meta_info[0] if $meta_info[0];

  }

  ## Close connection.
  $statement->finish();
  $db_handle->disconnect();
}

##########
##
## Publish results using template for HTML and by hand for tab
## delimited.
##
##########

if( $format eq 'html' ){

  ##
  ## First we need to gather examples to populate the pulldown menu.
  ##

  ## If there is no local file or we are forcing a scrape do it
  ## ourselves. Otherwise, get it from the local file.
  my %examples = ();
  my $whole_string = '';
  my $file_exists_p = 0;
  my $text_location = '';
  $file_exists_p = 1
    if -e $wiki_sql_file &&
      -f $wiki_sql_file &&
	-r $wiki_sql_file &&
	  -T $wiki_sql_file;

  ## If there is not a force and the file exists.
  if( ! $scrape ){

    if( $file_exists_p ) {

      ## Open file and change it to one big string.
      open FILE, "< $wiki_sql_file"
	or server_die_template("couldn\'t open local sql file");
      my @string_buffer = ();
      while( <FILE> ){
	push @string_buffer, $_; }
      $whole_string = join '', @string_buffer;
      $text_location = ' from GOOSE';

    }else{
      ## Fall back to the web.
      $scrape = 1;
    }
  }

  ## Try and get the web page.
  if( $scrape ){

    ## Connect to wiki page.
    my $mech = WWW::Mechanize->new();
    $mech->get($wiki_sql_url);
    if( $mech->res->is_success ){

      $whole_string = $mech->content;
      $text_location = ' from wiki';

    }elsif( $file_exists_p ){
      ## Fall back to file

      ## Open file and change it to one big string.
      open FILE, "< $wiki_sql_file"
	or server_die_template("couldn\'t open local sql file");
      my @string_buffer = ();
      while( <FILE> ){
	push @string_buffer, $_; }
      $whole_string = join '', @string_buffer;
      $text_location = ' from GOOSE';

    }else{

      ## Failure.
      server_die_template('failed to access wiki page at: "' .
			  $wiki_sql_url .
			  '" and local file: "' .
			  $wiki_sql_file .
			  '". This is a serious GOOSE failure (a).');
    }
  }

  ##
  #if( ! $){
  #  die_template('failed to access wiki page at: "' .
  #		 $wiki_sql_url .
  #		 '" and local file: "' .
  #		 $wiki_sql_file .
  #		 '". This is a serious GOOSE failure (b).');
  #  }

  ## Let's scrape whatever we got to get the queries.
  %examples = $whole_string =~ /$wikimatch/gs;

  ##
  ## Create a JS array as a string with the scraped data above.
  ##
  my @minibuffer = ();
  foreach my $title (sort keys %examples){

    my @microbuffer = ();
    push @microbuffer, '{';
    push @microbuffer, 'title: "';
    push @microbuffer, $title;
    push @microbuffer, '", value: "';

    ## Transform any problem causing characters.
    my $munched = $examples{$title};
    #$munched =~ s/ +/ /g;
    $munched =~ s/\t/\\t/g;
    $munched =~ s/\n/\\n/g;
    $munched =~ tr/"/\"/;

    push @microbuffer, $munched;
    push @microbuffer, '"}';

    push @minibuffer, join '', @microbuffer;
  }
  my $tmpstr = join ',', @minibuffer;
  @minibuffer = ();
  push @minibuffer, 'var global_goose_pulldown_table = [';
  push @minibuffer, '{ title: "(Select example query';
  push @minibuffer, $text_location if $text_location;
  push @minibuffer, ')", value: "" }';
  push @minibuffer, ',' if $tmpstr;
  push @minibuffer, $tmpstr if $tmpstr;
  push @minibuffer, '];';

  ## Put it into a template variable.
  $vars->{WIKI_JS_DATA} = join '', @minibuffer;

  ##
  ## Ready the template.
  ##

  ## BUG/FIX: I had to write this because TT gives me an 'out of
  ## memory' if I try to let it do big results. I hate TT.
  $vars->{MAIN_RESULTS} = results_string();

  ## Template runtime parameters.
  my $tt = Template->new({
			  INCLUDE_PATH => $go_template_paths,
			  EVAL_PERL => 1,
			  #PRE_CHOMP => 1,
			  #POST_CHOMP => 1,
			  TRIM => 1,
			  RECURSION => 1
			 });

  html_header();
  $tt->process($template, $vars) ||
    server_die_template("failed to process $template" . $tt->error);

}elsif( $format eq 'tab' ){

  ## Hand emit.
  unknown_header();
  foreach my $row (@{ $vars->{RESULTS_ARRAY_ARRAY} }){
    print join "\t", @$row;
    print "\n";
  }

}else{
  client_die_template("How did you get here? Bad format?");
}


#####
##
## Subs.
##
####


##
sub status_error_client{ print "Status: 400 Bad Request\n"; }
sub status_error_server{ print "Status: 500 Internal Server Error\n"; }
sub html_header{ print "content-type:text/html\n\n"; }
sub text_header{ print "content-type:text/plain\n\n"; }
sub unknown_header{ print "content-type:unknown\n\n"; }


##
sub client_die_template {
  my $message = shift || 'generic error';
  status_error_client();
  die_template($message);
}


##
sub server_die_template {
  my $message = shift || 'generic error';
  status_error_server();
  die_template($message);
}


##
sub die_template {

  my $message = shift || 'generic error';

  ## Template runtime parameters.
  ## TODO/BUG: make 'path' dynamic when it goes into AmiGO main.
  my $diet = Template->new({
			    INCLUDE_PATH => $go_template_paths,
			    EVAL_PERL => 1,
			    TRIM => 1,
			   });
  html_header();
  $diet->process('amigo_common_error.tmpl',
		 {
		  ERROR_MESSAGE => $message,
		  path => $vars->{path},
		  html_url => $vars->{html_url},
		  HTML_URL => $vars->{html_url},
		  GOOGLE_ANALYTICS_ID => $vars->{GOOGLE_ANALYTICS_ID},
		 }) ||
		   die "$message: $!"; # ASK: Is croak or confess better?
  exit(-1); ## BUG: Why do I need both.
}


## I had to write this because TT gives me an 'out of memory' if I try
## to let it do these things. I hate TT.
sub results_string {

  my @buffer = ();

  ## Start replacement.
  push @buffer, '<div class="block">';
  push @buffer, '<h2>Results</h2>';

  ## Should be point to a direct download?
  if( $vars->{NUMBER_OF_RESULTS} < 1 ){

    push @buffer, '<p>Your query did not return any results.</p>';

  }else{

    push @buffer, '<p>';
    push @buffer, 'Your query generated <b>';
    push @buffer, $vars->{NUMBER_OF_RESULTS};
    push @buffer, '</b>';
    if ( defined($limit) && $vars->{NUMBER_OF_RESULTS} < $vars->{TOTAL} ) {
      push @buffer, ' (limited from <b>';
      push @buffer, $vars->{TOTAL};
      push @buffer, '</b>)';
    }
    push @buffer, ' result(s):<br />';
    my $sqlq = $vars->{SQL_QUERY};
    my $cm = $vars->{CURRENT_MIRROR_INDEX};
    my $lim = $vars->{LIMIT};
    push @buffer, sprintf<<EOT;
<form style="display: inline;"
      action="goose"
      method="GET"
      name="goose_form"
      id="goose_form">
<input type="hidden" name="mirror" value="$cm" />
<input type="hidden" name="sql_query" value="$sqlq" />
<input type="hidden" name="limit" value="$lim" />
<input type="hidden" name="format" value="tab" />
<input type="submit" class="button" value="(as tab-delimited format)" />
</form>
EOT

#     push @buffer, '(download results in a <a href="goose?sql_query=';
#     push @buffer, $vars->{SQL_QUERY};
#     push @buffer, ';&amp;mirror=';
#     #push @buffer, $vars->{MIRROR_SELECTION};
#     push @buffer, $vars->{CURRENT_MIRROR_INDEX};
#     #push @buffer, ';&amp;database=';
#     #push @buffer, $vars->{DATABASE_SELECTION};
#     push @buffer, ';&amp;limit=';
#     push @buffer, $vars->{LIMIT};
#     push @buffer, '&amp;format=tab" ';
#     push @buffer, 'title="Tab-delimited results download">';
#     push @buffer, 'tab-delimited format</a>)';
    push @buffer, '</p>';
  }

  ## Write table header.
  push @buffer, '<table summary="SQL query results"><thead><tr>';
  foreach my $header (@{ $vars->{RESULTS_HEADER_ARRAY} }){
    push @buffer, '<th style="">';
    push @buffer, $q->escapeHTML($header);
    push @buffer, '</th>';
  }
  push @buffer, '      </tr></thead><tbody>';

  ## Write table with alternating row colors.
  my $eo = 0;
  foreach my $row (@{ $vars->{RESULTS_ARRAY_ARRAY} }){
    if( $eo % 2 == 0 ){
      push @buffer, '<tr class="even_row">';
    }else{
      push @buffer, '<tr class="even_odd">';
    }

    ## Write each item in the row.
    foreach my $item (@$row){
      push @buffer, '<td rowspan="1">';
      push @buffer, $item;
      push @buffer, '</td>';
    }
    push @buffer, '</tr>';
    $eo = $eo + 1;
  }
  push @buffer, '</tbody></table>';

  ## Thingy to bounce us back to the top.
  push @buffer, '<p class="toTop">';
  push @buffer, '<a href="#top" title="Back to the top of the page">';
  push @buffer, 'Back to top</a>';
  push @buffer, '</p>';

  ## End replacement.
  push @buffer, '</div>';

  return join '', @buffer;
}
