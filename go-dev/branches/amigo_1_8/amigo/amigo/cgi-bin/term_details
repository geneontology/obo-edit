#!/usr/bin/perl -w
####
#### Replacement for term-details-cgi. Not in amigo for backwards
#### compat reasons, but we might want to consider changing that in
#### the future. OTOH, it might make it easier to transition to
#### mod_perl if things are broken up like this...
####
#### TODO: Spin out large chunks to workers--there is a lot of
#### reusable code here...
####

BEGIN { require "config.pl"; }
use lib $ENV{GO_DEV_ROOT} . '/go-perl';
use lib $ENV{GO_DEV_ROOT} . '/go-db-perl';
use lib $ENV{GO_DEV_ROOT} . '/amigo/perl';
use lib $ENV{GOBO_ROOT};

package AmiGO::WebApp::TermDetails;
use base 'AmiGO::WebApp';

use Data::Dumper;

use CGI::Application::Plugin::Session;
use CGI::Application::Plugin::TT;
use CGI::Application::Plugin::Redirect;

use AmiGO::WebApp::Input;

use GOBO::DBIC::GODBModel::Schema;

use JSON;

## Real external workers.
use AmiGO::Worker::Term;
use AmiGO::Worker::GeneProductCount;
use AmiGO::External::XML::GONUTS;
use AmiGO::External::QuickGO::Term;


##
sub setup {

  my $self = shift;

  $self->{STATELESS} = 0;

  ## Configure how the session stuff is going to be handled when and
  ## if it is necessary.
  $self->session_config(
			CGI_SESSION_OPTIONS => [
						"driver:File",
						$self->query,
						{Directory=> $self->{CORE}->amigo_env('AMIGO_CGI_ROOT_DIR') . '/sessions'}
					       ],
			COOKIE_PARAMS       => {
						-path  => '/',
					       },
			SEND_COOKIE         => 1,
 );

  $self->tt_config(TEMPLATE_OPTIONS =>
		   {INCLUDE_PATH =>
		    $self->{CORE}->amigo_env('GO_DEV_ROOT') .
		    '/amigo/amigo/templates'});

  $self->mode_param('mode');
  $self->start_mode('details');
  $self->error_mode('mode_fatal');
  $self->run_modes(
		   'details'   => 'mode_term_details',
		   'compact'   => 'mode_term_details_compact',
		   'AUTOLOAD'  => 'mode_exception'
		  );
}


## TODO: Temporary muxing while we get the style finalized.
sub mode_term_details {
  my $self = shift;
  return mode_term_details_core($self, 'basic');
}
sub mode_term_details_compact {
  my $self = shift;
  return mode_term_details_core($self, 'compact');
}


## Nice example: amigo/term-details.cgi?term=GO:0022008
sub mode_term_details_core {

  my $self = shift;
  my $type = shift || 'basic'; # TODO: temporary muxing until final.

  ##
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile('term');
  my $input_term_id = $params->{term};
  $self->_common_params_settings({'title' =>
				  'AmiGO: Term Details for ' . $input_term_id});

  ## TODO/BUG: these need to go later.
  my $graph_type = $params->{graph_type};

  ## Input sanity check.
  my $acc_list_for_gpc_info = [];
  if( ! $input_term_id ){
    return $self->mode_die_with_message('Term acc could not be found!');
  }
  push @$acc_list_for_gpc_info, $input_term_id;

  ###
  ### Get full term info.
  ###

  # my $term_q = AmiGO::Worker::Term->new("excessive");
  my $term_q = AmiGO::Worker::Term->new();
  my $term_info = $term_q->get_info($input_term_id);
  if( ! defined($term_info) || $self->{CORE}->empty_hash_p($term_info) ){
    return $self->mode_die_with_message('Unable to find any such acc!');
  }

  ##
  my $foo = (keys %$term_info)[0];
  $self->{CORE}->kvetch('$term_info: ' . Dumper($term_info->{$foo}));
  $self->set_template_parameter('TERM_INFO', $term_info->{$foo});

  ## TODO: spin into AmiGO::Worker somewhere.
  ## Graph on.
  my $graph = GOBO::DBIC::GODBModel::Graph->new();
  # $graph->verbose(1);

  ###
  ### Get neighborhood below term.
  ###

  ## We're capable of getting multiple child relations from the
  ## graph_path table, so we are going to filter for the "strongest"
  ## one and use that as the single representative child.
  my $the_single_child = {};
  my $child_rels = $graph->get_child_relationships($input_term_id);
  #$self->{CORE}->kvetch('_a_: ' . $child_rels);
  #$self->{CORE}->kvetch('_b_: ' . scalar(@$child_rels));
  foreach my $child_rel (@$child_rels){

    my $rel = $child_rel->relationship; #->name;
    my $sub = $child_rel->subject;

    #my $rel_name = $rel->name;
    my $rel_acc = $rel->acc;
    my $sub_acc = $sub->acc;
    my $sub_name = $sub->name;

    # $self->{CORE}->kvetch('_c.r_: ' . $rel_acc);
    # $self->{CORE}->kvetch('_c.s_: ' . $sub_acc);
    # $self->{CORE}->kvetch('_c.n_: ' . $sub_name);

    my $add_it_p = 1;

    ## If the item is already in, check weight.
    if( defined $the_single_child->{$sub_acc} ){
      if( $graph->relation_weight($rel_acc, 1000) <
	  $graph->relation_weight($the_single_child->{$sub_acc}{rel}, 1000) ){
	$add_it_p = 0;
      }
    }

    ## If the item acc smells obsolete, prevent it from being
    ## displayed/getting into the mix.
    if( $sub_acc =~ /^obsolete_/ ){
      $add_it_p = 0;
    }

    ## If it passed that above tests, add it.
    if( $add_it_p ){

      $the_single_child->{$sub_acc} =
	{
	 acc => $sub_acc,
	 name => $sub_name,
	 rel => $rel_acc,
	 link => $self->{CORE}->get_interlink({mode => 'term_details',
					       arg => {acc => $sub_acc},
					      }),
	 #optional => {frag => 'lineage'}}),
	};
    }
  }

  ## Unwind hash key for gpc info list and child chunks.
  my $child_chunks = [];
  foreach my $sub_acc (keys %$the_single_child){
    push @$acc_list_for_gpc_info, $sub_acc;
    push @$child_chunks, $the_single_child->{$sub_acc};
  }

  ## Name ordering.
  my @sorted_child_chunks = sort {
    lc($a->{name}) cmp lc($b->{name})
  } @$child_chunks;
  $self->set_template_parameter('CHILD_CHUNKS', \@sorted_child_chunks);

  ###
  ### Get term ancestor information.
  ###

  #$self->{CORE}->kvetch("Start lineage: " . $input_term_id);
  my($lnodes, $lnode_rel, $lnode_rel_inf, $lnode_depth, $max_ldepth) =
    $graph->lineage($input_term_id);
  # $self->{CORE}->kvetch('lnodes: ' . Dumper($lnodes));
  # $self->{CORE}->kvetch('lnode_rel: ' . Dumper($lnode_rel));
  # $self->{CORE}->kvetch('lnode_depth: ' . Dumper($lnode_depth));
  # $self->{CORE}->kvetch('max_depth: ' . Dumper($max_ldepth));
  #$self->{CORE}->kvetch("Stop lineage");
  #die;

  ###
  ### Climb tree back to root and grab chunks.
  ### The output from this section should an ordered array of arrays,
  ### with chunk information similar to the children below.
  ### '$graph->climb' gets self, so we'll edit that out by hand.
  ### TODO: Can be spun out?
  ###

  ## Grab core information.
  #my($anodes, $aedges, $adesc, $aanc, $adepth) = $graph->climb($input_term_id);
  #$self->{CORE}->kvetch("clumb:\n" . Dumper(\@akeys));

  ## Sort into buckets depending on reported depth.
  my $nodes_by_depth = {};
  # my $max_depth = 0;
  foreach my $acc (keys %$lnodes){

    #$self->{CORE}->kvetch("clumb: " . $acc);

    ## Only continue if not self.
    if( $acc ne $input_term_id ){

      ## 
      my $depth = $lnode_depth->{$acc};
      if( ! defined $nodes_by_depth->{$depth} ){
	$nodes_by_depth->{$depth} = [];
      }

      ## Add manufactured struct.
      my $term = $lnodes->{$acc};
      my $rel = $lnode_rel->{$acc};
      my $inf = $lnode_rel_inf->{$acc};
      # my $rel = $graph->get_relationship($acc, $input_term_id);

      ## Looks like it's not a member of this "reduced" graph.
      ## TODO/BUG: this graph_type stupidity will be removed once we're
      ## settled.
      if( defined $rel || $graph_type eq 'all' ){

	##
	if( ! defined $rel ){ $rel = 'fatal'; }

	#$self->{CORE}->kvetch("_rel: " . $rel);
	push @{$nodes_by_depth->{$depth}},
	  {
	   acc => $acc,
	   inferred_p => $inf,
	   name => $term->name,
	   rel => $rel,
	   link => $self->{CORE}->get_interlink({
					 mode => 'term_details',
					 arg => {acc => $acc},
					}),
	  };
	push @$acc_list_for_gpc_info, $acc;
      }else{
	## There probably won't be a need for "fatal"s now...
	# $rel = 'fatal';
      }
    }
  }
  $self->{CORE}->kvetch("nodes_by_depth:\n" . Dumper($nodes_by_depth));
  #$self->{CORE}->kvetch("adepth:\n" . Dumper($adepth));
  #$self->{CORE}->kvetch("_max_depth: " . $max_depth);
  my $nodes_sorted_by_depth = {};
  for( my $depth = 0; $depth < $max_ldepth; $depth++ ){
    #$self->{CORE}->kvetch("_depth: " . $depth);
    if( defined $nodes_by_depth->{$depth} ){
      my @blah = sort {
	lc($a->{name}) cmp lc($b->{name})
      } @{$nodes_by_depth->{$depth}};
      $nodes_sorted_by_depth->{$depth} = \@blah;
    }
    #$self->{CORE}->kvetch("nbd:\n" .Dumper($nodes_by_depth->{$depth}));
    #$self->{CORE}->kvetch("nsbd:\n" .Dumper($nodes_sorted_by_depth->{$depth}));
  }

  ## Create a mapping between terms and a random address.
  my $rand_to_acc = {};
  my $acc_to_rand = {};
  for( my $i = 0; $i < scalar(@$acc_list_for_gpc_info); $i++ ){
    my $acc = $acc_list_for_gpc_info->[$i];
    my $rand = $self->{CORE}->unique_id();
    $rand_to_acc->{$rand} = $acc;
    $acc_to_rand->{$acc} = $rand;
  }
  $self->set_template_parameter('ACC_TO_RAND', $acc_to_rand);
  $self->set_template_parameter('RAND_TO_ACC', $rand_to_acc);
  #$self->set_template_parameter('GENE_PRODUCT_ASSOCIATIONS_COUNT', 'foo');
  # ## 
  # $self->{CORE}->kvetch("nodes_sorted_by_depth:\n" .
  # 			Dumper($nodes_sorted_by_depth));
  # $self->{CORE}->kvetch('lnode_rel_inf: ' . Dumper($lnode_rel_inf));
  # $self->{CORE}->kvetch("max depth: " . $max_ldepth);

  # ## Collect path addresses for javascript line to infer.
  # my $node_addresses = {};
  # my $total_address_rows = 0;
  # if( $nodes_sorted_by_depth && $max_ldepth ){
  #   my $d = 0;
  #   while( $d <= $max_ldepth ){
  #     if( $nodes_sorted_by_depth->{$d} ){
  # 	my $anc_chunks = $nodes_sorted_by_depth->{$d};
  #       foreach my $anc (@$anc_chunks){
  # 	  #$self->{CORE}->kvetch("address: " . $anc->{acc});
  # 	  if( defined $lnode_rel_inf->{$anc->{acc}} &&
  # 	      $lnode_rel_inf->{$anc->{acc}} == 1 ){
  # 	    # $self->{CORE}->kvetch("addr: " . $anc->{acc} . ', ' .
  # 	    # 			  $total_address_rows . ', ' . $d);
  # 	    $node_addresses->{$anc->{acc}} =
  # 	      {
  # 	       row => $total_address_rows,
  # 	       column => $d,
  # 	      };
  # 	  }
  # 	  $total_address_rows++;
  # 	}
  #     }
  #     $d++;
  #   }
  # }
  # my $home_address =
  #   {
  #    row => $total_address_rows,
  #    column => scalar( keys %$nodes_sorted_by_depth ),
  #   };
  # # $self->{CORE}->kvetch("addresses:\n" . Dumper($node_addresses));
  # # $self->{CORE}->kvetch("home address:\n" . Dumper($home_address));

  ## Add variables to template.
  $self->set_template_parameter('MAX_DEPTH', $max_ldepth);
  $self->set_template_parameter('MAX_DISPLACEMENT', $max_ldepth + 2);
  $self->set_template_parameter('PARENT_CHUNKS_BY_DEPTH',
				$nodes_sorted_by_depth);

  ###
  ### Pull gene_product_count info.
  ###

  #print STDERR "<<TIME_START>>\n";
  ## TODO/BUG: If nothing explodes, memoize this sucker a la Visualize:
  my $gpc_q = AmiGO::Worker::GeneProductCount->new($input_term_id,
                                                   $acc_list_for_gpc_info);
  #print STDERR "<<TIME_MID>>\n";
  my $gpc_info = $gpc_q->get_info();

  ## Get total counts for all terms (to use in fallback cases where JS
  ## is not enabled).
  my $gpc_total_count = {};
  foreach my $acc (@$acc_list_for_gpc_info){
    $gpc_total_count->{$acc} = $gpc_q->get_count($acc);
  }
  $self->set_template_parameter('GPA_COUNTS', $gpc_total_count);
  $self->set_template_parameter('GENE_PRODUCT_ASSOCIATIONS_COUNT',
				$gpc_total_count->{$input_term_id});

  ###
  ### External links.
  ###

  $self->set_template_parameter('GENE_PRODUCT_ASSOCIATIONS_LINK',
				$self->{CORE}->get_interlink({mode => 'term-assoc',
						      arg =>
						      {acc =>
						       $input_term_id}}));
  $self->set_template_parameter('VIZ_STATIC_LINK',
				$self->{CORE}->get_interlink({mode => 'visualize',
						      arg =>
						      {data => $input_term_id,
						       format => 'png'}}));
  $self->set_template_parameter('VIZ_DYNAMIC_LINK',
				$self->{CORE}->get_interlink({mode => 'visualize',
						      arg =>
						      {data => $input_term_id,
						       format => 'svg'}}));
  $self->set_template_parameter('NAVIGATION_LINK',
				$self->{CORE}->get_interlink({mode => 'layers_graph',
						      arg =>
						      {terms =>
						       $input_term_id}}));

  $self->set_template_parameter('VIZ_QUICKGO_LINK',
				$self->{CORE}->get_interlink({mode=>'visualize_simple',
							      arg =>
							      {engine=>'quickgo',
							       term =>
							       $input_term_id}}));

  my $qg_term = AmiGO::External::QuickGO::Term->new();
  $self->set_template_parameter('QUICKGO_TERM_LINK',
				$qg_term->get_term_link($input_term_id));

  $self->set_template_parameter('QUICKGO_ENGINE_P',
				$self->{CORE}->amigo_env('AMIGO_GO_ONLY_GRAPHICS'));

  ## Bridge variables from old system.
  #$self->set_template_parameter('cgi', 'term-details');
  $self->set_template_parameter('cgi', 'browse');
  $self->set_template_parameter('vbridge', 'term=' . $input_term_id);

  ###
  ### GONUTs
  ###

  ## TODO: I'd like to be able to set this up for some trivial GONUTS
  ## kappa tests.
  ## GONuts query.
  ## Cutoff a year ago (in seconds).
  ## TODO: we should compact this into a worker now that we have a chance.
  my $gonuts = AmiGO::External::XML::GONUTS->new({cutoff_time => 31536000});
  my $answer_p = $gonuts->query_term($input_term_id);
  $self->set_template_parameter('GONUTS_SUCCESS', 0);
  if( $answer_p ){
    $self->set_template_parameter('GONUTS_SUCCESS', 1);
    $self->set_template_parameter('GONUTS_TOTAL_COUNT',
				  $gonuts->get_total_count());
    $self->set_template_parameter('GONUTS_RECENT_COUNT',
				  $gonuts->get_recent_count());
    $self->set_template_parameter('GONUTS_PAGE_TITLE',
				  $gonuts->get_page_title());
    $self->set_template_parameter('GONUTS_PAGE_URL',
				  $gonuts->get_page_url());
    $self->set_template_parameter('GONUTS_DATE_STRING',
				  $gonuts->get_date_string());

    # ## DEBUG
    # $gonuts->kvetch('GONUTS: got an answer:');
    # $gonuts->kvetch("\t" . $gonuts->get_total_count());
    # $gonuts->kvetch("\t" . $gonuts->get_recent_count());
    # $gonuts->kvetch("\t" . $gonuts->get_page_title());
    # $gonuts->kvetch("\t" . $gonuts->get_page_url());
  }

  ###
  ### Standard setup.
  ### TODO: We see this a lot--should this be abstracted out too? No?
  ###

  ## Non-standard settings.
  $self->set_template_parameter('STANDARD_YUI', 'no'); # no YUI please
  # $self->set_template_parameter('STANDARD_YUI', 1);

  ## Our AmiGO services CSS.
  my $prep =
    {
     css_library =>
     [
      # 'standard', # basic GO-styles
      # 'org.bbop.amigo.ui.autocomplete'
      'standard', # basic GO-styles
      'com.jquery.jqamigo.custom',
      #'com.jquery.tablesorter',
      'org.bbop.amigo.ui.widgets'
     ],
     javascript_library =>
     [
      'com.jquery',
      'com.jquery-ui',
      'com.jquery.tablesorter',
      'org.bbop.amigo',
      'org.bbop.amigo.go_meta',
      'org.bbop.amigo.ui.widgets'
     ],
     javascript =>
     [
      # $self->{JS}->make_var('global_addresses', $node_addresses),
      # $self->{JS}->make_var('global_home_address', $home_address),
      $self->{JS}->make_var('global_count_data', $gpc_info),
      $self->{JS}->make_var('global_rand_to_acc', $rand_to_acc),
      $self->{JS}->make_var('global_acc_to_rand', $acc_to_rand),
      $self->{JS}->make_var('global_acc', $input_term_id)
     ]
    };
  $self->add_template_bulk($prep);

  ## Initialize javascript app.
  $self->add_template_javascript($self->{JS}->get_lib('TermDetails.js'));
  $self->add_template_javascript($self->{JS}->initializer_jquery('TermDetailsInit();'));

  ##
  if( $type eq 'compact' ){
    $self->add_template_content('html/main/term_details_compact.tmpl');
  }else{
    $self->add_template_content('html/main/term_details.tmpl');
  }

  return $self->generate_template_page();
}


###
### Callables:
###


package main;

use AmiGO;
my $td = AmiGO::WebApp::TermDetails->new(PARAMS => {});
$td->run();
