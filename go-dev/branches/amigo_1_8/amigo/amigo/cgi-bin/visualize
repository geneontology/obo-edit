#!/usr/bin/perl -w
####
#### TODO: fold more into Worker::Visualize...
####

BEGIN { require "config.pl"; }
use lib $ENV{GO_DEV_ROOT} . '/go-perl';
use lib $ENV{GO_DEV_ROOT} . '/go-db-perl';
use lib $ENV{GO_DEV_ROOT} . '/amigo/perl';
use lib $ENV{GOBO_ROOT};

package AmiGO::WebApp::Visualize;
use base 'AmiGO::WebApp';


use CGI::Application::Plugin::TT;
use GOBO::DBIC::GODBModel::Graph;
use Data::Dumper;
use AmiGO::GraphViz;
use AmiGO::SVGRewrite;
use AmiGO::WebApp::Input;
#use AmiGO::Aid;
use AmiGO::Worker::Subset;
use AmiGO::Worker::Visualize;


##
sub setup {

  my $self = shift;

  $self->{STATELESS} = 1;

  $self->tt_config(TEMPLATE_OPTIONS =>
		   {INCLUDE_PATH =>
		    $self->{CORE}->amigo_env('GO_DEV_ROOT') .
		    '/amigo/amigo/templates'});

  $self->mode_param('mode');
  $self->start_mode('status');
  $self->error_mode('mode_fatal');
  $self->run_modes(
		   'client'       => 'mode_client',
		   'quickgo'      => 'mode_quickgo', # TODO: fold into ...?
		   'subset'       => 'mode_subset',
		   'single'       => 'mode_single',
		   'basic'        => 'mode_advanced', # TODO: 'mode_single',
		   'multi'        => 'mode_advanced', # TODO: 'mode_multi',
		   'advanced'     => 'mode_advanced',
		   'status'       => 'mode_status', # server alive?
		   'AUTOLOAD'     => 'mode_exception'
		  );
}


## If a header is needed, set correct header type for format.
sub _add_fiddly_header {

  my $self = shift;
  my $type = shift || die "need type as arg: $!";
  my $inline_p = shift;
  die "need inline as arg: $!" if ! defined $inline_p;

  ##
  if( $inline_p eq 'true' ){
    $inline_p = 1;
  }elsif( $inline_p eq 'false' ){
    $inline_p = 0;
  }

  ##
  if( $inline_p ){
    ## If it is inline, we want no headers (raw image feed).
    #$self->header_add( -type => '' );
    $self->header_type('none');
  }else{
    if( $type && ($type eq 'svg' || $type eq 'svg_raw') ){
      $self->header_add( -type => 'image/svg+xml' );
    }elsif( $type && $type eq 'dot' ){
      $self->header_add( -type => 'text/plain' );
    }else{
      $self->header_add( -type => 'image/' . $type );
    }
  }
}


## This is just a very thin pass-through client.
## NOTE/WARNING: See similar in HTMLClient::mode_visualize.
##   The only difference should be redirect vs. forward. By including
##   the client with the outputter (forward), because we're not sending
##   a reencoded (safe) longer URL, we can get a lot more input.
##   This one may be the future (software points to this now)...
## TODO/BUG: not accepting "inline" parameter yet...
sub mode_client {

  my $self = shift;
  my $output = '';

  ##
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile('visualize');
  my $format = $params->{format};
  my $input_term_data_type = $params->{term_data_type};
  my $input_term_data = $params->{term_data};

  ## Cleanse input data of newlines.
  $input_term_data =~ s/\n/ /gso;

  ## If there is no incoming data, display the "client" page.
  ## Otherwise, forward to render app.
  if( ! defined $input_term_data ){

    ##
    $self->_common_params_settings({title=>'AmiGO: Visualization',
				    'amigo_mode' => 'visualize'});
    $self->add_template_content('html/main/visualize-client.tmpl');
    $output = $self->generate_template_page();

  }else{

    ## What kind of data do we have?
    #     my $data_type = 'string';
    #     if( $input_term_data_type eq 'json' ){
    #       $data_type = 'json';
    #     }

    #$self->{CORE}->kvetch(Dumper($input_term_data_type));
    #$self->{CORE}->kvetch(Dumper($input_term_data));
    #print STDERR Dumper($input_term_data_type);
    #print STDERR Dumper($input_term_data);
    #print STDERR $input_term_data;

    ## Check to see if this JSON is even parsable...that's really all
    ## that we're doing here.
    if( $input_term_data_type eq 'json' ){
      eval {
	JSON::decode_json($input_term_data);
      };
      if ($@) {
	my $str = 'Your JSON was not formatted correctly...please go back and retry. Look at the "advanced format" documentation for more details.';
	#return $self->mode_die_with_message($str . '<br />' . $@);
	return $self->mode_die_with_message($str);
      }
    }

    ## TODO: Until I can think of something better...
    if( $format eq 'navi' ){

      ## BETA: Just try and squeeze out whatever I can.
      my $in_terms = $self->{CORE}->clean_term_list($input_term_data);
      my $jump = $self->{CORE}->get_interlink({mode=>'layers_graph',
				       arg => {
					       terms => $in_terms,
					      }});
      return $self->redirect($jump, '302 Found');
    }else{
      my $jump = $self->{CORE}->get_interlink({mode=>'visualize',
				       #optional => {url_safe=>1, html_safe=>0},
				       #optional => {html_safe=>0},
				       arg => {
					       format => $format,
					       data_type =>
					       $input_term_data_type,
					       data => $input_term_data,
					      }});
      #$self->{CORE}->kvetch("Jumping to: " . $jump);
      ##
      #$output = $jump;
      #return $self->redirect($jump, '302 Found');
      return $self->redirect('mode_advanced');
    }
  }

  return $output;
}


## Example:
## http://localhost/cgi-bin/amigo/visualize?mode=quickgo&term=GO:0048856
sub mode_quickgo {

  my $self = shift;
  my $output = '';

  ##
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile('visualize_single');
  my $inline_p = $params->{inline};
  my $term = $params->{term};

  ##
  my $qg_viz = AmiGO::Worker::Visualize->new($term);

  ##
  $self->_add_fiddly_header('png', $inline_p);

  ##
  my $img = $qg_viz->quickgo() || die "could not get image for quickgo: $!";
  return $img;
}


## Example:
## http://localhost/cgi-bin/amigo/visualize?mode=single&term=GO:0048856
sub mode_single {

  my $self = shift;
  my $output = '';

  ##
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile('visualize_single');
  my $inline_p = $params->{inline};
  my $acc = $params->{term};

  ## Set graphics renderer.
  my $gv = AmiGO::GraphViz->new({bitmap => 1});

  ###
  ### Build graph.
  ###

  ## Convert input terms to AmiGO terms.
  my $graph = GOBO::DBIC::GODBModel::Graph->new();

  if( $acc ){

    my $terms = [$graph->get_term($acc)];

    ## Assemble the graph.
    my($nodes, $edges) = $graph->climb($terms);

    ## Add edges to gv.
    foreach my $key (keys %$edges){

      my $t2t = $edges->{$key};
      my $s = $t2t->subject->acc;
      my $o = $t2t->object->acc;
      my $r = $t2t->relationship->name;
      $gv->add_edge($s, $r, $o);

      $self->{CORE}->kvetch("edge: $s $r $o");
    }

    ## Add nodes and node information to gv.
    foreach my $acc (keys %$nodes){
      my $t = $nodes->{$acc};

      my $title = $t->acc;
      my $body = $t->name;
      my $border = '';
      my $fill = '';
      my $font = '';

      ## Back to standard adding.
      $gv->add_node($acc, $title, $body,
		    {
		     color => $border,
		     fillcolor => $fill,
		     fontcolor => $font,
		    });
      if( ! $amigo_terms->{$title} ){
	$amigo_terms->{$title} = {
				  name => $body,
				  gene_products => {},
				 };
      }
    }
    $output = $gv->get_png();
  }

  ## If a header is needed, set correct header type for format.
  $self->_add_fiddly_header('png', $inline_p);
  return $output;
}


## Example:
## http://localhost/cgi-bin/amigo/visualize?mode=advanced&term_data={"GO:0002244" : 0.00001, "GO:0048856" : 0.5}&format=svg
sub mode_advanced {

  my $self = shift;
  my $output = '';

  ##
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile('visualize');
  my $inline_p = $params->{inline};
  my $format = $params->{format};
  my $input_term_data_type = $params->{term_data_type};
  my $input_term_data = $params->{term_data};

  # my $aid = AmiGO::Aid->new();

  ## Decode the incoming term data, depending on incoming data
  ## type. Completely overwrite the input_term_list if we can.
  my $term_list = [];
  my $term_hash = {};
  if( $input_term_data_type eq 'string' ){
    $term_list = $self->{CORE}->clean_term_list($input_term_data);
  }else{
    $term_hash = $self->{JS}->parse_json_viz_data($input_term_data);
    #if( defined($input_term_data) &&
    #	scalar(keys %$input_term_data) != 0 ){
    # $input_term_list = [];
    foreach my $itd (keys %$term_hash){
      push @$term_list, $itd;
    }
  }

  ## DEBUG.
  #$self->{CORE}->kvetch(Dumper($term_list));
  #$self->{CORE}->kvetch(Dumper($term_hash));

  ## Set correct graphics renderer.
  my $gv = undef;
  if( $format &&
      ($format eq 'svg' || $format eq 'svg_raw' || $format eq 'dot') ){
    $gv = AmiGO::GraphViz->new();
  }else{
    $gv = AmiGO::GraphViz->new({bitmap => 1});
  }

  ###
  ### Build graph.
  ###

  ## Go through build graph routine only if there is something coming
  ## in. We'll need the empty amigo_terms later on in some cases even
  ## if there is nothing (example: producing empty SVG).
  my $amigo_terms = {};
  if( defined($term_list) &&
      scalar(@$term_list) != 0 ){

    my $graph = GOBO::DBIC::GODBModel::Graph->new();

    ## Convert input terms to AmiGO terms.
    my $terms = [];
    foreach my $acc (@$term_list){
      my $term = $graph->get_term($acc);
      if( defined $term ){
	push @$terms, $term;
      }
    }

    ## Assemble the graph.
    my($nodes, $edges) = $graph->climb($terms);

    ## Add edges to gv.
    foreach my $key (keys %$edges){

      my $t2t = $edges->{$key};
      my $s = $t2t->subject->acc;
      my $o = $t2t->object->acc;
      my $r = $t2t->relationship->name;
      $gv->add_edge($s, $r, $o);

      $self->{CORE}->kvetch("edge: $s $r $o");
    }

    ## Add nodes and node information to gv.
    foreach my $acc (keys %$nodes){
      my $t = $nodes->{$acc};

      my $title = $t->acc;
      my $body = $t->name;
      my $border = '';
      my $fill = '';
      my $font = '';

      ## BUG: this bit is great, except it shouldn't be here--it
      ## should be generated on the "client" side. How should I do
      ## that since this is the client...?  Special section for
      ## jsoned data.
      ## Deal with additional data...
      if( defined $term_hash->{$acc} && ref($term_hash->{$acc}) eq 'HASH' ){
	my $data_hash = $term_hash->{$acc};
	$title = $data_hash->{title} if defined $data_hash->{title};
	$body = $data_hash->{body} if defined $data_hash->{body};
	$border = $data_hash->{border} if defined $data_hash->{border};
	$fill = $data_hash->{fill} if defined $data_hash->{fill};
	$font = $data_hash->{font} if defined $data_hash->{font};
	# ($fill, $font) = $aid->pval_to_color($term_hash->{$acc});
      }

      ## Back to standard adding.
      $gv->add_node($acc, $title, $body,
		    {
		     color => $border,
		     fillcolor => $fill,
		     fontcolor => $font,
		    });
      if( ! $amigo_terms->{$title} ){
	$amigo_terms->{$title} = {
				  name => $body,
				  gene_products => {},
				 };
      }
    }
  }

  ## Produce the (possibly empty) image in SVG or PNG.
  if( $format && $format eq 'svg' ){

    my $svg_file = $gv->get_svg();
    my $svg_rewriter = AmiGO::SVGRewrite->new();
    $svg_rewriter->add_js_variable('amigo_terms', $amigo_terms);
    $svg_rewriter->add_js_variable('amigo_species_order', []);
    $svg_rewriter->add_js_library('org.bbop.NodeDetails');
    $svg_rewriter->add_js_initializer("org.bbop.NodeDetails('detail_context');");
    $svg_rewriter->add_js_library('org.bbop.Viewer');
    $svg_rewriter->add_js_initializer("org.bbop.Viewer('rgsvg','tform_matrix');");
    $output = $svg_rewriter->rewrite($svg_file);

  }elsif( $format && $format eq 'svg_raw' ){
    $output = $gv->get_svg();
  }elsif( $format && $format eq 'dot' ){
    $output = $gv->get_dot();
  }else{
    $output = $gv->get_png();
  }

  ## If a header is needed, set correct header type for format.
  if( $inline_p eq 'false' ){
    if( $format && ($format eq 'svg' || $format eq 'svg_raw') ){
      $self->header_add( -type => 'image/svg+xml' );
    }elsif( $format && $format eq 'dot' ){
      $self->header_add( -type => 'text/plain' );
    }else{
      $self->header_add( -type => 'image/png' );
    }
  }else{

    ## No header.
    $self->header_add( -type => '' );

    ## BUG: inline SVG needs the first few lines removed as well...
    if( $format && ($format eq 'svg' || $format eq 'svg_raw') ){
      ## TODO: 
    }
  }

  return $output;
}


## Example:
## http://localhost/cgi-bin/amigo/visualize?mode=subset&subset=goslim_candida
sub mode_subset {

  my $self = shift;
  my $output = '';

  ##
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile('visualize_subset');
  my $inline_p = $params->{inline};
  my $subset_acc = $params->{subset};

  ## Set graphics renderer.
  my $gv = AmiGO::GraphViz->new({bitmap => 1});

  ###
  ### Build graph.
  ###

  my $graph = GOBO::DBIC::GODBModel::Graph->new();
  if( $subset_acc ){

    ## Convert input subset acc to term accs.
    my $sget = AmiGO::Worker::Subset->new();
    my @term_list = keys(%{$sget->get_term_accs($subset_acc)});

    $self->{CORE}->kvetch("Subsets:" .
			  join(', ', keys(%{$sget->get_subset_accs()})));
    $self->{CORE}->kvetch("Subset terms:" . join(', ', @term_list));

    ## Convert input terms to AmiGO terms.
    my $terms = [];
    foreach my $acc (@term_list){
      my $term = $graph->get_term($acc);
      if( defined $term ){
	push @$terms, $term;
      }
    }

    ## Assemble the graph.
    my($nodes, $edges) = $graph->climb($terms);

    ## Add edges to gv.
    foreach my $key (keys %$edges){

      my $t2t = $edges->{$key};
      my $s = $t2t->subject->acc;
      my $o = $t2t->object->acc;
      my $r = $t2t->relationship->name;
      $gv->add_edge($s, $r, $o);

      $self->{CORE}->kvetch("edge: $s $r $o");
    }

    ## Add nodes and node information to gv.
    foreach my $acc (keys %$nodes){
      my $t = $nodes->{$acc};

      my $title = $t->acc;
      my $body = $t->name;
      my $border = '';
      my $fill = '';
      my $font = '';

      ## Back to standard adding.
      $gv->add_node($acc, $title, $body,
		    {
		     color => $border,
		     fillcolor => $fill,
		     fontcolor => $font,
		    });
      if( ! $amigo_terms->{$title} ){
	$amigo_terms->{$title} = {
				  name => $body,
				  gene_products => {},
				 };
      }
    }
    $output = $gv->get_png();
  }

  ## If a header is needed, set correct header type for format.
  $self->_add_fiddly_header('png', $inline_p);
  return $output;
}


###
###
###


## Last called before the lights go out.
sub teardown {
  my $self = shift;

  # Disconnect when we're done, (Although DBI usually does this automatically)
  #$self->dbh->disconnect();
}


###
### Callables:
###


package main;

use AmiGO;
#use Visualize;
my $v = AmiGO::WebApp::Visualize->new(PARAMS => {});
$v->run();
