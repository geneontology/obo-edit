#!/usr/bin/perl -w
####
#### A testing site for forms.
####

BEGIN { require "config.pl"; }
use lib $ENV{GO_ROOT} . '/amigo/perl';

package AmiGO::WebApp::FormTest;
use base 'AmiGO::WebApp';

use strict;
use CGI::Application::Plugin::Session;
use CGI::Application::Plugin::TT;

use AmiGO::WebApp::Input;
use AmiGO::JavaScript;
use Data::Dumper;
use IO::Scalar;
my $core = AmiGO::JavaScript->new();


##
sub setup {

  my $self = shift;

  $self->{STATELESS} = 1;
  $self->{TYPE} = 'json';

  $self->tt_config(TEMPLATE_OPTIONS =>
		   {INCLUDE_PATH =>
		    $core->amigo_env('GO_ROOT') .
		    '/amigo/amigo/templates'});

  $self->mode_param('mode');
  $self->start_mode('status');
  $self->error_mode('mode_fatal');
  $self->run_modes(
		   'status'        => 'mode_status', # server alive?

		   'post_file'     => 'mode_post_file',
		   'timeout'       => 'mode_timeout',
		   'links_101'     => 'mode_links_101',
		   'kappa_results' => 'mode_kappa_results',
		   'simple_test'   => 'mode_simple_test',
		   'echo_form'     => 'mode_echo_form',
		   'echo_die'      => 'mode_echo_die',

		   'AUTOLOAD'      => 'mode_exception'
		  );
}


##
sub _header_wrap(){
  my $self = shift;
  if( $self->{TYPE} eq 'json' ){
    #$self->header_add( -type => 'application/json' );
    #$self->header_add( -type => 'plain/text' );
    #$self->header_add( -type => '' );
    $self->header_add( -type => 'text/html' );
  }else{
    $self->header_add( -type => 'text/html' );
  }
}


## Example:
sub mode_post_file {

  my $self = shift;
  my $output = '';

  $core->kvetch("mode: post_file");


#  my $i = AmiGO::WebApp::Input->new();
#   my $params = $i->input_profile('visualize');
#   my $inline_p = $params->{inline};
#   my $format = $params->{format};
#   my $input_term_data_type = $params->{term_data_type};
#   my $input_term_data = $params->{term_data};

  my $pdata = [
	       #$self->param('POSTDATA'),
	       #$self->query->param('POSTDATA'),
	       #$self->param('file')
	       $self->query->param('file')
	      ];

  $core->kvetch("all pdata: " . scalar(@$pdata));
  foreach my $p (@$pdata){
    $core->kvetch("pdata: " . ref($p));
  }

  my $all_raw = $self->raw_params();
  my $raw_desc = {};
  foreach my $raw (keys %{$all_raw}){
    #$raw_desc->{$raw} = scalar($all_raw->{$raw});
    $core->kvetch("key: " . $raw);
    $core->kvetch("val: " . $all_raw->{$raw});
    $core->kvetch("typeof: " . ref($all_raw->{$raw}));

    my $val = $all_raw->{$raw};
    if( ref($val) eq 'Fh' ){
      $core->kvetch("\tneed to unwind");
      my @buf = ();
      while( <$val> ){ push @buf, $_; }
      $val = join '', @buf;
      $core->kvetch("\tunwound to: " . $val);
    }

    $raw_desc->{$raw} = {
			 'length' => length($val),
			 'raw' => $val,
			};
  }

  $core->kvetch("mode: todo");

  my $ret = {
	     'okay'=> $core->{JSON_TRUE},
	     'arguments' => $raw_desc,
	    };

  return $core->make_js($ret);
}


## Testing timeout errors for the testing agents.
sub mode_timeout {

  my $self = shift;
  my $output = '';

  $core->kvetch("mode: timeout");
  my $ts = 0;
  if( defined $self->query->param('seconds') ){
    $ts = $self->query->param('seconds') + 0
  }
  $core->kvetch("wait for: " . $ts . ' seconds.');
  $core->kvetch("mode: todo");

  ## Small failsafe.
  if( $ts <= 300 ){
    sleep $ts;
  }

  my $ret = {
	     'okay'=> $core->{JSON_TRUE},
	     'seconds' => $ts + 0,
	    };

  return $core->make_js($ret);
}


## Testing the broad catagories of links.
sub mode_links_101 {

  my $self = shift;
  my $output = '';
  $self->{TYPE} = 'html';

  $core->kvetch("mode: links_101");

  my $ret_val = '';
  my $HTML = new IO::Scalar \$ret_val;
  print $HTML <<HTML;
<html>
<body>
<p>

<a href="amigo"
   title="internal good relative">ilink1</a>
<br />
<a href="http://localhost/cgi-bin/amigo/amigo"
   title="internal good absolute">ilink2</a>
<br />
<a href="amigo?mode=asdf"
   title="internal error relative">ilink3</a>
<br />
<a href="amigoing"
   title="internal bad relative">ilink4</a>
<br />
<a href="http://localhost/cgi-bin/amigo/amigoing"
   title="internal bad absolute">ilink5</a>
<br />
<!--
<a href="http://localhost/cgi-bin/amigo/form_test?mode=timeout&seconds=300"
   title="internal timeout absolute">ilink6</a>
-->
<br />

<!-- External URLs -->

<a href="http://wiki.geneontology.org/index.php/AmiGO_Labs"
   title="external good">elink1</a>
<br />
<a href="http://wiki.geneontology.org/index.pl/AmiGO_Poodles"
   title="external bad">elink2</a>
<br />
<a href="http://wiki.geneanthropology.edu/index.php/AmiGO_Labs"
   title="external error">elink3</a>
<br />

</p>
</body>
</html>
HTML

  return $ret_val;
}


##
sub mode_simple_test {

  my $self = shift;
  my $output = '';
  $self->{TYPE} = 'html';

  $core->kvetch("mode: simple_test");

  my $ret_val = '';
  my $HTML = new IO::Scalar \$ret_val;
  print $HTML <<HTML;
<html>
<body>
<p>

<!-- FOO = "FOO" -->
<!-- ONE =  1 -->

See the HTML comments for the important information.

</p>
</body>
</html>
HTML

  return $ret_val;
}


##
sub mode_echo_form {

  my $self = shift;
  my $output = '';
  $self->{TYPE} = 'html';

  $core->kvetch("mode: echo_form");

  my $name = $self->query->param('name') || '';
  my $value = $self->query->param('value') || '';
  my $segment = '';
  if( $name && $value ){
    $segment =
      "<!-- name = " . $name . " -->\n" .
	"<!-- value = " . $value . " -->\n" .
	  "name = " . $name . "\n" .
	    "value = " . $value . "\n";
  }

  my $ret_val = '';
  my $HTML = new IO::Scalar \$ret_val;
  print $HTML <<HTML;
<html>
<body>

<p>
$segment
</p>

<p>
<form name="echo" action="page_test">
<input type="hidden" name="mode" value="echo_form">
<input type="text" name="name" size="20" value=""> (name)
<br />
<input type="text" name="value" size="20" value=""> (value)
<br />
<input type="submit">
</form>

</p>
</body>
</html>
HTML

  return $ret_val;
}


##
sub mode_echo_die {

  my $self = shift;
  my $output = '';

  $core->kvetch("mode: echo_die");

  $self->header_add( -status => '500 Internal Server Error' );
  $self->_header_wrap();
  $self->{TYPE} = 'html';

  my $msg = $self->query->param('msg') || '';
  my $segment =
    "<!-- msg = " . $msg . " -->\n" .
      "<!-- MSG = " . $msg . " -->\n" .
	"msg = " . $msg;
  my $ret_val = '';
  my $HTML = new IO::Scalar \$ret_val;
  print $HTML <<HTML;
<html>
<body>

<p>
$segment
</p>

</body>
</html>
HTML

  return $ret_val;
}


## Display the results from a pre-aimed kappa cron job.
sub mode_kappa_results {

  my $self = shift;

  ## Incoming template.
  my $i = AmiGO::WebApp::Input->new();
  my $params = $i->input_profile();
  $self->_common_params_settings($params);

  ###
  ### Directory check.
  ###

  my $kurl = $core->amigo_env('AMIGO_TESTS_URL');
  my $kpath = $core->amigo_env('AMIGO_TESTS_DIR');

  if( ! -r $kpath || ! -d $kpath ){
    return $self->mode_die_with_message("Couldn\'t find tests directory (" .
					$kpath . ").");
  }

  my $all_test_files = [];
  if( ! -r $kpath . "/kappa_details.log" || ! -r $kpath . "/kappa_struct.log" ){
    return $self->mode_die_with_message("It seems that either kappa has not been run or is in progress. This is likely due to a scheduled cron job running--please check back later.");
  }else{

    ## Read in the log as a block.
    my @lra= ();
    open FILE, "<$kpath/kappa_details.log" or die $!;
    while(<FILE>){ push @lra, $_; }
    close FILE;
    my $log_string = "<pre>" . join('', @lra) . "</pre>\n";
    $self->set_template_parameter('log', $log_string);

    ## 
    $self->set_template_parameter('kappa_url', $kurl);

    ## Gather file names for display.
    foreach my $f (<$kpath/*>){
      if( $f =~ /$kpath\/([0-9]{14}.*)$/ ){
	# print STDERR "_" . $f . " _ " . $1 . "\n";
	push @$all_test_files,
	  {
	   url => $kurl . '/' . $1,
	   path => $f,
	   name => $1,
	  };
      }
    }
    # $self->set_template_parameter('okay_p', 1);
    $self->set_template_parameter('files', $all_test_files);

    ## Reconstitute the JSON struct for display.
    my $js = AmiGO::JavaScript->new();
    my $hash = $js->parse_json_file($kpath . "/kappa_struct.log");
    $self->set_template_parameter('struct', $hash);
  }

  ###
  ### Common page prep.
  ###

  ## Non-standard settings.
  $self->set_template_parameter('STANDARD_YUI', 'no'); # no YUI please
  $self->set_template_parameter('page_title', 'Kappa Results');

  ## Our AmiGO JS and CSS.
  my $prep =
    {
     css_library =>
     [
      'standard', # basic GO-styles
      # 'org.bbop.amigo.ui.widgets',
      # 'com.jquery.redmond.custom'
     ],
    };
  $self->add_template_bulk($prep);

  $self->add_template_content('html/main/kappa_results.tmpl');

  return $self->generate_template_page();
}


##
sub mode_status {

  my $self = shift;

  #$self->header_add( -type => 'application/json' );
  #return $core->make_js("{'OK':true}");
  $self->_header_wrap();
  return $core->make_js({'okay' => $core->{JSON_TRUE}});
}


## Catching nasty errors.
sub mode_fatal {

  my $self = shift;

  $self->header_add( -status => '500 Internal Server Error' );
  #$self->header_add( -type => 'application/json' );
  #return $core->make_js('ERROR:' . $@);
  $self->_header_wrap();
  return $core->make_js({'okay'=> $core->{JSON_FALSE},
			 'reason'=> 'fatal ' . $@});
}


## Catching mode errors.
sub mode_exception {

  my $self = shift;
  my $intended_runmode = shift;

  $self->header_add( -status => '500 Internal Server Error' );
  #$self->header_add( -type => 'application/json' );
  #return $core->make_js('NO:' . $intended_runmode);
  $self->_header_wrap();
  return $core->make_js({'okay' => $core->{JSON_FALSE},
			 'reason' => 'exception: no runmode ' .
			 $intended_runmode});
}


###
###
###

## Last called before the lights go out.
sub teardown {
  my $self = shift;

  # Disconnect when we're done, (Although DBI usually does this automatically)
  #$self->dbh->disconnect();
}

###
### Callables:
###

package main;

use AmiGO;
#use Visualize;
my $ft = AmiGO::WebApp::FormTest->new(PARAMS => {});
$ft->run();
