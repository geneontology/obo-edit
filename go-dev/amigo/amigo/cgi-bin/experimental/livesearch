#!/usr/bin/perl -w
####
#### Search component for live JS table. Hopefully will be able to
#### serve as autocomplete/opensearch as well. Originally from
#### experimentals "completion" code.
####
#### BUG: extremely insecure, etc.
####

## Need a little knowledge of the "AmiGO" environment.
BEGIN{ require "config.pl"; }

##
our $regexp = $ENV{AMIGO_TERM_REGEXP} if ! $regexp;
our $cgi_root_dir = $ENV{AMIGO_CGI_ROOT_DIR} if ! $cgi_root_dir;

## Bring in necessaries.
use utf8;
use strict;
use Carp;

##
use JSON;
use Lucene;
use CGI;

##
my $MIN_SIZE = 3;
my $MAX_SIZE = 30;
my $RETURN_LIMIT = 10;

## Just enough CGI to grab the incoming arg.
$CGI::POST_MAX = 0;
my $q = new CGI;

## Grab the actually query string. Don't worry about it, we'll just be
## passing it to Lucene anyways.
my $in_query = $q->param('q') || '';
my $in_field = $q->param('field') || '';
my $in_ascending = $q->param('ascending') || 0;

##
print <<EOC;
content-type:text/plain

EOC

##
my $ret = '[]';

## If there is no major problem, try it.
## Look only if we meet minimal requirements.
my $cgi_error = $q->cgi_error;
if ( ! $cgi_error &&
     $in_query &&
     length($in_query) > $MIN_SIZE &&
     length($in_query) < $MAX_SIZE ){

  ## Default to general type, switch otherwise.
  my $spot = $cgi_root_dir . '/lucene/term';

  #my $analyzer = Lucene::Analysis::SimpleAnalyzer();
  my $analyzer = new Lucene::Analysis::Standard::StandardAnalyzer();
  my $store = Lucene::Store::FSDirectory->getDirectory($spot, 0);
  my $searcher = new Lucene::Search::IndexSearcher($store);

  ## # build a query on another field
  ## #my $query = $parser->parse("title:cookbook");
  ## Build a query on 'body'.
  my $parser = new Lucene::QueryParser('body', $analyzer);
  #my $parser = new Lucene::QueryParser('name', $analyzer);
  my $query = $parser->parse($in_query);

  ## Do we want to sort?
  ## Then get results then number of results.
  my $hits = undef;
  if( $in_field ){
    my $sortfield = undef;
    if( ! $in_ascending ){
      #print STDERR "---1\n";
      #$sortfield = new Lucene::Search::SortField($in_field, 1);
    }else{
      #print STDERR "---0\n";
      #$sortfield = new Lucene::Search::SortField($in_field);
    }
    my $sort = new Lucene::Search::Sort($in_field);
    $hits = $searcher->search($query, $sort);
  }else{
    $hits = $searcher->search($query);
  }
  my $num_hits = $hits->length();

  ## Fields and ranking for each result.
  my $comp = [];
  for( my $i = 0; $i < $num_hits && $i < $RETURN_LIMIT; $i++ ){

    my $doc = $hits->doc($i);
    my $score = $hits->score($i);
    my $acc = $doc->get('acc');
    my $symbol = $doc->get('symbol');
    my $name = $doc->get('name');

    ## TODO: shorten name to something smaller...
    push @$comp, $name;
  }

  ## Encode findings.
  my $json = JSON->new();
  my $json_comp = $json->encode($comp);

  $ret = $json_comp;

  ## Free memory and close everything.
  undef $hits;
  undef $query;
  undef $parser;
  undef $analyzer;
  $searcher->close();
  #undef $fsdir;
  undef $searcher;
  $store->close;
  undef $store;
}

## Final.
print $ret;
