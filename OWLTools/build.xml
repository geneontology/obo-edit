<?xml version="1.0" encoding="UTF-8"?>
<project name="OWLTools" default="all">

	<!-- project variables -->
	<property name="projectname" value="owltools" />
	<property name="runtimedir_name" value="runtime" />
	<property name="runtimedir" location="${runtimedir_name}" />
	<property name="release_path" location="releases" />
	<property name="jarfile" location="${runtimedir}/${projectname}.jar" />
	<property name="ontologyreleasejarfile" location="${runtimedir}/ontologyrelease.jar" />
	<property name="main_jar_manifest" location="jar_manifest" />
	<property name="jar_main_class" location="owltools.OWLReasonerRunner" />

	<property name="outputdir" value="classes" />
	<property name="sourcedir" value="src" />
	<property name="apidoc_dest" location="docs/api" />
	<property name="librarydir" location="lib" />
	<property name="releasenotes" location="CHANGES" />
	<property name="svn_repository_url" value="https://geneontology.svn.sourceforge.net/svnroot/geneontology/java/${projectname}" />
	<property name="tagprefix" value="${projectname}-" />
	<!-- Developer note (not sure where to put this:  make sure the VERSION file doesn't contain a newline!! Emacs adds a newline. -->
	<property name="version_file" value="${sourcedir}/org/oboedit/resources/VERSION" />

	<property name="main_jar_manifest_template" location="templates/jar_manifest.template" />

	<!-- install4j specific properties; these can be deleted if you don't intend to create install4j installers -->
	<property name="install4j_installation_path" location="/Applications/install4j 4" />
	<!-- change install path for linux -->
	<!-- property name="install4j_installation_path" location="/opt/install4j" / -->
	<property name="install4j_ant_library_path" location="${install4j_installation_path}/bin/ant.jar" />
	<property name="install4j_api_library_path" location="${install4j_installation_path}/resource/i4jruntime.jar" />

	<property name="antpath" value="ant" />

	<!-- properties specific to obo ontology release manager -->
	<property name="oborelease.configfile" value="conf/obo-release.properties" />
	<property name="oborelease.outputdir" location="oborelease" />
	
	<!-- library jars that should appear in the final runtime directory -->
	<fileset dir="${librarydir}/runlibs" id="library_jars">
		<include name="*.jar" />
		<include name="*.jnilib" />
	</fileset>

	<path id="classpath">
		<fileset refid="library_jars" />
		<fileset dir="${librarydir}/buildlibs">
			<include name="*.jar" />
		</fileset>
	</path>

	<fileset dir="${sourcedir}" id="resource_files">
		<include name="**/resources/**" />
	</fileset>

	<target name="checkjar">
		<condition property="main_jar_current">
			<and>
				<available file="${jarfile}" />
				<available file="${main_jar_manifest}" />
				<uptodate targetfile="${jarfile}">
					<srcfiles refid="main_jar_contents" />
				</uptodate>
				<uptodate targetfile="${jarfile}" srcfile="${main_jar_manifest_template}" />
			</and>
		</condition>
	</target>

	<!-- classes that should appear in the main jar file -->
	<fileset id="main_jar_contents" dir="${outputdir}" includes="**/*.class,**/resources/**" excludes="**/.svn/*" />

	<target name="all" depends="clean, classes, jar, apidocs" description="Cleans and rebuilds from scratch">
	</target>

	<target name="apidocs" description="Build API documentation">
		<mkdir dir="${apidoc_dest}" />
		<javadoc sourcepath="${sourcedir}" classpathref="classpath" defaultexcludes="yes" destdir="${apidoc_dest}" author="true" version="true" use="true" />
	</target>


	
	<target name="library_jars">
		<mkdir dir="${runtimedir}" />
		<sync todir="${runtimedir}">
			<fileset refid="library_jars" />
		</sync>
	</target>

	<target name="buildnum">
		<echo message="updated buildnum" />
		<buildnumber file="BUILDNUM" />
	</target>

	

	<target name="resources">
		<copy todir="${outputdir}">
			<fileset refid="resource_files" />
		</copy>
	</target>

	<target name="classes" depends="resources">
		<pathconvert property="ctemp" pathsep=" ">
			<path refid="classpath" />
		</pathconvert>
		<echo message="classpath = ${ctemp}" />
		<mkdir dir="${outputdir}" />
		<javac srcdir="${sourcedir}" destdir="${outputdir}" debug="true">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
	</target>

	<target name="jarmanifest" depends="library_jars, checkjar, buildnum" unless="main_jar_current">
			<echo message="Rebuilding jar manifest" />
			<copy file="${main_jar_manifest_template}" tofile="${main_jar_manifest}" overwrite="true" />
			<pathconvert property="runtime_classpath" pathsep=" ">
				<path>
					<fileset dir="${librarydir}/runlibs">
						<include name="*.jar" />
						<include name="**/*.jar" />
					</fileset>
				</path>
				<!--<map from="${runtimedir}/" to="" />-->
			</pathconvert>
			<replace file="${main_jar_manifest}">
				<replacefilter token="$BUILDNUM$" value="${build.number}" />
				<replacefilter token="$BUILDDATE$" value="${build_date}" />
				<replacefilter token="$RUNTIMECLASSPATH$" value="${runtime_classpath}" />
				<replacefilter token="$MAINCLASS$" value="${jar_main_class}" />
			</replace>
		</target>

	<target name="jar" depends="classes, jarmanifest, checkjar" unless="main_jar_current" description="Generate jar file">
		<jar destfile="${jarfile}" manifest="${main_jar_manifest}">
			<fileset refid="main_jar_contents" />
		</jar>
	</target>

	
	<target name="ontology-release-jarmanifest" depends="library_jars, checkjar, buildnum" unless="main_jar_current">
			<echo message="Rebuilding jar manifest for ontology release manager" />
	
		
		<copy file="${main_jar_manifest_template}" tofile="${main_jar_manifest}" overwrite="true" />
		<pathconvert property="runtime_classpath" pathsep=" ">
			<path>
				<fileset dir="${librarydir}/runlibs">
					<include name="*.jar" />
					<include name="**/*.jar" />
				</fileset>
			</path>
			<!--<map from="${runtimedir}/" to="" />-->
		</pathconvert>
		<replace file="${main_jar_manifest}">
			<replacefilter token="$BUILDNUM$" value="${build.number}" />
			<replacefilter token="$BUILDDATE$" value="${build_date}" />
			<replacefilter token="$RUNTIMECLASSPATH$" value="${runtime_classpath}" />
			<replacefilter token="$MAINCLASS$" value="owltools.ontologyrelease.OboOntologyReleaseRunner" />
		</replace>
		
</target>	
	
	<target name="ontology-release-jar" depends="classes, ontology-release-jarmanifest, checkjar" unless="main_jar_current" description="Generate jar file">
		<jar destfile="${ontologyreleasejarfile}" manifest="${main_jar_manifest}">
			<fileset refid="main_jar_contents" />
		</jar>
	</target>

	<target name="clean" description="Delete all rebuildable resources">
		<echo message="Deleting build directories..." />
		<delete dir="${outputdir}" />
		<delete file="${jarfile}" />
		<delete file="${main_jar_manifest}" />
		<delete file="docs/toc.html" />
		<delete dir="${apidoc_dest}" />
		<delete dir="${runtimedir}" />
		<delete dir="${release_path}" />
		<delete file="release_resources/README" />
	</target>

	<target name="scripts" description="Copy oboedit launch scripts to main dir so they can be run">
	  <copy todir=".">
	    <fileset dir="launch_scripts">
	      <include name="*" />
	    </fileset>
	  </copy>
	  <chmod file="oboedit" perm="ugo+x" />
	  <copy file="oboedit" tofile="oe-command-line" />
	  <chmod file="oe-command-line" perm="ugo+x" />
	</target>
	
	<!-- The target make-obo-release is deprecated. It is no more being used -->
	<!--
	<target name="make-obo-release" description="OBO Ontology release manager">
		<echo>************************Ontology Release Manager************************</echo>

		
		<taskdef name="oboproperty" classname="owltools.ontologyrelease.OboProperty" classpath="${jarfile}"/>		
		
		<oboproperty file="${oborelease.configfile}"></oboproperty>
		
		<taskdef name="getontologyid" classname="owltools.ontologyrelease.GetOntologyId" classpath="${jarfile}"/>		
		<taskdef name="buildversionid" classname="owltools.ontologyrelease.BuildVersionId" classpath="${jarfile}"/>		

	

		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd" />
		</tstamp>	
	
		<mkdir dir="${oborelease.outputdir}/${TODAY}"/>
		
		<mkdir dir="${oborelease.outputdir}"/>
		<mkdir dir="${oborelease.outputdir}/${TODAY}"/>
		<mkdir dir="${oborelease.outputdir}/subsets"/>
		<mkdir dir="${oborelease.outputdir}/extensions"/>
		<mkdir dir="${oborelease.outputdir}/releases"/>

		<getontologyid file="${oborelease.obofilepath}" />

		<mkdir dir="${oborelease.outputdir}/releases/${oborelease.ontologyid}"/>
		
		<buildversionid file="${oborelease.outputdir}/releases/${oborelease.ontologyid}/VERSION-INFO" />
		

		<echo>Ontology id is: ${oborelease.ontologyid}</echo>
		<echo>Version id is: ${oborelease.versionid}</echo>
		<echo>Generate Asserted: ${oborelease.asserted.option}</echo>
		<echo>Generate Simple: ${oborelease.simple.option}</echo>
		
		<java classname="owltools.ontologyrelease.OboOntologyReleaseRunner">
			
			<arg value="-outdir"/>
			<arg value="${oborelease.outputdir}/${TODAY}"/>
			<arg value="-reasoner"/>
			<arg value="${oborelease.reasoner}"/>
			<arg value="${oborelease.asserted.option}"/>
			<arg value="${oborelease.simple.option}"/>
			<arg value="-owlversion"/>
			<arg value="${oborelease.versionid}"/>
			<arg value="${oborelease.obofilepath}" />
			<classpath>
				<fileset dir="${librarydir}/runlibs">
					<include name="*.jar" />
				</fileset>

				<pathelement location="runtime/owltools.jar"></pathelement>
			</classpath>
		</java>
		
	
		<copy todir="${oborelease.outputdir}/releases/${oborelease.ontologyid}/${TODAY}">
			<fileset dir="${oborelease.outputdir}/${TODAY}"></fileset>
		</copy>

		
		<copy todir="${oborelease.outputdir}/releases/${oborelease.ontologyid}">
			<fileset dir="${oborelease.outputdir}/${TODAY}"></fileset>
		</copy>
		
		<copy file="${oborelease.outputdir}/releases/${oborelease.ontologyid}/VERSION-INFO"  todir="${oborelease.outputdir}/releases/${oborelease.ontologyid}/${TODAY}">
		</copy>
		
		<delete dir="${oborelease.outputdir}/${TODAY}"></delete>
		
		
		
	</target>
-->
	
</project>
