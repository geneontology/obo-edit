#!/bin/bash
# Set the classname of the Java class to execute
CLASSNAME=owltools.phenolog.Main

# Give a space-separated list of classpath items RELATIVE TO THE CURRENT SCRIPT
# These will be resolved into absolute pathnames
# Wildcards are allowed
CLASSPATH_RELATIVE=../runtime/*.jar

# If literal classpath values are needed, uncomment the line below
# This can be useful if the classpath contains URLs
# CLASSPATH_LITERAL=""

# To set a specific default Java path, set the JAVAPATH variable below.
# This value can be overridden with the -Jvm= option.
# If JAVAPATH is not set, the script will use whatever version of Java is on the
# path. If there is no copy of Java on the path, the JAVA_HOME environment
# variable will be used. If that fails, we just use "java" in the hopes that the
# failure message will make a little more sense.
# JAVAPATH="java"

PATH_SEP=":"

JAVAARGS=" "
CMDARGS=" "

PATH_TO_ME=`which $0`;

#Now see if the path is actually a symbolic link. If it is, set TEMP
#to true
TEMP=`ls -l $PATH_TO_ME | sed -e "s/.* -> \(.*\)/true/g"`
if [ -z "$TEMP" ]
then
   TEMP='false';
fi

#While we keep finding symbolic links...
while [ "$TEMP" = "true" ]
do
   #Parse the ls output and set PATH_TO_ME to the actual location of the
   #symbolic link
   PATH_TO_ME=`ls -l $PATH_TO_ME | sed -e "s/.* -> \(.*\)/\1/g"`

   TEMP=`ls -l $PATH_TO_ME | sed -e "s/.* -> \(.*\)/true/g"`
   if [ -z "$TEMP" ]
   then
      TEMP='false'
   fi
done

#If PATH_TO_ME is a relative link, set TEMP to true, otherwise set
#TEMP to false
TEMP=`echo $PATH_TO_ME | sed -e "s/^\/.*/true/g"`
if [ -z "$TEMP" ]
then
   TEMP='false'
fi

#If PATH_TO_ME was a relative link, change it to an absolute reference
if [ $TEMP != 'true' ]
then
   PATH_TO_ME="$PWD/$PATH_TO_ME"
fi

SCRIPTNAME=`echo $PATH_TO_ME | sed -e "s/.*\/\(.*\)/\1/g"`

#Remove the name of this script from the end of the path
PATH_TO_ME=`echo $PATH_TO_ME | sed -e "s/\(.*\)\/.*/\1/g"`

if [ -e "$PATH_TO_ME/$SCRIPTNAME.vmoptions" ]
then
	VMOPTIONS=`cat $PATH_TO_ME/$SCRIPTNAME.vmoptions`
	for OPTION in "$VMOPTIONS"
	do
		JAVAARGS="$JAVAARGS '${OPTION}'"
	done
fi

for ARG in "$@"
do
	if [ "${ARG:0:5}" == "-Jvm=" ]
	then
		JAVAPATH=${ARG:6};
	else
		if [ "${ARG:0:2}" == "-J" ]
		then
			JAVAARGS="$JAVAARGS '${ARG:2}'"
		else
			CMDARGS="$CMDARGS '$ARG'"
		fi
	fi
	shift;
	
done

for ARG in "$CLASSPATH_RELATIVE"
do
	DEREFERENCED_CLASSPATH=`ls -1 -L $PATH_TO_ME/$ARG`
	for CP_ENTRY in $DEREFERENCED_CLASSPATH
	do
		if [ -z "$CLASSPATH" ]
		then
			CLASSPATH="$CP_ENTRY"
		else
			CLASSPATH="$CLASSPATH$PATH_SEP$CP_ENTRY"
		fi
	done
done

if [ -n "$CLASSPATH_LITERAL" ]
then
	for CP_ENTRY in $CLASSPATH_LITERAL
	do
		if [ -z "$CLASSPATH" ]
		then
			CLASSPATH="$CP_ENTRY"
		else
			CLASSPATH="$CLASSPATH$PATH_SEP$CP_ENTRY"
		fi
	done
fi

if [ -z "$JAVAPATH" ]
then
	JAVAPATH=`which java`
	if [ -z "$JAVAPATH" ]
	then
		if [ -n "$JAVA_HOME" && -e "$JAVA_HOME" ]
		then
			JAVAPATH=$JAVA_HOME/bin/java
		else
			JAVAPATH="java"
		fi
	fi
fi

echo CMDARGS=$CMDARGS

CMD="$JAVAPATH -d64 -Djava.library.path=$PATH_TO_ME/runtime -classpath $CLASSPATH -DlauncherDir=$PATH_TO_ME $JAVAARGS $CLASSNAME $CMDARGS"
echo $CMD
sh -c "$CMD"
