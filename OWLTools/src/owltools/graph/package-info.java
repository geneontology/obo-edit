/**
* <h2<OWLGraph formalism<h2>
 * 
 * An OWLOntology includes a set of named objects O, 
 * a set of class expressions X and a set of axioms A.
 * 
 * An OWLGraph is a graph consisting of nodes N, edges E and edge labels L
 * 
 * Each edge in E is a triple consisting of a source, a target and an edge
 * label. Unlike RDF, a label is a complex structure, and consists of a
 * distance value and one or more quantified relations. A quantified relation is
 * a subclass relation or a tuple <Property Quantifier>.
 * Quantifier = SOME | ALL | CARDINALITY(Min,Max)
 * 
 * N consists of O and X. N can be subdivided into named named objects and expressions,
 * No and Nx. 
 * 
 * First primitive edges are seeded:
 * 
 * OWL Axioms:
 * 
 * x SubClassOf y ==> Edge(x,subclass,y)
 * x EquivalentTo y ==> Edge(x,subclass,y)
 * 
 * OWL Expressions:
 * 
 * {p some x} ==> Edge({p some x}, <p some> x)
 * {p only x} ==> Edge({p only x}, <p only> x)
 * {x1 and x2 ... xn} ==> Edge({...}, subclass, x1), ..., Edge({...}, subclass, xn)
 * 
 * named node edges are generated by finding all minimal paths between all named
 * nodes. QRs are concatenated, but subclass edges are eliminated.
 * 
 * EXAMPLE
 * foo SubClassOf r some a ==> 
 * EdgeP(foo,sub,{r some a}),EdgeP({r some a},<r some>,a) ==>
 * EdgeN(foo,<r some>,a)
 * 
 * 
 * EXAMPLE
 * foo EquivalentTo (a and (r some (s some b))) ==>
 *   Edge(foo,subclass,a)
 *   Edge(foo,<r some><s some>,b) 
 *   
 * The graph closure can be calculated using a composition table that collapses
 * sequences of QRs together:
 * 
 * sub * sub --> sub
 * sub * <r some> --> <r some>
 * <r some> * sub --> <r some>
 * sub * <r all> --> <r all>
 * <r all> * sub --> <r all>
 * <r some> * <r some> --> <r some> condition: TransitiveProperty(r)
 * <r1 some> * <r2 some> * ... * <rn some> --> 
 *     <r some> condition: SubPropertyOf( PropertyChain(r1 .. rn) r)
 *     
 *  TODO: options for including closure with complementation
 *  
 *  if the combination is not found then the QRs are concatenated
 *     
 *  TODO: delegate closure code to a separate class   
 *   * 
 * @see <a href="http://wiki.geneontology.org/index.php/OWLTools">OWLTools</a> for more context
 */
package owltools.graph;

import owltools.graph.OWLGraphWrapper;
import owltools.gfx.OWLGraphLayoutRenderer;
