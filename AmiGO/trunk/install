#!/usr/bin/perl -w
####
#### NODE: ???
#### TODO: ???
#### BUG: ???
####

use utf8;
use strict;
use Config::YAML;
use File::Basename;
use File::Find;
use Cwd;
use Data::Dumper;
use vars qw(
	     $opt_h
	     $opt_v
	     $opt_g
	     $opt_e
	     $opt_d
	     $opt_b
	  );
use Getopt::Std;


## Since internal checks are done, get ready for user input.
getopts('hvgedb');

## Embedded help through perldoc.
if( $opt_h ){
  system('perldoc', __FILE__);
  exit 0;
}

## Empty init (helps later scoping fun).
my @args = ();

## Check our options.
ll("Will print verbose messages.");
if ( $opt_e ) {
  ll("Will also install experimental binaries and executables.");
}
if ( $opt_g ) {
  ll("Will also install GOOSE and Gannet.");
}
if ( $opt_d ) {
  ll("Will also create documentation using Natural Docs.");
}
if ( $opt_b ) {
  ll("Will do what is necessary to just produce a bundle.");
}

## First check that we are in the proper directory. Installation
## should only occur in the top directory.
if ( ! -f "./scripts/version.pl" ||
     ! -f "./scripts/simulate.pl" ||
     ! -f "./conf/.initial_values.yaml" ) {
  ll("This does not seem to be the base AmiGO directory!");
  ll("Please run \"install\" from the base AmiGO directory.");
  exit 0;
}

###
### Get oriented.
###

my $amigo_base = getcwd();

## Start a little YAMLing.
my $amigo_vars = $amigo_base . "/conf/.initial_values.yaml";
my $amigo_conf = $amigo_base . "/conf/amigo.yaml";
my $yconf = Config::YAML->new(config => $amigo_vars, output => $amigo_conf);

ll("Looking for an already made amigo.yaml configuration file...");
if( -e $amigo_conf && -f $amigo_conf && -R $amigo_conf ) {
  ll("Found it! Will use values from $amigo_conf...");
  $yconf->read($amigo_conf);
}else{
  ll("None found, will make a new one at $amigo_conf.");
}

## Check and see if AMIGO_ROOT is defined. If not, go ahead and take a
## guess at it.
if( ! $yconf->{AMIGO_ROOT}{value} ){
  ll("Guessing the location of AmiGO\'s root directory...");
  $yconf->{AMIGO_ROOT}{value} = $amigo_base;
}

## Always want the writeback as the values in amigo.yaml will always
## supersede the ones in the initial file.
$yconf->write();

## Check that the configuration file has at least been minimally
## altered.
#ll(Dumper($yconf));
#ll("yc: " . $yconf->{AMIGO_CONFIGURED}{value});
if( int($yconf->{AMIGO_CONFIGURED}{value}) ){
  ll("AmiGO configured, will proceed...");
}else{
  ll("AmiGO not yet configured, see INSTALL.txt.");
  die "AmiGO not yet configured, see INSTALL.txt";
}

###
### Fold the YAML values into our local environment.
###

my %env_conf;

## TODO: could do simple validation in here...
## Roll into env_conf.
for my $var (keys %$yconf){
  ## Check that it is a real var, and not Config::YAML overhead.
  #if( $yconf->{$var} ){
  if( $yconf->{$var} && ref($yconf->{$var}) eq 'HASH' ){
    my $var_type = $yconf->{$var}{type};
    if( $var_type eq 'boolean' ||
	$var_type eq 'integer' ||
	$var_type eq 'number' ){
      $env_conf{$var} = int($yconf->{$var}{value});
    # }elsif( $var_type eq 'list' ){
    #   $env_conf{$var} = '["' . join('", "', @{$yconf->{$var}{value}}) . '"]';
    }else{
      $env_conf{$var} = $yconf->{$var}{value};
    }
  }
}

## As a convenience, let's switch the amigo_beta new_value on the "-e"
## flag. This will tie installation and experimental.
if( $opt_e ){
  $env_conf{AMIGO_BETA} = 1;
}

###
### We now have as much information as we're going to get about the
### wanted environment, so let's make new (synthetic) variables,
### directories.
###

## Htdocs root directory for AmiGO on the filesystem.
$env_conf{AMIGO_HTDOCS_ROOT_DIR} =
  eval {
    my $foo = '';
    ( $foo = $env_conf{AMIGO_HTDOCS_PARTIAL_PATH} ) =~ s/\/$//;
    $foo; } . '/' . $env_conf{AMIGO_PROJECT_NAME};
safe_make_dir( $env_conf{AMIGO_HTDOCS_ROOT_DIR} );

## CGI root directory for AmiGO on the filesystem.
$env_conf{AMIGO_CGI_ROOT_DIR} =
  eval {
    my $foo = '';
    ( $foo = $env_conf{AMIGO_CGI_PARTIAL_PATH} ) =~ s/\/$//;
    $foo; } . '/' . $env_conf{AMIGO_PROJECT_NAME};
safe_make_dir( $env_conf{AMIGO_CGI_ROOT_DIR} );

## AmiGO CGI URL.
$env_conf{AMIGO_CGI_URL} =
  eval {
    my $foo = '';
    ( $foo = $env_conf{AMIGO_CGI_PARTIAL_URL} ) =~ s/\/$//;
    $foo; } . '/' . $env_conf{AMIGO_PROJECT_NAME};

## URL for AmiGO services.
$env_conf{AMIGO_SERVICE_URL} = $env_conf{AMIGO_CGI_URL} . '/aserve';

## URL for the public production AmiGO.
$env_conf{AMIGO_PUBLIC_CGI_URL} =
  eval {
    my $foo = '';
    ( $foo = $env_conf{AMIGO_PUBLIC_CGI_PARTIAL_URL} ) =~ s/\/$//;
    $foo; } . '/amigo';

## Root AmiGO URL.
$env_conf{AMIGO_HTML_URL} =
  eval {
    my $foo = '';
    ( $foo = $env_conf{AMIGO_HTDOCS_PARTIAL_URL} ) =~ s/\/$//;
    $foo; } . '/' . $env_conf{AMIGO_PROJECT_NAME};

## Image URL and dir.
$env_conf{AMIGO_IMAGE_DIR} =
  $env_conf{AMIGO_HTDOCS_ROOT_DIR} . '/images';
$env_conf{AMIGO_IMAGE_URL} =
  $env_conf{AMIGO_HTML_URL} . '/images';

## A place for caching databases.
$env_conf{AMIGO_CACHE_DIR} =
  $env_conf{AMIGO_CGI_ROOT_DIR} . '/cache';
safe_make_dir( $env_conf{AMIGO_CACHE_DIR} );
make_permissive( $env_conf{AMIGO_CACHE_DIR} );

## A place for log files.
$env_conf{AMIGO_LOG_DIR} =
  $env_conf{AMIGO_CGI_ROOT_DIR} . '/log';
safe_make_dir( $env_conf{AMIGO_LOG_DIR} );
make_permissive( $env_conf{AMIGO_LOG_DIR} );

## Session top-level location.
$env_conf{AMIGO_SESSIONS_ROOT_DIR} =
  $env_conf{AMIGO_CGI_ROOT_DIR} .'/sessions';
safe_make_dir( $env_conf{AMIGO_SESSIONS_ROOT_DIR});
make_permissive( $env_conf{AMIGO_SESSIONS_ROOT_DIR});

## A place for scratch files.
$env_conf{AMIGO_SCRATCH_DIR} =
  $env_conf{AMIGO_CGI_ROOT_DIR} . '/sessions/scratch';
safe_make_dir( $env_conf{AMIGO_SCRATCH_DIR} );
make_permissive( $env_conf{AMIGO_SCRATCH_DIR} );

ll("Finish setting up the installation environment.");
ll("Starting installation...");

###
### Dump the synthetic environment into config.pl and move it over to
### the cgi-bin.
###

my $synth_conf_fname = $env_conf{AMIGO_CGI_ROOT_DIR} . '/config.pl';
create_synthetic_amigo_environmental_variables($synth_conf_fname, \%env_conf);
ll("Created synthetic variables and configuration file \"config.pl\".");

###
### Pull in the GO_xref.abbs file and turn it into a form that the
### linker can use (amigo.data.xrefs).
###

## 
my $xrefs_data_fname = 'javascript/lib/amigo/data/xrefs.js';
my $xrefs_url = 'http://www.geneontology.org/doc/GO.xrf_abbs';
xref_abbs_to_meta_js($xrefs_data_fname, $xrefs_url);
ll("Created GO XRefs JavaScript data file: \"$xrefs_data_fname\".");

###
### Dump the YAML GOlr config into a representation that we can use
### (amigo.data.golr).
###

## TODO/BUG: temporarily hard-coded--this needs to be dynamic, but for
## now we're just gunna write them in for debugging fun. Could
## probably just ignore everything but the schema conf.
my $yaml_path =  $env_conf{GO_YAML_LOCATION};
my $yaml_confs = [
		  $yaml_path . "ont-config.yaml",
		  $yaml_path . "bio-config.yaml",
		  $yaml_path . "ann-config.yaml",
		  $yaml_path . "ann_ev_agg-config.yaml"
		 ];
my $golr_data_fname = 'javascript/lib/amigo/data/golr.js';
golr_config_to_meta_js($golr_data_fname, $yaml_confs);
ll("Created GOlr JavaScript data file: \"$golr_data_fname\".");

###
### Dump the synthetic environment (config.pl), plus some extras, into
### a representation that we can use (amigo.data.server).
###

## Re-establish the environment.
require $synth_conf_fname;
my $amigo_env_fname = 'javascript/lib/amigo/data/server.js';
amigo_env_to_js($amigo_env_fname);
ll("Created AmiGO JavaScript meta file: \"$amigo_env_fname\".");

## Dump out the discoverable stats.
my $amigo_stats_fname = 'javascript/lib/amigo/data/statistics.js';
golr_stats_to_js($amigo_stats_fname);
ll("Created AmiGO JavaScript meta file: \"$amigo_stats_fname\".");

###
### TODO: Create the JS bundle that we'll use in our staging area.
###

## 
my $release_args =
  [
   './scripts/release-js.pl', '-v',
   '-i', 'scripts/release-js-file-map.txt',
   '-o', 'javascript/staging/amigo.js',
   '-n', 'amigo',
   '-d', 'javascript/lib/amigo',
   '-r', $env_conf{AMIGO_JS_VERSION}
  ];
my $rcmd = join(' ', @$release_args);
ll('System: ' . $rcmd . '"');
system(@$release_args) == 0 || die "system $rcmd failed: $?";

###
### Roll out the files in our repo to the appropriate directories on
### the server.
###

## Standard modules
my @mods = ();
push @mods,
  qw(
      amigo
      aserve
      gaffer
      visualize
   );

## Copy bulk experimental things over to the new directory.
if ( $opt_e ) {
  push @mods,
    qw(
	amigo_exp
	aserve_exp
	pgraph
     );
}

## Copy GOOSE and Gannet over on -g or -G.
if ( $opt_g ) {
  push @mods,
    qw(
	goose
	gannet
     );
}

## Install the desired modules from just above.
foreach( @mods ){
  ll("Install mod: $_.");
  force_copy(Cwd::cwd() . '/perl/bin/' . $_,
	     $env_conf{AMIGO_CGI_ROOT_DIR} . '/');
  make_executable( $env_conf{AMIGO_CGI_ROOT_DIR} . '/' . $_);
}

## Copy statics: css, images, our JS bundle, and the jQuery files.
ll("Install internal JS libraries.");
force_copy(Cwd::cwd() . '/css', $env_conf{AMIGO_HTDOCS_ROOT_DIR} );
force_copy(Cwd::cwd() . '/images', $env_conf{AMIGO_HTDOCS_ROOT_DIR} );
## The BBOPJS bundle.
force_copy($env_conf{GO_BBOPJS_LOCATION} . '/bbop.js',
	   $env_conf{AMIGO_HTDOCS_ROOT_DIR} . '/javascript/');
## Our AmiGO bundle.
force_copy(Cwd::cwd() . '/javascript/staging/amigo.js',
	   $env_conf{AMIGO_HTDOCS_ROOT_DIR} . '/javascript/');
## The AmiGO frontends.
force_copy(Cwd::cwd() . '/javascript/web/',
	   $env_conf{AMIGO_HTDOCS_ROOT_DIR} . '/javascript/');
## The jQuery and jQuery UI libraries.
force_copy(Cwd::cwd() . '/javascript/lib/com',
	   $env_conf{AMIGO_HTDOCS_ROOT_DIR} . '/javascript/');

# ll("Install GO JS libraries.");
# foreach my $jslib ('bbop', 'external', 'graph', 'newick_tree'){
#   force_copy($env_conf{GO_JS_ROOT} . '/lib/' . $jslib,
# 	     $env_conf{AMIGO_HTDOCS_ROOT_DIR} . '/javascript');
# }

## I guess we could make docs while we're here.
if( $opt_d ){
  my $docs_args = ['make', 'docs'];
  my $dcmd = join(' ', @$docs_args);
  ll('System: ' . $dcmd . '"');
  system(@$docs_args) == 0 || die "system $dcmd failed: $?";
}

###
### Finish.
###

## Done.
if( ! $opt_b ){
  print <<EOC;
Done.

Your new installation is at: $env_conf{AMIGO_CGI_URL}/amigo

You may use the refresh script (refresh.pl) with the "-r" flag to regularly
purge unneeded and old files generated while AmiGO is running.

The refresh.pl script has many other uses, please see the
documentation for flags that apply to you.

EOC
}

###
### Helper functions.
###

##
sub create_synthetic_amigo_environmental_variables {

  my $pconf_name = shift || die 'need file argument';
  my $env_conf_ptr = shift || die 'need env conf argument';
  my $env_conf = %$env_conf_ptr;

  ## Open file.
  open(FILE, ">$pconf_name");

  print FILE <<EOC;
############################
####
#### See INSTALL.txt on how to change these variables.
####
############################

EOC

  ##
  foreach ( keys %env_conf ) {

    my $syn = "\$ENV{" . $_. "}=";
    #if( $_ eq 'PATH' ){
    #  $syn .= $env_conf{$_};
    #}else{
    $syn .= "\'" . $env_conf{$_} . "\'";
    #}
    print FILE $syn . ";\n";
    #ll("Created: " . $syn);
  }

  ## End.
  print FILE <<EOC;

1;
EOC

  ## Close file.
  close(FILE);
  make_readable( $pconf_name );
}


## file: <local_js_tree>/lib/amigo/data/xrefs.js
## Taken from: ../../go-dev/trunk/amigo/scripts/make_dblinks.pl
sub xref_abbs_to_meta_js {

  my $js_file_str = shift || die "need a js file string or something";
  my $xrefs_url = shift || die "need a url for the GO.xrf_abbs file";

  ## 
  use lib getcwd() . '/perl/lib';

  ## Bring in necessaries.
  use AmiGO::External::Raw;
  use AmiGO::JavaScript;
  #use JSON::PP;
  use JSON::XS;

  my $core = AmiGO::JavaScript->new();

  ## Use external to get file.
  my $ext = AmiGO::External::Raw->new();
  my $abbs = $ext->get_external_data($xrefs_url);
  if( ! $abbs ){ die "Could not load external GO.xref_abbs file: $!"; }

  my $database_info = {};

  ## Split on two or more newlines.
  my @top_chunks = split /\n{2,}/s, $abbs;

  ## Split on newline.
  foreach my $middle_chunk_str (@top_chunks){
    my @middle_chunks = split /\n/s, $middle_chunk_str;

    ## Create an empty template for the kinds of things we might find
    ## and try add fill them in.
    my $tmp_data =
      {
       id => undef,
       abbreviation => undef,
       name => undef,
       fullname => undef,
       datatype => undef,
       generic_url => undef,
       url_syntax => undef,
       url_example => undef,
       uri_prefix => undef,
      };
    ## Split on ':' and trim; add it to the above template.
    foreach my $line (@middle_chunks){
      $line =~ /(.*)\:\s+(.*)/;
      my $tag = $1;
      my $val = $2;
      if( $tag ){
	$tmp_data->{$tag} = $val;
      }
    }

    # ## Try and create a function that produces the target url.
    # ## TODO: OR maybe not--better left to the linker code?
    # $tmp_data->{'function'} = undef;
    # if( $tmp_data->{url_syntax} ){
    #   my $url_syn = $tmp_data->{url_syntax};
    #   my ($shead, $stail) = split('[example_id]', $url_syn);
    #   if( $shead && $stail ){
    # 	$tmp_data->{'function'} =
    # 	  "function(in_id){ return '$shead' + in_id + '$stail'; }";
    #   }elsif( $shead ){
    # 	$tmp_data->{'function'} =
    # 	  "function(in_id){ return '$shead' + in_id; }";
    #   }else{
    # 	## Not enough information to produce a function.
    #   }
    # }

    ## If it looks like it has a key add it to the hash.
    if( $tmp_data->{abbreviation} ){
      my $key = lc($tmp_data->{abbreviation});
      $database_info->{$key} = $tmp_data;
      #ll("Added: $key");
    }
  }

  ###
  ### Conf to JS.
  ###

  my $js = JSON::XS->new()->pretty(1);
  #$js->allow_bignum(1); # if needed, go back to ::PP
  my $js_str = $js->encode($database_info);
  chomp $js_str;

  ## If the file is already there, blow it away.
  unlink $js_file_str if -f $js_file_str;
  open(FILE, ">$js_file_str") or die "cannot open $js_file_str: $!";

  ## 
  print FILE <<EOJS;
/* 
 * Package: xrefs.js
 * 
 * Namespace: amigo.data.xrefs
 * 
 * This package was automatically created during an AmiGO 2 installation
 * from the GO.xrf_abbs file at: "$xrefs_url".
 *
 * NOTE: This file is generated dynamically at installation time.
 * Hard to work with unit tests--hope it's not too bad. You have to
 * occasionally copy back to keep the unit tests sane.
 */

// All of the server/instance-specific meta-data.
bbop.core.require('bbop', 'core');
bbop.core.namespace('amigo', 'data', 'xrefs');

/*
 * Variable: xrefs
 * 
 * All the external references that we know about.
 */
amigo.data.xrefs = $js_str;
EOJS

  ## Close file.
  close(FILE);
  make_readable($js_file_str);
}


## file: <local_js_tree>/lib/amigo/data/golr.js
sub golr_config_to_meta_js {

  my $js_file_str = shift || die "need a js file string or something";
  my $yaml_confs = shift || die "need a bunch of yaml confs";
  my $rethash = {};

  ## 
  use lib getcwd() . '/perl/lib';

  ## Bring in necessaries.
  use AmiGO::JavaScript;
  #use JSON::PP;
  use JSON::XS;

  my $core = AmiGO::JavaScript->new();

  ## Force array ref.
  if( ref $yaml_confs ne 'ARRAY' ){
    $yaml_confs = [$yaml_confs];
  }

  ## Get all of the YAML files into a single data structure.
  foreach my $yaml_conf (@$yaml_confs){

    ## Read the config and pull the id.
    my $conf_hash = Config::YAML->new(config => $yaml_conf);
    my $conf_id = $conf_hash->{id};

    ## Make sure that the top level hash the required fields.
    $rethash->{ $conf_id } =
      $core->merge({
		    id => $conf_id,
		    searchable_extension => "_searchable",
		    weight => 0,
		    document_category => "",
		    boost_weights => "",
		    result_weights => "",
		    filter_weights => ""
		   }, $conf_hash);

    ## Also make sure that the default fields are there properly for
    ## each config.
    my $new_fields_hash = {};
    my $new_fields = [];
    foreach my $field (@{$rethash->{$conf_id}{fields}}){
      my $new_bit = $core->merge({
				  required => 'false',
				  cardinality => 'single',
				  searchable => 'false',
				  indexed => 'true',
				  transform => []
				 }, $field);
      $new_fields_hash->{$field->{'id'}} = $new_bit; # id better be defined...
      push @$new_fields, $new_bit;
    }
    $rethash->{$conf_id}{fields_hash} = $new_fields_hash;
    $rethash->{$conf_id}{fields} = $new_fields;
  }

  ###
  ### Conf to JS.
  ###

  my $js = JSON::XS->new()->pretty(1);
  #$js->allow_bignum(1); # if needed, go back to ::PP
  my $js_str = $js->encode($rethash);
  chomp $js_str;

  ## If the file is already there, blow it away.
  unlink $js_file_str if -f $js_file_str;
  open(FILE, ">$js_file_str") or die "cannot open $js_file_str: $!";

  ## 
  print FILE <<EOJS;
/* 
 * Package: golr.js
 * 
 * Namespace: amigo.data.golr
 * 
 * This package was automatically created during an AmiGO 2 installation
 * from the YAML configuration files that AmiGO pulls in.
 *
 * Useful information about GOlr. See the package <golr_conf.js>
 * for the API to interact with this data file.
 *
 * NOTE: This file is generated dynamically at installation time.
 * Hard to work with unit tests--hope it's not too bad. You have to
 * occasionally copy back to keep the unit tests sane.
 *
 * NOTE: This file has a slightly different latout from the YAML
 * configurations files--in addition instead of the fields
 * being in lists (fields), they are in hashes keyed by the
 * field id (fields_hash).
 */

// All of the server/instance-specific meta-data.
bbop.core.require('bbop', 'core');
bbop.core.namespace('amigo', 'data', 'golr');

/*
 * Variable: golr
 * 
 * The configuration for the data.
 * Essentially a JSONification of the OWLTools YAML files.
 * This should be consumed directly by <bbop.golr.conf>.
 */
amigo.data.golr = $js_str;
EOJS

  ## Close file.
  close(FILE);
  make_readable($js_file_str);
}

## file: <local_js_tree>/lib/amigo/data/server.js
sub amigo_env_to_js {

  my $file_str = shift || die 'need target file';

  ## 
  use lib getcwd() . '/perl/lib';
  require $env_conf{AMIGO_CGI_ROOT_DIR} . '/config.pl';

  ## Bring in necessaries.
  use AmiGO::JavaScript;
  #use JSON::PP;
  use JSON::XS;

  my $core = AmiGO::JavaScript->new();

  ## If the file is already there, blow it away.
  unlink $file_str if -f $file_str;
  open(FILE, ">$file_str") or die "cannot open $file_str: $!";

  # $core->kvetch('file_str: ' . $file_str);
  # $core->kvetch('core: ' . $core);

  ## Get the basics. Should be fast as they are already cached in
  ## AmiGO.pm.
  # my $evcodes = $core->evidence_codes();
  # my $species = $core->species();
  # my $sources = $core->source();
  # my $gptypes = $core->gptype();
  # my $onts = $core->ontology();
  # my $relname = $core->release_name();
  # my $reltype = $core->release_type();
  my $evcodes = {};
  my $species = {};
  my $sources = {};
  my $gptypes = {};
  my $onts = {};
  #my $relname = '';
  #my $reltype = '';

  ## Transform them into something a little more useful for the client
  ## (i.e. arrayified and ordered instead of the straight hash refs
  ## that we have.
  my $fix = sub {

    my $thing = shift;

    ## Arrayify.
    $thing = [map { [$thing->{$_} , $_ ] } keys %$thing];

    ## Sort on key.
    $thing = [sort{
      #print STDERR $$a[0]. ' vs ' . $$b[0] . "\n";
      return $$a[0] cmp $$b[0];
    } @$thing];

    return $thing;
  };

  ## Assemble all meta information.
  my $ret =
    {
     ## Variables.
     app_base => $core->amigo_env('AMIGO_CGI_URL'),
     golr_base => $core->amigo_env('AMIGO_PUBLIC_GOLR_URL'),
     html_base => $core->amigo_env('AMIGO_HTML_URL'),
     image_base => $core->amigo_env('AMIGO_IMAGE_URL'),
     term_regexp => $core->amigo_env('AMIGO_TERM_REGEXP'),

     ## Data.
     evidence_codes => $evcodes,
     species_map => $species,
     species => &$fix($species),
     sources => &$fix($sources),
     gp_types => &$fix($gptypes),
     ontologies => &$fix($onts),
     #release_name => $relname,
     #release_type => $reltype,

     ## Resources (note naming convention).
     bbop_img_star => $core->get_image_resource('star'),
    };

  ##
  #my $js = JSON::PP->new();
  my $js = JSON::XS->new();
  #$js->allow_bignum(1); # if needed, go back to ::PP
  my $json_str = $js->encode($ret);

  ##
  sub var_gen {
    my $key = shift || '';
    return "    var $key = meta_data.$key;";
  }
  sub getter_gen {
    my $key = shift || '';
    return "    this.$key = function(){ return $key; };";
  }
  my $acc_strings = ();
  foreach my $key (keys %$ret){
    push @$acc_strings, '    /*';
    push @$acc_strings, '     * Function: ' . $key;
    push @$acc_strings, '     * ';
    push @$acc_strings, '     * Access to AmiGO variable ' . $key . '.';
    push @$acc_strings, '     * ';
    push @$acc_strings, '     * Parameters:';
    push @$acc_strings, '     *  n/a';
    push @$acc_strings, '     * ';
    push @$acc_strings, '     * Returns:';
    push @$acc_strings, '     *  string';
    push @$acc_strings, '     */';
    push @$acc_strings, var_gen($key);
    push @$acc_strings, getter_gen($key);
    push @$acc_strings, '';
  }
  my $acc_string = join("\n", @$acc_strings);

  ##
  print FILE <<EOJS;
/*
 * Package: server.js
 * 
 * Namespace: amigo.data.server
 * 
 * This package was automatically created during an AmiGO 2 installation.
 * 
 * Purpose: Useful information about GO and the AmiGO installation.
 *          Also serves as a repository and getter for web
 *          resources such as images.
 * 
 * Requirements: amigo.js for bbop.amigo namespace.
 * 
 * NOTE: This file is generated dynamically at installation time.
 *       Hard to work with unit tests--hope it's not too bad.
 *       Want to keep this real simple.
 */

// Module and namespace checking.
bbop.core.require('bbop', 'core');
bbop.core.namespace('amigo', 'data', 'server');

/*
 * Constructor: server
 * 
 * The configuration for the server settings.
 * Essentially a JSONification of the config.pl AmiGO 2 file.
 * 
 * Arguments:
 *  n/a
 */
amigo.data.server = function(){

    // All of the server/instance-specific meta-data.
    var meta_data = $json_str;

    ///
    /// Break out the data and various functions to access them...
    ///

$acc_string

    // Does it look like a term?
    var tre_str = meta_data.term_regexp;
    var tre = new RegExp(tre_str);

    /*
     * Function: term_id_p
     * 
     * True or false on whether or not a string looks like a GO term id.
     * 
     * Parameters:
     *  term_id - the string to test
     * 
     * Returns:
     *  boolean
     */
    this.term_id_p = function(term_id){
       var retval = false;
       if( tre.test(term_id) ){
          retval = true;
       }
       return retval;
    };

    /*
     * Function: get_image_resource
     * 
     * Get a named resource from the meta_data hash if possible.
     * 
     * Parameters:
     *  resource - the string id of the resource
     * 
     * Returns:
     * string (url) of resource
     */
    this.get_image_resource = function(resource){

       var retval = null;
       var mangled_res = 'bbop_img_' + resource;

       if( meta_data[mangled_res] ){
          retval = meta_data[mangled_res];
       }
       return retval;
    };
};
EOJS

  ## Close file.
  close(FILE);
  make_readable($file_str);
}

## TODO: This might be better served in the make file.
## file: <local_js_tree>/lib/amigo/data/statistics.js
sub golr_stats_to_js {

  my $file_str = shift || die 'need target file';

  ## Generate the static data.
  print STDOUT 'pwd: ' . `pwd` . "\n";
  my $ann_src_str = `cat ./staging/ann-source.dat` || '""';
  my $ann_ev_str = `cat ./staging/ann-evidence.dat` || '""';
  my $ann_overview_str = `cat ./staging/ann-overview.dat` || '""';
  chomp($ann_src_str);
  chomp($ann_ev_str);
  chomp($ann_overview_str);

  # ## Make sure we can get our own libs.
  # use lib getcwd() . '/perl/lib';
  # ## Bring in necessaries.
  # use AmiGO::JavaScript;
  # #use JSON::PP;
  # use JSON::XS;
  # my $core = AmiGO::JavaScript->new();

  ## If the file is already there, blow it away.
  unlink $file_str if -f $file_str;
  open(FILE, ">$file_str") or die "cannot open $file_str: $!";

  # $core->kvetch('file_str: ' . $file_str);
  # $core->kvetch('core: ' . $core);

  ##
  print FILE <<EOJS;
/*
 * Package: statistics.js
 * 
 * Namespace: amigo.data.statistics
 * 
 * This package was automatically created during an AmiGO 2 installation.
 * 
 * Purpose: Useful numbers about the current data in the store.
 * 
 * Requirements: amigo.js for bbop.amigo namespace.
 * 
 * NOTE: This file is generated dynamically at installation time.
 *       Hard to work with unit tests--hope it's not too bad.
 *       Want to keep this real simple.
 */

// Module and namespace checking.
bbop.core.require('bbop', 'core');
bbop.core.namespace('amigo', 'data', 'statistics');

/*
 * Variable: annotation_evidence
 * 
 * TBD
 */
amigo.data.statistics.annotation_source = $ann_src_str;

/*
 * Variable: annotation_source
 * 
 * TBD
 */
amigo.data.statistics.annotation_evidence = $ann_ev_str;

/*
 * Variable: annotation_overview
 * 
 * TBD
 */
amigo.data.statistics.annotation_overview = $ann_overview_str;
EOJS

  ## Close file.
  close(FILE);
  make_readable($file_str);
}


##
sub safe_make_dir {

  my $dir_to_make = shift || die "no first arg";

  ## Make the new session directory if necessary.
  if ( ! -e  $dir_to_make ) {
    my @args = ("mkdir", $dir_to_make);
    ll("System: \"@args\"") if ! $opt_b;
    system(@args) == 0 || die "system @args failed: $?" if ! $opt_b;
  }
}


##
sub force_copy {

  my $from = shift || die "no first arg";
  my $to = shift || die "no second arg";

  #my @args = ("cp", "-r", "-f", $from, $to);
  my @args = ("rsync", "-r",
	      "--exclude=.svn",
	      "--exclude=.emacs.desktop",
	      $from, $to);
  ll("System: \"@args\"") if ! $opt_b;
  system(@args) == 0 || die "System \"@args\" failed: $?" if ! $opt_b;
}


##
sub make_executable {

  my $file = shift || die "no first arg";

  my @args = ("chmod", "a+x", $file);
  ll("System: \"@args\"") if ! $opt_b;
  system(@args) == 0 || die "System \"@args\" failed: $?" if ! $opt_b;
}


##
sub make_permissive {

  my $file = shift || die "no first arg";

  my @args = ("chmod", "777", $file);
  ll("System: \"@args\"") if ! $opt_b;
  system(@args) == 0 || die "System \"@args\" failed: $?" if ! $opt_b;
}


##
sub make_readable {

  my $file = shift || die "no first arg";

  my @args = ("chmod", "644", $file);
  ll("System: \"@args\"") if ! $opt_b;
  system(@args) == 0 || die "System \"@args\" failed: $?" if ! $opt_b;
}


## Make all of the old .cgi filenames accessible through no-cgi names,
## if applicable.
sub make_non_cgi_link {

  my $file = shift || die "no first arg";

  if ( $file =~ /(.*)\.cgi$/ ) {
    my @args = ("ln", "-f", "-s", $file, $1);
    ll("Old CGI link: new link from $1 to $file") if ! $opt_b;
    system(@args) == 0 || die "System \"@args\" failed: $?" if ! $opt_b;
  }
}


## Just a little printin' when feeling verbose.
sub ll {
  my $str = shift || '';
  print $str . "\n" if $opt_v;
}


## Just a little printin' when feeling afraid.
sub ww {
  my $str = shift || '';
  print STDERR $str . "\n";
}



=head1 NAME

install

=head1 SYNOPSIS

install [-h] [-v] [-g] [-e] [-t]

=head1 DESCRIPTION

This is the main AmiGO installation script--it moves files to the
proper location with the proper permissions.

Please see README.txt and INSTALL.txt for more details.

=head1 OPTIONS

=over

=item -v

Enable more verbose messages. This is useful for checking installation errors.

=item -b

Do just enough to produce a JS bundle and documentation; will not make
installation filesystem changes beyond the local configuration files
and the staging area. Could maybe be used as a gross test run.

=item -e

Also install experimental CGIs, binaries, and configs.

=item -g

Also install GOOSE and Gannet.

=item -d

Also generate documentation.

=item -b

Ignore all other flags, no not install anything, just do what is
necessary to create a JS bundle for this installation and put it into
staging.

=back

=head1 SEE ALSO

http://wiki.geneontology.org/index.php/AmiGO_Manual:_Installation

=cut
