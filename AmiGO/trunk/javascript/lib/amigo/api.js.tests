////
//// Some unit testing for api.js
////
//// Usage:
////    Command line: "js -f api.js.tests"
////    Interactive: "js -f api.js.tests -f -"
////


// Load testing.
load('../../../../../javascript/trunk/staging/bbop.js');
var mr_t = new bbop.test();

// Correct environment.
load('api.js');

///
/// Start unit testing.
///

// Constructors.
var api = new amigo.api();
mr_t.is_defined(api);

// Test data. TODO: Split to separate file.
(function(){
    var d0 =
	{"success": 1,
	 "type": 'foo',
	 "errors": [],
	 "results": {"default": []}};
    var d1 =
	{"success": 1,
	 "errors": [],
	 "results": {"default": [],
		     "new": [],
		     "foo": [
			 {"date": "2009-05-21 01:39:07",
			  "name": "",
			  "type": "term",
			  "key": "GO:123"},
			 {"date":" 2009-05-21 01:39:24",
			  "name": "",
			  "type": "term",
			  "key": "GO:456"}
		     ]
		    }};
    var d2 =
	{"success": 0,
	 "errors": ["test error 1",
		    "test error 2"],
	 "results": {"default": [],
		     "new": []}};
    var d3 =
	{"errors": ["test error 1"],
	 "results": {"default": [],
		     "new": []}};
    var s0 = // Okay JSON string.
    '{"success": 1, "errors": [], "results": {"default": [], "new": [], "foo": [{"date": "2009-05-21 01:39:07", "name": "", "type": "term", "key": "GO:123"},{"date":" 2009-05-21 01:39:24", "name": "", "type": "term", "key": "GO:456"} ] }}';
    var s1 = // Borked JSON string.
    '{"success": 1, "errors": [], "results": {"default": [], "new": [], "foo": [{"date": "2009-05-21 01:39:07", "name": "", "type": "term", "key": "GO:123"},{"date":" 2009-05-21 01:39:24", "name": "", "type": "term", "key": "GO:456"} }}';
    
    // Response success.
    mr_t.is_same_atom(true, api.response.success(d0) , '');
    mr_t.is_same_atom(true, api.response.success(d1) , '');
    mr_t.is_same_atom(false, api.response.success(d2) , '');
    mr_t.is_same_atom(false, api.response.success(d3) , '');

    // Right type?
    mr_t.is_same_atom('foo', api.response.type(d0) , '');
    mr_t.is_same_atom('unknown', api.response.type(d1) , '');
    
    // Find error messages?
    mr_t.is_same_atom(0, api.response.errors(d0).length , '');
    mr_t.is_same_atom(0, api.response.errors(d1).length , '');
    mr_t.is_same_atom(2, api.response.errors(d2).length);
    mr_t.is_same_atom(1, api.response.errors(d3).length);

    // // JSON parser...
    // var good = bbop.json.parse(s0);
    // mr_t.is_defined(good);
    // mr_t.is_same_atom('GO:456', good.results.foo[1].key,
    // 		  'parsed object has correct key');

    // // Check a parse gone bad.
    // var bad = null;
    // try {
    // 	bad = bbop.json.parse(s1);
    // }catch(err){
    // 	mr_t.is_same_atom(1, 1, 'should be error on bad parse');    
    // }finally{
    // 	if( bad ){
    // 	    mr_t.is_same_atom(1, 2, 'bad parse should not generate object');    
    // 	}
    // }
})();

// Check randomness.
(function(){
    mr_t.is_same_atom(10, bbop.core.randomness().length);
    mr_t.is_same_atom(1, bbop.core.randomness(1).length);
    mr_t.is_same_atom(10, bbop.core.randomness(10).length);
    mr_t.is_same_atom(100, bbop.core.randomness(100).length);
    mr_t.is_true(bbop.core.randomness(10) != bbop.core.randomness(10),
		 "checking entropy in universe");
})();

// Check urls.
(function(){
    // Do some link testing.
    mr_t.is_same_url(api.completion({}),
		     "completion?narrow=false&ontology=&format=amigo&type=general&query=",
		     "link compare testing 1");
    // Different order.
    mr_t.is_same_url(api.completion({}),
		     "completion?narrow=false&ontology=&type=general&format=amigo&query=",
		     "link compare testing 2");
    // Just different.
    mr_t.is_different_url(api.completion({}),
			  "completion?type=general&format=opensearch&query=",
			  "link compare testing 3");
    // Again just different.
    mr_t.is_different_url(api.completion({}),
			  "completion?type=general&format=&query=",
			  "link compare testing 4");
    
    // A little real link testing.
    mr_t.is_same_url(api.completion({type:'term', format:'opensearch'}),
		     "completion?narrow=false&ontology=&type=term&format=opensearch&query=",
		     "completion api test 1");
})();

///
/// End unit testing.
///

// Final report.
mr_t.report();

///
/// See how kvetch behaves.
///

// amigo.kvetch("FAIL: You should *not* see this string (1)!");
// amigo.DEBUG = true;
// //amigo.kvetch("[You should see this string--please ignore.]");
// amigo.DEBUG = false;
// amigo.kvetch("FAIL: You should *not* see this string (2)!");
