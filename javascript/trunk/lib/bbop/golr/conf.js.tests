////
//// Some unit testing for package conf.js
////
//// Usage:
////    Command line: "js -f conf.js.tests"
////    Interactive: "js -f conf.js.tests -f -"
////
//// To get fresh data from an AmiGO install (must be done periodically):
////    make refresh
////

// Load testing.
load('../test.js');
var mr_t = new bbop.test();

// Correct environment.
load('../core.js');
load('../logger.js');
load('../registry.js');
load('conf.js');

// Get some test data as well.
// This defines "bbop.golr.golr_meta".
load('../../../_data/golr.js');

///
/// Start unit testing.
///

// bbop.golr.class_field
(function(){

     // Absolute basics.
     var fconf = amigo.data.golr['bbop_ont']['fields_hash']['source'];
     var cf = new bbop.golr.conf_field(fconf);
     mr_t.is_same_atom(cf._is_a, 'bbop.golr.conf_field', "me");
     
     // Simple getters.
     mr_t.is_same_atom("Source", cf.display_name(), "display_name");
     mr_t.is_same_atom("Term namespace.",
		       cf.description(), "desc");
     mr_t.is_same_atom("source", cf.id(), "id");
     mr_t.is_same_atom(false, cf.searchable(), "searchable");
     mr_t.is_same_atom(false, cf.required(), "required");
     mr_t.is_same_atom(false, cf.is_multi(), "multi?");
     mr_t.is_same_atom(false, cf.is_fixed(), "fixed?");
     mr_t.is_same_atom("getNamespace", cf.property(), "prop");
 })();

// bbop.golr.conf_class
(function(){

     // Absolute basics.
     var cc = new bbop.golr.conf_class(amigo.data.golr['bbop_ann']);
     mr_t.is_same_atom(cc._is_a, 'bbop.golr.conf_class', "me");
     
     // Simple getters.
     mr_t.is_same_atom("Annotations", cc.display_name(), "display_name");
     mr_t.is_same_atom("A description of annotations for GOlr and AmiGO.",
		       cc.description(), "desc");
     mr_t.is_same_atom(20, cc.weight(), "w");
     mr_t.is_same_atom("bbop_ann", cc.id(), "id");
     mr_t.is_same_atom('_searchable', cc.searchable_extension(),
		       "searchable_extension");
     
     // More complicated.
     mr_t.is_same_atom(null, cc.get_field('blork'), "s1");
     mr_t.is_same_atom('source', cc.get_field('source').id(), "s2");
     
     // Look at weights individually.
     var boosts = cc.get_weights('boost');
     mr_t.is_same_atom(2.0, boosts['bioentity'], "boost 1");
     mr_t.is_same_atom(null, boosts['ashdlas'], "no boost");

     // Look at weights as a group.
     var ordered_filter_list_5 = cc.field_order_by_weight('filter', 5.0);
     mr_t.is_same_atom(3, ordered_filter_list_5.length, "ofl5 len");
     mr_t.is_same_atom('source', ordered_filter_list_5[0], "ofl5 first");
     mr_t.is_same_atom('taxon_label', ordered_filter_list_5[2], "ofl5 last");
     var ordered_filter_list_all = cc.field_order_by_weight('filter');
     mr_t.is_same_atom(5, ordered_filter_list_all.length, "ofla len");
     mr_t.is_same_atom('source', ordered_filter_list_all[0], "ofla first");
 })();

// Top-level bbop.golr.conf
(function(){

     // Absolute basics.
     var c = new bbop.golr.conf(amigo.data.golr);
     mr_t.is_same_atom(c._is_a, 'bbop.golr.conf', "me");

     // Simple getters.
     mr_t.is_same_atom("Ontology", c.get_class('bbop_ont').display_name(),
		       "display_name");
     mr_t.is_same_atom(4, c.get_classes().length, "num classes");
 })();

///
/// End unit testing.
///

// Final report.
mr_t.report();
