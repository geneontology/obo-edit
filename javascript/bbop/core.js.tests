////
//// Some unit testing for core.js
////
//// Usage:
////    Command line: "js -f core.tests.js"
////    Interactive: "js -f core.tests.js -f -"
////


// Load testing.
load('test.js');
var mr_t = new bbop.test();

// Correct environment.
load('core.js');

///
/// Start unit testing.
///

// Cloning.
var o1 = {'foo': 1, 'bar': 2};
var o2 = bbop.core.clone(o1);
mr_t.is_same_hash(o1, o2);

// Namespace generation.
bbop.core.namespace("happy", "bar");
mr_t.is_defined(happy.bar, "made namespace");
happy.bar.prop = true;
mr_t.is_same_atom(true, happy.bar.prop, "added prop to new NS");

// each: array iterator.
(function(){
    var sum_val = 0;
    var sum_i = 0;
    var sum_array = [1, 2, 3];
    function sum_add(in_num, in_index){
	sum_val = sum_val + in_num;
	sum_i = in_index;
    }
    bbop.core.each(sum_array, sum_add);
    mr_t.is_same_atom(6, sum_val, "iterated value");
    mr_t.is_same_atom(2, sum_i, "iterated index");
})();

// each: hash iterator.
(function(){
    var sum_val = 0;
    var sum_s = '';
    var sum_hash = {'dog': 2, 'cat': 4, 'cow': 6};
    function sum_add(in_key, in_val){
	sum_val = sum_val + in_val;
	sum_s = sum_s + in_key;
    }
    bbop.core.each(sum_hash, sum_add);
    mr_t.is_same_atom(9, sum_s.length, "iterated key");
    mr_t.is_same_atom(12, sum_val, "iterated value");
})();

// get_keys.
(function(){

    var hash1 = {'foo': 3};
    var keys1 = bbop.core.get_keys(hash1);
    mr_t.is_same_atom(1, keys1.length, "got keys1 len");
    mr_t.is_same_atom('foo', keys1[0], "got keys1 str 0");

    var hash2 = {'foo': 3, 'bar': 4};
    var keys2 = bbop.core.get_keys(hash2);
    keys2.sort();
    mr_t.is_same_atom(2, keys2.length, "got keys2 len");
    mr_t.is_same_atom('bar', keys2[0], "got keys2 str 0");
    mr_t.is_same_atom('foo', keys2[1], "got keys2 str 1");
})();

// is_array.
(function(){
    var t1 = 1;
    var t2 = 'moo';
    var t3 = [];
    var t4 = {};
    var t5 = ['moo'];
    var t6 = {'cow': 'moo'};
    var t7 = function(){ return true; };

    mr_t.is_false(bbop.core.is_array(t1), "correctly is_array t1");
    mr_t.is_false(bbop.core.is_array(t2), "correctly is_array t2");
    mr_t.is_true(bbop.core.is_array(t3), "correctly is_array t3");
    mr_t.is_false(bbop.core.is_array(t4), "correctly is_array t4");
    mr_t.is_true(bbop.core.is_array(t5), "correctly is_array t5");
    mr_t.is_false(bbop.core.is_array(t6), "correctly is_array t6");
    mr_t.is_false(bbop.core.is_array(t7), "correctly is_array t7");
})();

// is_hash.
(function(){
    var t1 = 1;
    var t2 = 'moo';
    var t3 = [];
    var t4 = {};
    var t5 = ['moo'];
    var t6 = {'cow': 'moo'};
    var t7 = function(){ return true; };

    mr_t.is_false(bbop.core.is_hash(t1), "correctly is_hash t1");
    mr_t.is_false(bbop.core.is_hash(t2), "correctly is_hash t2");
    mr_t.is_false(bbop.core.is_hash(t3), "correctly is_hash t3");
    // ...?
    mr_t.is_true(bbop.core.is_hash(t4), "correctly is_hash t4");
    mr_t.is_false(bbop.core.is_hash(t5), "correctly is_hash t5");
    mr_t.is_true(bbop.core.is_hash(t6), "correctly is_hash t6");
    mr_t.is_false(bbop.core.is_hash(t7), "correctly is_hash t7");
})();

// is_empty.
(function(){
    var t1 = 1;
    var t2 = 'moo';
    var t3 = [];
    var t4 = {};
    var t5 = ['moo'];
    var t6 = {'cow': 'moo'};
    var t7 = function(){ return true; };

    mr_t.is_false(bbop.core.is_empty(t1), "correctly empty t1");
    mr_t.is_false(bbop.core.is_empty(t2), "correctly empty t2");
    mr_t.is_true(bbop.core.is_empty(t3), "correctly empty t3");
    mr_t.is_true(bbop.core.is_empty(t4), "correctly empty t4");
    mr_t.is_false(bbop.core.is_empty(t5), "correctly empty t5");
    mr_t.is_false(bbop.core.is_empty(t6), "correctly empty t6");
    mr_t.is_false(bbop.core.is_empty(t7), "correctly empty t7");
})();

// what_is.
(function(){
    // Simple items.
    mr_t.is_same_atom(bbop.core.what_is(), null, "nil");
    mr_t.is_same_atom(bbop.core.what_is(null), "null", "null");
    mr_t.is_same_atom(bbop.core.what_is(true), "boolean", "boolean");
    mr_t.is_same_atom(bbop.core.what_is(''), "string", "string 1");
    mr_t.is_same_atom(bbop.core.what_is('hi'), "string", "string 2");
    mr_t.is_same_atom(bbop.core.what_is(0), "number", "number 1");
    mr_t.is_same_atom(bbop.core.what_is(-1), "number", "number 2");
    mr_t.is_same_atom(bbop.core.what_is(1), "number", "number 3");
    mr_t.is_same_atom(bbop.core.what_is([]), "array", "array 1");
    mr_t.is_same_atom(bbop.core.what_is([1, 2]), "array", "array 2");
    mr_t.is_same_atom(bbop.core.what_is({}), "object", "object 1");
    mr_t.is_same_atom(bbop.core.what_is({a: 2, 'b': 3}), "object", "object 2");
    mr_t.is_same_atom(bbop.core.what_is(function(x){ return x; }),
		      "function", "function");

    // More complicated items.
    foo = {};
    foo.bar = function(){
	this._is_a = 'foo.bar';
    };
    var fb = new foo.bar();
    mr_t.is_same_atom(bbop.core.what_is(fb), 'foo.bar', 'class/object');
})();

// to_string.
(function(){
    
    function foo (){
	this.to_string = function(){
	    return 'foo!';
	};
    }

    var f = new foo();

    mr_t.is_same_atom(bbop.core.to_string(0), '0', "to_string 0");
    mr_t.is_same_atom(bbop.core.to_string('a'), 'a', "to_string 1");
    mr_t.is_same_atom(bbop.core.to_string(f), 'foo!', "to_string 2");
})();

// dump.
(function(){
    mr_t.is_same_atom(bbop.core.dump(), 'null', "dump 0");
    mr_t.is_same_atom(bbop.core.dump(''), '""', "dump 1");
    mr_t.is_same_atom(bbop.core.dump('abc'), '"abc"', "dump 2");
    mr_t.is_same_atom(bbop.core.dump(1), "1", "dump 3");
    mr_t.is_same_atom(bbop.core.dump(null), "null", "dump 4");
    mr_t.is_same_atom(bbop.core.dump(true), "true", "dump 5");
    mr_t.is_same_atom(bbop.core.dump([]), "[]", "dump 6");
    mr_t.is_same_atom(bbop.core.dump({}), "{}", "dump 7");
    mr_t.is_same_atom(bbop.core.dump([null, ['bob', 'bar', {foo: 1}]]),
		      '[null, ["bob", "bar", {"foo": 1}]]', "dump 8");
})();

// Check hash folding.
(function(){
     var a_hash = {foo: 1, bar: 2};
     mr_t.is_same_hash({}, bbop.core.fold({},{}), 'empty fold');
     mr_t.is_same_hash(a_hash, bbop.core.fold({foo:1, bar:2},{}),'same fold');
     mr_t.is_same_hash(a_hash, bbop.core.fold({foo:1, bar:3},{bar:2}),
		       'distinct fold');
     mr_t.is_different_hash(a_hash, bbop.core.fold({foo:1},{bar:2}),
			    'bar fold');
 })();

// Check hash merging.
(function(){
     var a_hash = {foo: 1, bar: 2};
     mr_t.is_same_hash({}, bbop.core.merge({},{}), 'empty merge');
     mr_t.is_same_hash(a_hash, bbop.core.merge({foo:1, bar:3},{bar:2}),
			    'distinct merge');
     mr_t.is_same_hash(a_hash, bbop.core.merge({foo:1, bar:2}, {}),
		       'bar merge 1');
     mr_t.is_same_hash(a_hash, bbop.core.merge({foo:1},{bar:2}),
		       'bar merge 2');
     mr_t.is_same_hash(a_hash, bbop.core.merge({}, {foo:1, bar:2}),
		       'bar merge 3');
 })();

// Check cloning.
(function(){

    var foo = {a: 1, b: true, c:[1,2,[3]], d:{one: 'a', two: ['b']}};
    var bar = bbop.core.clone(foo);

    // Change the original.
    foo.a = 2;
    foo.b = false;
    foo.c[2][0] = 4;
    foo.d.two[0] = 'c';

    // Check the similarities.
    mr_t.is_same_atom(foo.c.length, bar.c.length, 'array length preserved');
    mr_t.is_same_atom(foo.c[0], bar.c[0], 'array 0 preserved');
    mr_t.is_same_atom(foo.d.one, bar.d.one, 'hash prop preserved');    

    // Check differences.
    mr_t.is_different_atom(foo.a, bar.a, 'different int');
    mr_t.is_different_atom(foo.b, bar.b, 'different bool');
    mr_t.is_different_atom(foo.c[2][0], bar.c[2][0], 'different double index');
    mr_t.is_different_atom(foo.d.two[0], bar.d.two[0], 'different in hash');
})();

// Check encoding ids.
(function(){

    var rounds = ["GO:1234567", "GO::GO:1234567", "::1:2::3:"];
    var coders = [new bbop.core.coder(),
		  new bbop.core.coder({string: "_TEST_", size: 1})];

    // Iterate through coders and strings.
    for( var cdr = 0; cdr < coders.length; cdr++ ){
	var coder = coders[cdr];
	for( var rnd = 0; rnd < rounds.length; rnd++ ){
	    var round = rounds[rnd];

	    //
	    var enc = coder.encode(round);
	    //print(enc);
	    mr_t.is_same_atom(round, coder.decode(enc),
			      "round trip (coder: " +
			      cdr + ', string: "' +
			      round + '")');
	}
    }
})();

///
/// End unit testing.
///

// Final report.
mr_t.report();
