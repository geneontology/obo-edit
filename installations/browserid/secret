#!/usr/bin/ruby
####
#### Simple script for testing BrowserID. Is is wired to be run on
#### skewer.lbl.gov.
####

require 'cgi' 
require 'erb' # templating
require 'mechanize' # http client
require 'json' # parse the client's response

## Our authorization database.
json_authorization_db = '{"mozilla.org@genkisugi.net":{"app_1":["read","write"]},"sjcarbon@lbl.gov":{"app_2": ["jump", "shout"]},"elee@lbl.gov":{"app_3": ["drive", "park"]}}'

## The variables that define our output. These will be changed during
## processing according to if/how a user is authenticated and
## authorized.
okay_p = false
user_id = 'a good user id (email) should go here'
authorized_message = "Escape is futile!"

## Page template, contains embedded JS, shoul
page_template = %{
<html>
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>A Secret Guarded by BrowserID</title>
  <script src="https://browserid.org/include.js"
          type="text/javascript"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"
          type="text/javascript"></script>
  <script type="text/javascript">
     jQuery(document).ready(function(){
       jQuery("#login-button").click(function(event){
         event.preventDefault();
         // This function comes from https://browserid.org/include.js.
         // If the user successfully supplies an email address (and thus)
         // an assertion, we'll send it to our server so we can check it
         // out and get user data out of it if it's okay.
         navigator.id.getVerifiedEmail(function(assertion) {
           if( assertion ){
              window.location.href =
               "http://skewer.lbl.gov/cgi-bin/browserid/secret?assertion=" + assertion;
           }else{
             alert("Keep trying! The secret is amazing!");
           }
         });
       });
     });
   </script>
 </head>
 <body>

  <% if okay_p %>

  <p>Too late, <b><%= user_id %></b>--it's escaping!</p>
  <p><%= authorized_message %></p>
  <p><img src="http://skewer.lbl.gov/browserid/secret.jpg" /></p>

  <% else %>

  <p>Login to see a secret...</p>
  <p><img id="login-button" src="http://skewer.lbl.gov/browserid/sign_in_blue.png" /></p>

  <% end %>

 </body>
</html>
}.gsub(/^  /, '')
page_skeleton = ERB.new(page_template, 0, "%<>")

## Add a convenience method to CGI.
class CGI
  def take field, default
    if self.has_key?(field)
      self[field]
    else
      default
    end
  end
end

## Get the incoming variables and set the defaults.
cgi = CGI.new
assertion = cgi.take('assertion', nil)

## Take the incoming assertion and see if it checks out with one of
## the online providers.
if assertion

  ## Get the response from the authority.
  authority = "https://browserid.org/verify"
  audience = "skewer.lbl.gov"
  #agent = Mechanize.new # newer form
  agent = WWW::Mechanize.new # older form
  response =
    agent.post(authority, {'assertion' => assertion, 'audience' => audience})

  ## Check our response, and if it's okay, send the information back
  ## to the page.
  if response.nil? == false && response.code == '200'
    response_json = response.content
    response_data = JSON.parse(response_json)
    if response_data['status'] == 'okay'
      okay_p = true
      user_id = response_data['email']

      ## This section demonstrates an extremely simple authorization
      ## sequence against our hardcoded JSON. If we find the person in
      ## our data, we give them a special message.
      authorization_data = JSON.parse(json_authorization_db)
      if authorization_data.key?(user_id)
        authorized_message = "Run for the escape pod!"
      end
    end
  end
end

## Output.
cgi.out {
  page_skeleton.result
}
