<?xml version="1.0" encoding="UTF-8"?>
<project name="gold" default="all">

	<!-- project variables -->
	<property name="projectname" value="gold" />
	<property name="runtimedir_name" value="dist" />
	<property name="runtimedir" location="${runtimedir_name}" />
	<property name="release_path" location="releases" />
	<property name="jarfile" location="${runtimedir}/${projectname}.jar" />
	<property name="main_jar_manifest" location="jar_manifest" />
	<property name="outputdir" value="classes" />
	<property name="sourcedir" value="src" />
	<property name="apidoc_dest" location="docs/api" />
	<property name="librarydir" location="lib" />
	<property name="releasenotes" location="CHANGES" />
	<property name="svn_repository_url" value="https://geneontology.svn.sourceforge.net/svnroot/geneontology/java/${projectname}" />
	<property name="tagprefix" value="${projectname}-" />
	<property name="warfile" location="${runtimedir}/admin.war" />
	<property name="webxml" location="conf/web.xml" />

	
	<property name="main_jar_manifest_template" location="templates/jar_manifest.template" />

	<!-- install4j specific properties; these can be deleted if you don't intend to create install4j installers -->
	<property name="install4j_installation_path" location="/Applications/install4j 4" />
	<!-- change install path for linux -->
	<!-- property name="install4j_installation_path" location="/opt/install4j" / -->
	<property name="install4j_ant_library_path" location="${install4j_installation_path}/bin/ant.jar" />
	<property name="install4j_api_library_path" location="${install4j_installation_path}/resource/i4jruntime.jar" />

	<property name="antpath" value="ant" />

	<!-- dependency information -->
	<property name="oboformat_dest" location="../oboformat" />
	<property name="owltools_dest" location="../owltools" />

	
	<!-- library jars that should appear in the final runtime directory -->
	<fileset dir="${librarydir}" id="library_jars">
		<include name="*.jar" />
		<include name="*.jnilib" />
	</fileset>

	<path id="classpath">
		<fileset refid="library_jars" />
		<fileset dir="${librarydir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<fileset dir="${sourcedir}" id="resource_files">
		<include name="**/resources/**" />
	</fileset>

	<target name="checkjar">
		<condition property="main_jar_current">
			<and>
				<available file="${jarfile}" />
				<available file="${main_jar_manifest}" />
				<uptodate targetfile="${jarfile}">
					<srcfiles refid="main_jar_contents" />
				</uptodate>
				<uptodate targetfile="${jarfile}" srcfile="${main_jar_manifest_template}" />
			</and>
		</condition>
	</target>

	<!-- classes that should appear in the main jar file -->
	<fileset id="main_jar_contents" dir="${outputdir}" includes="**/*.class,**/resources/**" excludes="**/.svn/*" />

	<target name="all" depends="clean, classes, jar, apidocs" description="Cleans and rebuilds from scratch">
	</target>

	<target name="apidocs" description="Build API documentation">
		<mkdir dir="${apidoc_dest}" />
		<javadoc sourcepath="${sourcedir}" classpathref="classpath" defaultexcludes="yes" destdir="${apidoc_dest}" author="true" version="true" use="true" />
	</target>

	<fileset dir="${owltools_dest}/lib" id="owltools_jars">
		<include name="**jar" />
	</fileset>

	<target name="buildowltools" if="owltools_dest">
		<ant dir="${owltools_dest}" target="jar" inheritAll="false" />
		<copy file="${owltools_dest}/runtime/owltools.jar" todir="${librarydir}/runlibs" />
		<copy todir="${librarydir}">
		  <fileset refid="owltools_jars" />
		</copy>
	</target>


	<fileset dir="${oboformat_dest}/lib" id="oboformat_jars">
		<include name="**jar" />
	</fileset>

	<target name="buildoboformat" if="oboformat_dest">
		<ant dir="${oboformat_dest}" target="jar" inheritAll="false" />
		<copy file="${oboformat_dest}/lib/oboformat.jar" todir="${librarydir}/runlibs" />
		<copy todir="${librarydir}">
		  <fileset refid="oboformat_jars" />
		</copy>
	</target>
		
	<target name="library_jars" depends="buildowltools, buildoboformat">
		<mkdir dir="${runtimedir}" />
		<sync todir="${runtimedir}">
			<fileset refid="library_jars" />
		</sync>
	</target>

	<target name="buildnum">
		<echo message="updated buildnum" />
		<buildnumber file="BUILDNUM" />
	</target>

	

	<target name="resources">
		<copy todir="${outputdir}">
			<fileset refid="resource_files" />
		</copy>
	</target>

	<target name="classes" depends="resources">
		<pathconvert property="ctemp" pathsep=" ">
			<path refid="classpath" />
		</pathconvert>
		<echo message="classpath = ${ctemp}" />
		<mkdir dir="${outputdir}" />
		<javac srcdir="${sourcedir}" destdir="${outputdir}" debug="true">
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
	</target>

	<target name="jarmanifest" depends="library_jars, checkjar, buildnum" unless="main_jar_current">
			<echo message="Rebuilding jar manifest" />
			<copy file="${main_jar_manifest_template}" tofile="${main_jar_manifest}" overwrite="true" />
			<pathconvert property="runtime_classpath" pathsep=" ">
				<path>
					<fileset dir="${runtimedir}">
						<include name="*.jar" />
					</fileset>
				</path>
				<map from="${runtimedir}/" to="" />
			</pathconvert>
			<replace file="${main_jar_manifest}">
				<replacefilter token="$BUILDNUM$" value="${build.number}" />
				<replacefilter token="$BUILDDATE$" value="${build_date}" />
				<replacefilter token="$RUNTIMECLASSPATH$" value="${runtime_classpath}" />
			</replace>
		</target>

	<target name="jar" depends="classes, jarmanifest, checkjar" unless="main_jar_current" description="Generate jar file">
		<jar destfile="${jarfile}" manifest="${main_jar_manifest}">
			<fileset refid="main_jar_contents" />
		</jar>
	</target>


	<target name="clean" description="Delete all rebuildable resources">
		<echo message="Deleting build directories..." />
		<delete dir="${outputdir}" />
		<delete file="${jarfile}" />
		<delete file="${main_jar_manifest}" />
		<delete file="docs/toc.html" />
		<delete dir="${apidoc_dest}" />
		<delete dir="${release_path}" />
		<delete file="release_resources/README" />
	</target>

	<!--
		This target builds web war file. The ware is to be deployed the project
		in a servlet container (e,g  tomcat). After deployment the web application is 
		accessable via link http://<hostname>:<port>/admin/AdminServlet  
	-->
	<target name="make-war" depends="classes">
		<war destfile="${warfile}" webxml="${webxml}">
			<lib dir="lib" />
			<classes dir="${outputdir}" />
		</war>
	</target>
	
	
</project>
