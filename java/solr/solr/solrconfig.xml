<?xml version="1.0" encoding="UTF-8" ?>
<config>

  <abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>

  <lib dir="../../contrib/clustering/lib/" />
  <lib path="/usr/share/java/mysql.jar" />

  <dataDir>/var/lib/solr/data</dataDir>

  <indexDefaults>
    <useCompoundFile>false</useCompoundFile>
    <mergeFactor>10</mergeFactor>
    <ramBufferSizeMB>32</ramBufferSizeMB>
    <maxFieldLength>10000</maxFieldLength>
    <writeLockTimeout>1000</writeLockTimeout>
    <commitLockTimeout>10000</commitLockTimeout>


    <lockType>native</lockType>

  </indexDefaults>

  <mainIndex>

    <useCompoundFile>false</useCompoundFile>
    <ramBufferSizeMB>32</ramBufferSizeMB>
    <mergeFactor>10</mergeFactor>

    <unlockOnStartup>false</unlockOnStartup>
    
    <reopenReaders>true</reopenReaders>

    <deletionPolicy class="solr.SolrDeletionPolicy">
      <!-- The number of commit points to be kept -->
      <str name="maxCommitsToKeep">1</str>
      <!-- The number of optimized commit points to be kept -->
      <str name="maxOptimizedCommitsToKeep">0</str>
      <!--
          Delete all commit points once they have reached the given age.
          Supports DateMathParser syntax e.g.
          
          <str name="maxCommitAge">30MINUTES</str>
          <str name="maxCommitAge">1DAY</str>
      -->
    </deletionPolicy>

    <!--  To aid in advanced debugging, you may turn on IndexWriter debug logging.
      Setting to true will set the file that the underlying Lucene IndexWriter
      will write its debug infostream to.  -->
     <infoStream file="INFOSTREAM.txt">false</infoStream> 

  </mainIndex>

  <jmx />

  <!-- the default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">
  </updateHandler>  

  <query>

    <!-- <maxBooleanClauses>1024</maxBooleanClauses> -->
    <maxBooleanClauses>65536</maxBooleanClauses>

    <filterCache
      class="solr.FastLRUCache"
      size="512"
      initialSize="512"
      autowarmCount="0"/>

    <queryResultCache
      class="solr.LRUCache"
      size="512"
      initialSize="512"
      autowarmCount="0"/>

    <documentCache
      class="solr.LRUCache"
      size="512"
      initialSize="512"
      autowarmCount="0"/>

    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <queryResultWindowSize>20</queryResultWindowSize>

    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
      </arr>
    </listener>

    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <lst> <str name="q">solr rocks</str><str name="start">0</str><str name="rows">10</str></lst>
        <lst><str name="q">static firstSearcher warming query from solrconfig.xml</str></lst>
      </arr>
    </listener>

    <useColdSearcher>false</useColdSearcher>

    <maxWarmingSearchers>2</maxWarmingSearchers>

  </query>

  <requestDispatcher handleSelect="true" >

    <requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048000" />

    <httpCaching lastModifiedFrom="openTime"
                 etagSeed="Solr">

    </httpCaching>
  </requestDispatcher>

  <requestHandler name="standard" class="solr.SearchHandler">
     <lst name="defaults">
       <str name="echoParams">explicit</str>
       <int name="rows">10</int>
       <str name="fl">*</str>
       <str name="version">2.1</str>
     </lst>
  </requestHandler>

  <!-- DisMaxRequestHandler allows easy searching across multiple fields
       for simple user-entered phrases.  It's implementation is now
       just the standard SearchHandler with a default query type
       of "dismax". 
       see http://wiki.apache.org/solr/DisMaxRequestHandler
   -->
  <requestHandler name="go" class="solr.SearchHandler" default="true">
    <lst name="defaults">
     <str name="defType">dismax</str>
     <str name="echoParams">explicit</str>
     <int name="rows">10</int>
     <float name="tie">0.01</float>
     <!-- <str name="qf"> -->
     <!--    name^2.0 symbol^2.0 acc^1.0 term_synonym^0.5 acc_synonym^0.5 term_definition^0.25 product_synonym^0.5 -->
     <!-- </str> -->
     <str name="qf">
        descriptive_name^2.0 label^2.0
     </str>
     <!-- <str name="mm"> -->
     <!--   2&lt;-1 5&lt;-2 6&lt;90% -->
     <!-- </str> -->
     <str name="mm">
       2&lt;-1 5&lt;-2 6&lt;90%
     </str>
     <!-- For tie breaking? -->
     <!-- <str name="pf"> -->
     <!--    text^0.2 features^1.1 name^1.5 manu^1.4 manu_exact^1.9 -->
     <!-- </str> -->
     <!-- <str name="bf"> -->
     <!--    popularity^0.5 recip(price,1,1000,1000)^0.3 -->
     <!-- </str> -->
     <str name="fl">
       *
     </str>
     <!-- <str name="fl"> -->
     <!--    name,acc,term_synonym,acc_synonym,term_definition,symbol,product_synonym,score -->
     <!-- </str> -->
     <int name="ps">100</int>
     <str name="q.alt">*:*</str>
     <!-- example highlighter config, enable per-query with hl=true -->
     <str name="hl.fl">descriptive_name</str>
     <!-- for this field, we want no fragmenting, just highlighting -->
     <str name="f.name.hl.fragsize">0</str>
     <!-- instructs Solr to return the field itself if no query terms are
          found -->
     <str name="f.name.hl.alternateField">descriptive_name</str>
     <str name="f.text.hl.fragmenter">regex</str> <!-- defined below -->
    </lst>
  </requestHandler>

  <!-- Note how you can register the same handler multiple times with
       different names (and different init parameters)
    -->
  <!-- <requestHandler name="partitioned" class="solr.SearchHandler" > -->
  <!--   <lst name="defaults"> -->
  <!--    <str name="defType">dismax</str> -->
  <!--    <str name="echoParams">explicit</str> -->
  <!--    <str name="qf"> -->
  <!--       name^2.0 symbol^2.0 acc^1.0 term_synonym^0.5 acc_synonym^0.5 term_definition^0.25 product_synonym^0.5 -->
  <!--    </str> -->
  <!--    <str name="mm">2&lt;-1 5&lt;-2 6&lt;90%</str> -->
  <!--   </lst> -->
  <!--   <lst name="appends"> -->
  <!--     <str name="fq">inStock:true</str> -->
  <!--   </lst> -->
  <!--   <lst name="invariants"> -->
  <!--     <str name="facet.field">cat</str> -->
  <!--     <str name="facet.field">manu_exact</str> -->
  <!--     <str name="facet.query">price:[* TO 500]</str> -->
  <!--     <str name="facet.query">price:[500 TO *]</str> -->
  <!--   </lst> -->
  <!-- </requestHandler> -->


   <!-- The spell check component can return a list of alternative spelling
  suggestions.  -->
  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

    <str name="queryAnalyzerFieldType">textSpell</str>

    <lst name="spellchecker">
      <str name="name">default</str>
      <str name="field">descriptive_name</str>
      <str name="spellcheckIndexDir">./spellchecker</str>
    </lst>

    <!-- a spellchecker that uses a different distance measure
    <lst name="spellchecker">
      <str name="name">jarowinkler</str>
      <str name="field">spell</str>
      <str name="distanceMeasure">org.apache.lucene.search.spell.JaroWinklerDistance</str>
      <str name="spellcheckIndexDir">./spellchecker2</str>
    </lst>
     -->

    <!-- a file based spell checker
    <lst name="spellchecker">
      <str name="classname">solr.FileBasedSpellChecker</str>
      <str name="name">file</str>
      <str name="sourceLocation">spellings.txt</str>
      <str name="characterEncoding">UTF-8</str>
      <str name="spellcheckIndexDir">./spellcheckerFile</str>
    </lst>
    -->
  </searchComponent>

  <!-- A request handler utilizing the spellcheck component.  
  #############################################################################
  NOTE: This is purely as an example.  The whole purpose of the
  SpellCheckComponent is to hook it into the request handler that handles (i.e.
  the standard or dismax SearchHandler) queries such that a separate request is
  not needed to get suggestions.

  IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS NOT WHAT YOU
  WANT FOR YOUR PRODUCTION SYSTEM!
  #############################################################################
  -->
  <requestHandler name="/spell" class="solr.SearchHandler" lazy="true">
    <lst name="defaults">
      <!-- omp = Only More Popular -->
      <str name="spellcheck.onlyMorePopular">false</str>
      <!-- exr = Extended Results -->
      <str name="spellcheck.extendedResults">false</str>
      <!--  The number of suggestions to return -->
      <str name="spellcheck.count">10</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>

  <!-- A component to return terms and document frequency of those terms.       
       This component does not yet support distributed search. -->
  <searchComponent name="termsComponent" class="org.apache.solr.handler.component.TermsComponent"/>

  <requestHandler name="/terms" class="org.apache.solr.handler.component.SearchHandler">
     <lst name="defaults">
      <bool name="terms">true</bool>
    </lst>
    <arr name="components">
      <str>termsComponent</str>
    </arr>
  </requestHandler>

  <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />

  <requestHandler name="/update/javabin" class="solr.BinaryUpdateRequestHandler" />

  <!--
   Analysis request handler.  Since Solr 1.3.  Use to return how a document is analyzed.  Useful
   for debugging and as a token server for other types of applications.

   This is deprecated in favor of the improved DocumentAnalysisRequestHandler and FieldAnalysisRequestHandler

   <requestHandler name="/analysis" class="solr.AnalysisRequestHandler" />
   -->

  <!--
    An analysis handler that provides a breakdown of the analysis process of provided docuemnts. This handler expects a
    (single) content stream with the following format:

    <docs>
      <doc>
        <field name="id">1</field>
        <field name="name">The Name</field>
        <field name="text">The Text Value</field>
      <doc>
      <doc>...</doc>
      <doc>...</doc>
      ...
    </docs>

    Note: Each document must contain a field which serves as the unique key. This key is used in the returned
    response to assoicate an analysis breakdown to the analyzed document.

    Like the FieldAnalysisRequestHandler, this handler also supports query analysis by
    sending either an "analysis.query" or "q" request paraemter that holds the query text to be analyized. It also
    supports the "analysis.showmatch" parameter which when set to true, all field tokens that match the query
    tokens will be marked as a "match".
  -->
  <requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" />

  <!--
    RequestHandler that provides much the same functionality as analysis.jsp. Provides the ability
    to specify multiple field types and field names in the same request and outputs index-time and
    query-time analysis for each of them.

    Request parameters are:
    analysis.fieldname - The field name whose analyzers are to be used
    analysis.fieldtype - The field type whose analyzers are to be used
    analysis.fieldvalue - The text for index-time analysis
    q (or analysis.q) - The text for query time analysis
    analysis.showmatch (true|false) - When set to true and when query analysis is performed, the produced
                                      tokens of the field value analysis will be marked as "matched" for every
                                      token that is produces by the query analysis
   -->
  <requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler" />


  <!-- CSV update handler, loaded on demand -->
  <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />

  <!-- Handler for full mysql db import... -sjc -->
  <requestHandler name="/dataimport"
		  class="org.apache.solr.handler.dataimport.DataImportHandler">
    <lst name="defaults">
      <str name="config">go-data-config.xml</str>
    </lst>
  </requestHandler>

  <!-- 
   Admin Handlers - This will register all the standard admin RequestHandlers.  Adding 
   this single handler is equivalent to registering:
   
  <requestHandler name="/admin/luke"       class="org.apache.solr.handler.admin.LukeRequestHandler" />
  <requestHandler name="/admin/system"     class="org.apache.solr.handler.admin.SystemInfoHandler" />
  <requestHandler name="/admin/plugins"    class="org.apache.solr.handler.admin.PluginInfoHandler" />
  <requestHandler name="/admin/threads"    class="org.apache.solr.handler.admin.ThreadDumpHandler" />
  <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />
  <requestHandler name="/admin/file"       class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
  
  If you wish to hide files under ${solr.home}/conf, explicitly register the ShowFileRequestHandler using:
  <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
    <lst name="invariants">
     <str name="hidden">synonyms.txt</str> 
     <str name="hidden">anotherfile.txt</str> 
    </lst>
  </requestHandler>
  -->
  <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />

  <!-- ping/healthcheck -->
  <requestHandler name="/admin/ping" class="PingRequestHandler">
    <lst name="defaults">
      <str name="qt">standard</str>
      <str name="q">solrpingquery</str>
      <str name="echoParams">all</str>
    </lst>
  </requestHandler>

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
    <lst name="defaults">
     <str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
     <str name="echoHandler">true</str>
    </lst>
  </requestHandler>

  <highlighting>
   <!-- Configure the standard fragmenter -->
   <!-- This could most likely be commented out in the "default" case -->
   <fragmenter name="gap" class="org.apache.solr.highlight.GapFragmenter" default="true">
    <lst name="defaults">
     <int name="hl.fragsize">100</int>
    </lst>
   </fragmenter>

   <!-- A regular-expression-based fragmenter (f.i., for sentence extraction) -->
   <fragmenter name="regex" class="org.apache.solr.highlight.RegexFragmenter">
    <lst name="defaults">
      <!-- slightly smaller fragsizes work better because of slop -->
      <int name="hl.fragsize">70</int>
      <!-- allow 50% slop on fragment sizes -->
      <float name="hl.regex.slop">0.5</float>
      <!-- a basic sentence pattern -->
      <str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
    </lst>
   </fragmenter>

   <!-- Configure the standard formatter -->
   <formatter name="html" class="org.apache.solr.highlight.HtmlFormatter" default="true">
    <lst name="defaults">
     <str name="hl.simple.pre"><![CDATA[<em>]]></str>
     <str name="hl.simple.post"><![CDATA[</em>]]></str>
    </lst>
   </formatter>
  </highlighting>

  <!-- An example dedup update processor that creates the "id" field on the fly
       based on the hash code of some other fields.  This example has overwriteDupes
       set to false since we are using the id field as the signatureField and Solr
       will maintain uniqueness based on that anyway. 
       
       You have to link the chain to an update handler above to use it ie:
         <requestHandler name="/update "class="solr.XmlUpdateRequestHandler">
           <lst name="defaults">
             <str name="update.processor">dedupe</str>
           </lst>
         </requestHandler>  
  -->
  <!--
  <updateRequestProcessorChain name="dedupe">
    <processor class="org.apache.solr.update.processor.SignatureUpdateProcessorFactory">
      <bool name="enabled">true</bool>
      <str name="signatureField">id</str>
      <bool name="overwriteDupes">false</bool>
      <str name="fields">name,features,cat</str>
      <str name="signatureClass">org.apache.solr.update.processor.Lookup3Signature</str>
    </processor>
    <processor class="solr.LogUpdateProcessorFactory" />
    <processor class="solr.RunUpdateProcessorFactory" />
  </updateRequestProcessorChain>
  -->


  <!-- queryResponseWriter plugins... query responses will be written using the
    writer specified by the 'wt' request parameter matching the name of a registered
    writer.
    The "default" writer is the default and will be used if 'wt' is not specified 
    in the request. XMLResponseWriter will be used if nothing is specified here.
    The json, python, and ruby writers are also available by default.

    <queryResponseWriter name="xml" class="org.apache.solr.request.XMLResponseWriter" default="true"/>
    <queryResponseWriter name="json" class="org.apache.solr.request.JSONResponseWriter"/>
    <queryResponseWriter name="python" class="org.apache.solr.request.PythonResponseWriter"/>
    <queryResponseWriter name="ruby" class="org.apache.solr.request.RubyResponseWriter"/>
    <queryResponseWriter name="php" class="org.apache.solr.request.PHPResponseWriter"/>
    <queryResponseWriter name="phps" class="org.apache.solr.request.PHPSerializedResponseWriter"/>

    <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
  -->

  <!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.  
   -->
  <queryResponseWriter name="xslt" class="org.apache.solr.request.XSLTResponseWriter">
    <int name="xsltCacheLifetimeSeconds">5</int>
  </queryResponseWriter>


  <!-- example of registering a query parser
  <queryParser name="lucene" class="org.apache.solr.search.LuceneQParserPlugin"/>
  -->

  <!-- example of registering a custom function parser 
  <valueSourceParser name="myfunc" class="com.mycompany.MyValueSourceParser" />
  -->

  <!-- config for the admin interface -->
  <admin>
    <defaultQuery>neurogenesis</defaultQuery>

    <!-- configure a healthcheck file for servers behind a loadbalancer
    <healthcheck type="file">server-enabled</healthcheck>
    -->
  </admin>

</config>
