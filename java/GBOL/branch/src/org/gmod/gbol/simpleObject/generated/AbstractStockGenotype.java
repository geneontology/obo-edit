package org.gmod.gbol.simpleObject.generated;


import org.gmod.gbol.simpleObject.*; 


/**
 * StockGenotype generated by hbm2java
 */
public abstract class AbstractStockGenotype extends AbstractSimpleObject implements java.io.Serializable {


     private Integer stockGenotypeId;
     private Genotype genotype;
     private Stock stock;

    public AbstractStockGenotype() {
    }

    public AbstractStockGenotype(Genotype genotype, Stock stock) {
       this.genotype = genotype;
       this.stock = stock;
    }
   
    public Integer getStockGenotypeId() {
        return this.stockGenotypeId;
    }
    
    public void setStockGenotypeId(Integer stockGenotypeId) {
        this.stockGenotypeId = stockGenotypeId;
    }
    public Genotype getGenotype() {
        return this.genotype;
    }
    
    public void setGenotype(Genotype genotype) {
        this.genotype = genotype;
    }
    public Stock getStock() {
        return this.stock;
    }
    
    public void setStock(Stock stock) {
        this.stock = stock;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AbstractStockGenotype) ) return false;
		 AbstractStockGenotype castOther = ( AbstractStockGenotype ) other; 
         
		 return ( (this.getGenotype()==castOther.getGenotype()) || ( this.getGenotype()!=null && castOther.getGenotype()!=null && this.getGenotype().equals(castOther.getGenotype()) ) )
 && ( (this.getStock()==castOther.getStock()) || ( this.getStock()!=null && castOther.getStock()!=null && this.getStock().equals(castOther.getStock()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         result = 37 * result + ( getGenotype() == null ? 0 : this.getGenotype().hashCode() );
         result = 37 * result + ( getStock() == null ? 0 : this.getStock().hashCode() );
         return result;
   }   

public AbstractStockGenotype generateClone() {
	AbstractStockGenotype cloned = new StockGenotype(); 
    	   cloned.genotype = this.genotype;
    	   cloned.stock = this.stock;
	return cloned;
}


}


