package org.gmod.gbol.simpleObject.generated;


import org.gmod.gbol.simpleObject.*; 


/**
 * StockDBXref generated by hbm2java
 */
public abstract class AbstractStockDBXref extends AbstractSimpleObject implements java.io.Serializable {


     private Integer stockDBXrefId;
     private Stock stock;
     private DBXref dbxref;
     private boolean isCurrent;

    public AbstractStockDBXref() {
    }

    public AbstractStockDBXref(Stock stock, DBXref dbxref, boolean isCurrent) {
       this.stock = stock;
       this.dbxref = dbxref;
       this.isCurrent = isCurrent;
    }
   
    public Integer getStockDBXrefId() {
        return this.stockDBXrefId;
    }
    
    public void setStockDBXrefId(Integer stockDBXrefId) {
        this.stockDBXrefId = stockDBXrefId;
    }
    public Stock getStock() {
        return this.stock;
    }
    
    public void setStock(Stock stock) {
        this.stock = stock;
    }
    public DBXref getDbxref() {
        return this.dbxref;
    }
    
    public void setDbxref(DBXref dbxref) {
        this.dbxref = dbxref;
    }
    public boolean isIsCurrent() {
        return this.isCurrent;
    }
    
    public void setIsCurrent(boolean isCurrent) {
        this.isCurrent = isCurrent;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AbstractStockDBXref) ) return false;
		 AbstractStockDBXref castOther = ( AbstractStockDBXref ) other; 
         
		 return ( (this.getStock()==castOther.getStock()) || ( this.getStock()!=null && castOther.getStock()!=null && this.getStock().equals(castOther.getStock()) ) )
 && ( (this.getDbxref()==castOther.getDbxref()) || ( this.getDbxref()!=null && castOther.getDbxref()!=null && this.getDbxref().equals(castOther.getDbxref()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         result = 37 * result + ( getStock() == null ? 0 : this.getStock().hashCode() );
         result = 37 * result + ( getDbxref() == null ? 0 : this.getDbxref().hashCode() );
         
         return result;
   }   

public AbstractStockDBXref generateClone() {
	AbstractStockDBXref cloned = new StockDBXref(); 
    	   cloned.stock = this.stock;
    	   cloned.dbxref = this.dbxref;
    	   cloned.isCurrent = this.isCurrent;
	return cloned;
}


}


