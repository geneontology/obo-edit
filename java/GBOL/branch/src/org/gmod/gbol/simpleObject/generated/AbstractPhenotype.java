package org.gmod.gbol.simpleObject.generated;


import org.gmod.gbol.simpleObject.*; 

import java.util.HashSet;
import java.util.Set;

/**
 * Phenotype generated by hbm2java
 */
public abstract class AbstractPhenotype extends AbstractSimpleObject implements java.io.Serializable {


     private Integer phenotypeId;
     private CVTerm attribute;
     private CVTerm cvalue;
     private CVTerm assay;
     private CVTerm observable;
     private String uniqueName;
     private String value;
     private Set<PhenotypeCVTerm> phenotypeCVTerms = new HashSet<PhenotypeCVTerm>(0);
     private Set<PhenotypeStatement> phenotypeStatements = new HashSet<PhenotypeStatement>(0);
     private Set<FeaturePhenotype> featurePhenotypes = new HashSet<FeaturePhenotype>(0);

    public AbstractPhenotype() {
    }

	
    public AbstractPhenotype(String uniqueName) {
        this.uniqueName = uniqueName;
    }
    public AbstractPhenotype(CVTerm attribute, CVTerm cvalue, CVTerm assay, CVTerm observable, String uniqueName, String value, Set<PhenotypeCVTerm> phenotypeCVTerms, Set<PhenotypeStatement> phenotypeStatements, Set<FeaturePhenotype> featurePhenotypes) {
       this.attribute = attribute;
       this.cvalue = cvalue;
       this.assay = assay;
       this.observable = observable;
       this.uniqueName = uniqueName;
       this.value = value;
       this.phenotypeCVTerms = phenotypeCVTerms;
       this.phenotypeStatements = phenotypeStatements;
       this.featurePhenotypes = featurePhenotypes;
    }
   
    public Integer getPhenotypeId() {
        return this.phenotypeId;
    }
    
    public void setPhenotypeId(Integer phenotypeId) {
        this.phenotypeId = phenotypeId;
    }
    public CVTerm getAttribute() {
        return this.attribute;
    }
    
    public void setAttribute(CVTerm attribute) {
        this.attribute = attribute;
    }
    public CVTerm getCvalue() {
        return this.cvalue;
    }
    
    public void setCvalue(CVTerm cvalue) {
        this.cvalue = cvalue;
    }
    public CVTerm getAssay() {
        return this.assay;
    }
    
    public void setAssay(CVTerm assay) {
        this.assay = assay;
    }
    public CVTerm getObservable() {
        return this.observable;
    }
    
    public void setObservable(CVTerm observable) {
        this.observable = observable;
    }
    public String getUniqueName() {
        return this.uniqueName;
    }
    
    public void setUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
    }
    public String getValue() {
        return this.value;
    }
    
    public void setValue(String value) {
        this.value = value;
    }
    public Set<PhenotypeCVTerm> getPhenotypeCVTerms() {
        return this.phenotypeCVTerms;
    }
    
    public void setPhenotypeCVTerms(Set<PhenotypeCVTerm> phenotypeCVTerms) {
        this.phenotypeCVTerms = phenotypeCVTerms;
    }
    public Set<PhenotypeStatement> getPhenotypeStatements() {
        return this.phenotypeStatements;
    }
    
    public void setPhenotypeStatements(Set<PhenotypeStatement> phenotypeStatements) {
        this.phenotypeStatements = phenotypeStatements;
    }
    public Set<FeaturePhenotype> getFeaturePhenotypes() {
        return this.featurePhenotypes;
    }
    
    public void setFeaturePhenotypes(Set<FeaturePhenotype> featurePhenotypes) {
        this.featurePhenotypes = featurePhenotypes;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AbstractPhenotype) ) return false;
		 AbstractPhenotype castOther = ( AbstractPhenotype ) other; 
         
		 return ( (this.getUniqueName()==castOther.getUniqueName()) || ( this.getUniqueName()!=null && castOther.getUniqueName()!=null && this.getUniqueName().equals(castOther.getUniqueName()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         
         
         
         
         result = 37 * result + ( getUniqueName() == null ? 0 : this.getUniqueName().hashCode() );
         
         
         
         
         return result;
   }   

public AbstractPhenotype generateClone() {
	AbstractPhenotype cloned = new Phenotype(); 
    	   cloned.attribute = this.attribute;
    	   cloned.cvalue = this.cvalue;
    	   cloned.assay = this.assay;
    	   cloned.observable = this.observable;
    	   cloned.uniqueName = this.uniqueName;
    	   cloned.value = this.value;
    	   cloned.phenotypeCVTerms = this.phenotypeCVTerms;
    	   cloned.phenotypeStatements = this.phenotypeStatements;
    	   cloned.featurePhenotypes = this.featurePhenotypes;
	return cloned;
}


}


