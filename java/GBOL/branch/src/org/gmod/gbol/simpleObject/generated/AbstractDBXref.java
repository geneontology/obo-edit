package org.gmod.gbol.simpleObject.generated;


import org.gmod.gbol.simpleObject.*; 

import java.util.HashSet;
import java.util.Set;

/**
 * DBXref generated by hbm2java
 */
public abstract class AbstractDBXref extends AbstractSimpleObject implements java.io.Serializable {


     private Integer dbxrefId;
     private String version;
     private DB db;
     private String accession;
     private String description;
     private Set<DBXrefProperty> dbxrefProperties = new HashSet<DBXrefProperty>(0);

    public AbstractDBXref() {
    }

	
    public AbstractDBXref(DB db, String accession) {
        this.db = db;
        this.accession = accession;
    }
    public AbstractDBXref(DB db, String accession, String description, Set<DBXrefProperty> dbxrefProperties) {
       this.db = db;
       this.accession = accession;
       this.description = description;
       this.dbxrefProperties = dbxrefProperties;
    }
   
    public Integer getDbxrefId() {
        return this.dbxrefId;
    }
    
    public void setDbxrefId(Integer dbxrefId) {
        this.dbxrefId = dbxrefId;
    }
    public String getVersion() {
        return this.version;
    }
    
    public void setVersion(String version) {
        this.version = version;
    }
    public DB getDb() {
        return this.db;
    }
    
    public void setDb(DB db) {
        this.db = db;
    }
    public String getAccession() {
        return this.accession;
    }
    
    public void setAccession(String accession) {
        this.accession = accession;
    }
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    public Set<DBXrefProperty> getDbxrefProperties() {
        return this.dbxrefProperties;
    }
    
    public void setDbxrefProperties(Set<DBXrefProperty> dbxrefProperties) {
        this.dbxrefProperties = dbxrefProperties;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AbstractDBXref) ) return false;
		 AbstractDBXref castOther = ( AbstractDBXref ) other; 
         
		 return ( (this.getVersion()==castOther.getVersion()) || ( this.getVersion()!=null && castOther.getVersion()!=null && this.getVersion().equals(castOther.getVersion()) ) )
 && ( (this.getDb()==castOther.getDb()) || ( this.getDb()!=null && castOther.getDb()!=null && this.getDb().equals(castOther.getDb()) ) )
 && ( (this.getAccession()==castOther.getAccession()) || ( this.getAccession()!=null && castOther.getAccession()!=null && this.getAccession().equals(castOther.getAccession()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         result = 37 * result + ( getVersion() == null ? 0 : this.getVersion().hashCode() );
         result = 37 * result + ( getDb() == null ? 0 : this.getDb().hashCode() );
         result = 37 * result + ( getAccession() == null ? 0 : this.getAccession().hashCode() );
         
         
         return result;
   }   

public AbstractDBXref generateClone() {
	AbstractDBXref cloned = new DBXref(); 
    	   cloned.db = this.db;
    	   cloned.accession = this.accession;
    	   cloned.description = this.description;
    	   cloned.dbxrefProperties = this.dbxrefProperties;
	return cloned;
}


}


