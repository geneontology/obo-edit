package org.gmod.gbol.simpleObject;

import java.util.ArrayList;
import java.util.Collection;

/*
 * Autogenerated extension of org.gmod.gbol.simpleObject.generated.FeatureProperty.
 * Add custom code to this file. 
 *
 * Author: Robert Bruggner, rbruggner@berkeleybop.org
 *
*/

public class FeatureProperty extends org.gmod.gbol.simpleObject.generated.AbstractFeatureProperty {

	private static final long serialVersionUID = 1L;

	public FeatureProperty(){
		super();
	}

	@Override
	public Collection<AbstractSimpleObject> getWriteObjects() {
		ArrayList<AbstractSimpleObject> writeObjects = new ArrayList<AbstractSimpleObject>();
		// Have to write yourself
		writeObjects.add(this);
		
		// Singletons
		writeObjects.addAll(this.getType().getWriteObjects());
		
		// Multiples
		for (FeaturePropertyPublication fpp : this.getFeaturePropertyPublications())
			writeObjects.addAll(fpp.getWriteObjects());
		
		return writeObjects;
	}

	public AbstractSimpleObjectIterator getWriteableObjects()
	{
		return new SimpleObjectIterator(this);
	}
	
	private static class SimpleObjectIterator extends AbstractSimpleObjectIterator
	{
		private static class Status extends AbstractSimpleObjectIterator.Status
		{
			public static final int type = 1;
			public static final int featurePropPubs = 2;
		}
		
		public SimpleObjectIterator(FeatureProperty featureProp)
		{
			super(featureProp);
		}

		public AbstractSimpleObject next()
		{
			FeatureProperty featureProp = (FeatureProperty)object;
			AbstractSimpleObject retVal = null;
			if (status == Status.self) {
				retVal = peek();
				processSingletonIterator(Status.type, featureProp.getType());
			}
			else {
				retVal = soIter.next();
				if (status == Status.type) {
					processCollectionIterators(Status.featurePropPubs, featureProp.getFeaturePropertyPublications());
				}
				if (status == Status.featurePropPubs) {
					processLastCollectionIterator();
				}
			}
			current = retVal;
			return retVal;
		}
	}

}
