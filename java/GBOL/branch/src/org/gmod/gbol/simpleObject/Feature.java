package org.gmod.gbol.simpleObject;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.gmod.gbol.simpleObject.CVTerm;
import org.gmod.gbol.simpleObject.DBXref;
import org.gmod.gbol.simpleObject.FeatureDBXref;
import org.gmod.gbol.simpleObject.FeatureLocation;
import org.gmod.gbol.simpleObject.FeatureProperty;
import org.gmod.gbol.simpleObject.FeatureSynonym;
import org.gmod.gbol.simpleObject.Synonym;

/*
 * Autogenerated extension of org.gmod.gbol.simpleObject.generated.Feature.
 * Add custom code to this file. 
 *
 * Author: Robert Bruggner, rbruggner@berkeleybop.org
 *
*/

public class Feature extends org.gmod.gbol.simpleObject.generated.AbstractFeature {

	private static final long serialVersionUID = 1L;

	public Feature(){
		super();
	}
	
	/** Copy constructor.  Does a shallow copy from the source Feature.
	 * 
	 * @param src - Feature to copy the data from
	 */
	public Feature(Feature src)
	{
		setType(src.getType());
		setDbxref(src.getDbxref());
		setOrganism(src.getOrganism());
		setName(src.getName());
		setUniqueName(src.getUniqueName());
		setResidues(src.getResidues());
		setSequenceLength(src.getSequenceLength());
		setMd5checksum(src.getMd5checksum());
		setIsAnalysis(src.isIsAnalysis());
		setIsObsolete(src.isIsObsolete());
		setTimeAccessioned(src.getTimeAccessioned());
		setTimeLastModified(src.getTimeLastModified());
		setFeatureLocations(src.getFeatureLocations());
		setFeatureGenotypes(src.getFeatureGenotypes());
		setParentFeatureRelationships(src.getParentFeatureRelationships());
		setChildFeatureRelationships(src.getChildFeatureRelationships());
		setFeatureCVTerms(src.getFeatureCVTerms());
		setFeatureSynonyms(src.getFeatureSynonyms());
		setFeatureDBXrefs(src.getFeatureDBXrefs());
		setFeaturePublications(src.getFeaturePublications());
		setFeaturePhenotypes(src.getFeaturePhenotypes());
		setFeatureProperties(src.getFeatureProperties());
	}
	
	public boolean addFeatureProperty(CVTerm type,String value){
		FeatureProperty featureProperty = new FeatureProperty();
		featureProperty.setType(type);
		featureProperty.setValue(value);
		featureProperty.setFeature(this);
		return this.getFeatureProperties().add(featureProperty);
	}
	
	public boolean addFeatureLocation(FeatureLocation featureLocation){
		featureLocation.setFeature(this);
		return this.getFeatureLocations().add(featureLocation);
	}
	
	public boolean addSynonym(CVTerm type, String id){
		FeatureSynonym fs = new FeatureSynonym();
		fs.setFeature(this);
		Synonym s = new Synonym();
		s.setType(type);
		s.setName(id);
		fs.setSynonym(s);
		return this.getFeatureSynonyms().add(fs);
	}
	
	public boolean addDBXref(DBXref dbxref){
		FeatureDBXref fdbx = new FeatureDBXref();
		fdbx.setFeature(this);
		fdbx.setDbxref(dbxref);
		fdbx.setIsCurrent(true);
		return this.getFeatureDBXrefs().add(fdbx);
	}

	public List<FeatureProperty> getFeaturePropertiesByType(CVTerm type){
		List<FeatureProperty> featureProperties = new ArrayList<FeatureProperty>();
		for (FeatureProperty fp : this.getFeatureProperties()){
			if (fp.getType().equals(type)){
				featureProperties.add(fp);
			}
		}
		return featureProperties;
	}

	@Override
	public Collection<AbstractSimpleObject> getWriteObjects() {
		ArrayList<AbstractSimpleObject> writeObjects = new ArrayList<AbstractSimpleObject>();
		// Have to write yourself
		writeObjects.add(this);
		
		// Singletons
		writeObjects.addAll(this.getType().getWriteObjects());
		writeObjects.addAll(this.getDbxref().getWriteObjects());
		writeObjects.addAll(this.getOrganism().getWriteObjects());
		
		// Multiples
		for (FeatureLocation fl : this.getFeatureLocations())
			writeObjects.addAll(fl.getWriteObjects());
		for (FeatureGenotype fgt : this.getFeatureGenotypes())
			writeObjects.addAll(fgt.getWriteObjects());
		for (FeatureCVTerm fcv : this.getFeatureCVTerms())
			writeObjects.addAll(fcv.getWriteObjects());
		for (FeatureSynonym fsy : this.getFeatureSynonyms())
			writeObjects.addAll(fsy.getWriteObjects());
		for (FeaturePublication fsy : this.getFeaturePublications())
			writeObjects.addAll(fsy.getWriteObjects());
		for (FeaturePhenotype fsy : this.getFeaturePhenotypes())
			writeObjects.addAll(fsy.getWriteObjects());
		for (FeatureProperty fsy : this.getFeatureProperties())
			writeObjects.addAll(fsy.getWriteObjects());
	
		// Specifically not traversing FeatureRelationships, since that 
		// could involve us in a loop or a very long traversal
		return writeObjects;
	}

	public AbstractSimpleObjectIterator getWriteableObjects()
	{
		return new SimpleObjectIterator(this);
	}

	private static class SimpleObjectIterator extends AbstractSimpleObjectIterator
	{
		private static class Status extends AbstractSimpleObjectIterator.Status
		{
			public static final int type = 1;
			public static final int dbxref = 2;
			public static final int organism = 3;
			public static final int featureLocs = 4;
			public static final int featureGenotypes = 5;
			public static final int featureCvterms = 6;
			public static final int featureSynonyms = 7;
			public static final int featurePubs = 8;
			public static final int featurePhenotypes = 9;
			public static final int featureProperties = 10;
		}
				
		public SimpleObjectIterator(Feature feature)
		{
			super(feature);
		}

		public AbstractSimpleObject next()
		{
			Feature feature = (Feature)object;
			AbstractSimpleObject retVal = null;
			if (status != Status.self) {
				retVal = soIter.next();
				if (status == Status.notSet) {
					processCollectionIterators(Status.featureProperties, feature.getFeatureProperties());
				}
				if (status == Status.featureProperties) {
					processCollectionIterators(Status.featurePhenotypes, feature.getFeaturePhenotypes());
				}
				if (status == Status.featurePhenotypes) {
					processCollectionIterators(Status.featurePubs, feature.getFeaturePublications());
				}
				if (status == Status.featurePubs) {
					processCollectionIterators(Status.featureSynonyms, feature.getFeatureSynonyms());
				}
				if (status == Status.featureSynonyms) {
					processCollectionIterators(Status.featureCvterms, feature.getFeatureCVTerms());
				}
				if (status == Status.featureCvterms) {
					processCollectionIterators(Status.featureGenotypes, feature.getFeatureGenotypes());
				}
				if (status == Status.featureGenotypes) {
					processCollectionIterators(Status.featureLocs, feature.getFeatureLocations());
				}
				if (status == Status.featureLocs) {
					processSingletonIterator(Status.organism, feature.getOrganism());
				}
				if (status == Status.organism) {
					AbstractSimpleObject newClone = 
						processSingletonIterator(Status.dbxref, feature.getDbxref());
					if (newClone != null) {
						((Feature)clone).setOrganism(((Organism)newClone));
					}
				}
				if (status == Status.dbxref) {
					AbstractSimpleObject newClone = 
						processSingletonIterator(Status.type, feature.getType());
					if (newClone != null) {
						((Feature)clone).setDbxref(((DBXref)newClone));
					}
				}
				if (status == Status.type) {
					AbstractSimpleObject newClone = 
						processLastSingletonIterator();
					if (newClone != null) {
						((Feature)clone).setType(((CVTerm)newClone));
					}
				}
			}
			else {
				retVal = peek();
				status = Status.done;
			}
			current = retVal;
			return retVal;
		}
	}

}
