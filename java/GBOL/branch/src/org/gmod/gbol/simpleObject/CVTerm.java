package org.gmod.gbol.simpleObject;

import java.util.ArrayList;
import java.util.Collection;

import org.gmod.gbol.simpleObject.CV;

/*
 * Autogenerated extension of org.gmod.gbol.simpleObject.generated.CVTerm.
 * Add custom code to this file. 
 *
 * Author: Robert Bruggner, rbruggner@berkeleybop.org
 *
*/

public class CVTerm extends org.gmod.gbol.simpleObject.generated.AbstractCVTerm {

	private static final long serialVersionUID = 1L;

	public CVTerm(){
		super();
	}
	
	public CVTerm(String name,CV cv){
		this.setCv(cv);
        this.setName(name);
        this.setIsObsolete(0);
	}

	@Override
	public Collection<AbstractSimpleObject> getWriteObjects() {
		ArrayList<AbstractSimpleObject> writeObjects = new ArrayList<AbstractSimpleObject>();
		// Have to write yourself
		writeObjects.add(this);
		
		// Singletons
		writeObjects.addAll(this.getCv().getWriteObjects());
		writeObjects.addAll(this.getDbxref().getWriteObjects());

		// Specifically not traversing CVTermRelationships or CVTermPaths, since that 
		// could involve us in a loop or a very long traversal	
		
		return writeObjects;
	}

	public AbstractSimpleObjectIterator getWriteableObjects()
	{
		return new SimpleObjectIterator(this);
	}

	private static class SimpleObjectIterator extends AbstractSimpleObjectIterator
	{

		private static class Status extends AbstractSimpleObjectIterator.Status
		{
			public final static int cv = 1;
			public final static int dbxref = 2;
		}
	
		public SimpleObjectIterator(CVTerm cvterm)
		{
			super(cvterm);
		}
		
		public AbstractSimpleObject next()
		{
			CVTerm cvterm = (CVTerm)object;
			AbstractSimpleObject retVal = null;
			if (status == Status.self) {
				retVal = peek();
				processSingletonIterator(Status.cv, cvterm.getCv());
			}
			else {
				retVal = soIter.next();
				if (status == Status.cv) {
					processSingletonIterator(Status.dbxref, cvterm.getDbxref());
				}
			}
			current = retVal;
			return retVal;
		}
	}
}
