package org.gmod.gbol.simpleObject.generated;


import org.gmod.gbol.simpleObject.*; 

import java.util.HashSet;
import java.util.Set;

/**
 * Organism generated by hbm2java
 */
public abstract class AbstractOrganism extends AbstractSimpleObject implements java.io.Serializable {


     private Integer organismId;
     private String abbreviation;
     private String genus;
     private String species;
     private String commonName;
     private String comment;
     private Set<OrganismProperty> organismProperties = new HashSet<OrganismProperty>(0);
     private Set<OrganismDBXref> organismDBXrefs = new HashSet<OrganismDBXref>(0);

    public AbstractOrganism() {
    }

	
    public AbstractOrganism(String genus, String species) {
        this.genus = genus;
        this.species = species;
    }
    public AbstractOrganism(String abbreviation, String genus, String species, String commonName, String comment, Set<OrganismProperty> organismProperties, Set<OrganismDBXref> organismDBXrefs) {
       this.abbreviation = abbreviation;
       this.genus = genus;
       this.species = species;
       this.commonName = commonName;
       this.comment = comment;
       this.organismProperties = organismProperties;
       this.organismDBXrefs = organismDBXrefs;
    }
   
    public Integer getOrganismId() {
        return this.organismId;
    }
    
    public void setOrganismId(Integer organismId) {
        this.organismId = organismId;
    }
    public String getAbbreviation() {
        return this.abbreviation;
    }
    
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }
    public String getGenus() {
        return this.genus;
    }
    
    public void setGenus(String genus) {
        this.genus = genus;
    }
    public String getSpecies() {
        return this.species;
    }
    
    public void setSpecies(String species) {
        this.species = species;
    }
    public String getCommonName() {
        return this.commonName;
    }
    
    public void setCommonName(String commonName) {
        this.commonName = commonName;
    }
    public String getComment() {
        return this.comment;
    }
    
    public void setComment(String comment) {
        this.comment = comment;
    }
    public Set<OrganismProperty> getOrganismProperties() {
        return this.organismProperties;
    }
    
    public void setOrganismProperties(Set<OrganismProperty> organismProperties) {
        this.organismProperties = organismProperties;
    }
    public Set<OrganismDBXref> getOrganismDBXrefs() {
        return this.organismDBXrefs;
    }
    
    public void setOrganismDBXrefs(Set<OrganismDBXref> organismDBXrefs) {
        this.organismDBXrefs = organismDBXrefs;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AbstractOrganism) ) return false;
		 AbstractOrganism castOther = ( AbstractOrganism ) other; 
         
		 return ( (this.getGenus()==castOther.getGenus()) || ( this.getGenus()!=null && castOther.getGenus()!=null && this.getGenus().equals(castOther.getGenus()) ) )
 && ( (this.getSpecies()==castOther.getSpecies()) || ( this.getSpecies()!=null && castOther.getSpecies()!=null && this.getSpecies().equals(castOther.getSpecies()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         
         result = 37 * result + ( getGenus() == null ? 0 : this.getGenus().hashCode() );
         result = 37 * result + ( getSpecies() == null ? 0 : this.getSpecies().hashCode() );
         
         
         
         
         return result;
   }   

public AbstractOrganism generateClone() {
	AbstractOrganism cloned = new Organism(); 
    	   cloned.abbreviation = this.abbreviation;
    	   cloned.genus = this.genus;
    	   cloned.species = this.species;
    	   cloned.commonName = this.commonName;
    	   cloned.comment = this.comment;
    	   cloned.organismProperties = this.organismProperties;
    	   cloned.organismDBXrefs = this.organismDBXrefs;
	return cloned;
}


}


