package org.gmod.gbol.simpleObject;

import java.util.ArrayList;
import java.util.Collection;

/*
 * Autogenerated extension of org.gmod.gbol.simpleObject.generated.Phenotype.
 * Add custom code to this file. 
 *
 * Author: Robert Bruggner, rbruggner@berkeleybop.org
 *
*/

public class Phenotype extends org.gmod.gbol.simpleObject.generated.AbstractPhenotype {

	private static final long serialVersionUID = 1L;

	public Phenotype(){
		super();
	}

	@Override
	public Collection<AbstractSimpleObject> getWriteObjects() {
		ArrayList<AbstractSimpleObject> writeObjects = new ArrayList<AbstractSimpleObject>();
		// Have to write yourself
		writeObjects.add(this);
		
		// Singletons
		writeObjects.addAll(this.getAttribute().getWriteObjects());
		writeObjects.addAll(this.getAssay().getWriteObjects());
		writeObjects.addAll(this.getCvalue().getWriteObjects());
		writeObjects.addAll(this.getObservable().getWriteObjects());

		// Multiples
		for (PhenotypeCVTerm pcvt : this.getPhenotypeCVTerms())
			writeObjects.addAll(pcvt.getWriteObjects());
		
		// Specifically not traversing PhenotypeStatements, since that 
		// could involve us in a loop or a very long traversal

		return writeObjects;	
	}

	public AbstractSimpleObjectIterator getWriteableObjects()
	{
		return new SimpleObjectIterator(this);
	}

	private static class SimpleObjectIterator extends AbstractSimpleObjectIterator
	{
		private static class Status extends AbstractSimpleObjectIterator.Status
		{
			public static final int attribute = 1;
			public static final int assay = 2;
			public static final int cvalue = 3;
			public static final int observable = 4;
			public static final int phenotypeCvterms = 5;
		}
				
		public SimpleObjectIterator(Phenotype phenotype)
		{
			super(phenotype);
		}

		public AbstractSimpleObject next()
		{
			Phenotype phenotype = (Phenotype)object;
			AbstractSimpleObject retVal = null;
			if (status == Status.self) {
				retVal = peek();
				processSingletonIterator(Status.attribute, phenotype.getAttribute());
			}
			else {
				retVal = soIter.next();
				if (status == Status.attribute) {
					processSingletonIterator(Status.assay, phenotype.getAssay());
				}
				if (status == Status.assay) {
					processSingletonIterator(Status.cvalue, phenotype.getCvalue());
				}
				if (status == Status.cvalue) {
					processSingletonIterator(Status.observable, phenotype.getObservable());
				}
				if (status == Status.observable) {
						processCollectionIterators(Status.phenotypeCvterms, phenotype.getPhenotypeCVTerms());
				}
				if (status == Status.phenotypeCvterms) {
					processLastCollectionIterator();
				}
			}
			current = retVal;
			return retVal;
		}

	}

}
