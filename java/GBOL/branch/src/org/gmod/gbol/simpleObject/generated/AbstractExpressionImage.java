package org.gmod.gbol.simpleObject.generated;


import org.gmod.gbol.simpleObject.*; 


/**
 * ExpressionImage generated by hbm2java
 */
public abstract class AbstractExpressionImage extends AbstractSimpleObject implements java.io.Serializable {


     private Integer expressionImageId;
     private EImage eImage;
     private Expression expression;

    public AbstractExpressionImage() {
    }

    public AbstractExpressionImage(EImage eImage, Expression expression) {
       this.eImage = eImage;
       this.expression = expression;
    }
   
    public Integer getExpressionImageId() {
        return this.expressionImageId;
    }
    
    public void setExpressionImageId(Integer expressionImageId) {
        this.expressionImageId = expressionImageId;
    }
    public EImage geteImage() {
        return this.eImage;
    }
    
    public void seteImage(EImage eImage) {
        this.eImage = eImage;
    }
    public Expression getExpression() {
        return this.expression;
    }
    
    public void setExpression(Expression expression) {
        this.expression = expression;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AbstractExpressionImage) ) return false;
		 AbstractExpressionImage castOther = ( AbstractExpressionImage ) other; 
         
		 return ( (this.geteImage()==castOther.geteImage()) || ( this.geteImage()!=null && castOther.geteImage()!=null && this.geteImage().equals(castOther.geteImage()) ) )
 && ( (this.getExpression()==castOther.getExpression()) || ( this.getExpression()!=null && castOther.getExpression()!=null && this.getExpression().equals(castOther.getExpression()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         result = 37 * result + ( geteImage() == null ? 0 : this.geteImage().hashCode() );
         result = 37 * result + ( getExpression() == null ? 0 : this.getExpression().hashCode() );
         return result;
   }   

public AbstractExpressionImage generateClone() {
	AbstractExpressionImage cloned = new ExpressionImage(); 
    	   cloned.eImage = this.eImage;
    	   cloned.expression = this.expression;
	return cloned;
}


}


