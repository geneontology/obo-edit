<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated Sep 3, 2008 1:58:22 PM by Hibernate Tools 3.2.1.GA -->
<hibernate-mapping>
    <class name="org.gmod.gbol.simpleObject.generated.AbstractAnalysisFeature" table="analysisfeature" schema="public">
        <meta attribute="chadoModule" inherit="false">analysis</meta>

        <meta attribute="scope-class" inherit="false">public abstract</meta>

        <comment>Computational analyses generate features (e.g. Genscan generates transcripts and exons; sim4 alignments generate similarity/match features). analysisfeatures are
        stored using the feature table from the sequence module. The analysisfeature table is used to decorate these features, with analysis specific attributes. A feature is an
        analysisfeature if and only if there is a corresponding entry in the analysisfeature table. analysisfeatures will have two or more featureloc entries, with rank indicating
        query/subject</comment>

        <id name="analysisFeatureId" type="java.lang.Integer">
            <column name="analysisfeature_id" />

            <generator class="sequence">
                <param name="sequence">analysisfeature_analysisfeature_id_seq</param>
            </generator>
        </id>

        <discriminator column="analysisfeature_id" insert="false" />

        <many-to-one name="analysis" class="org.gmod.gbol.simpleObject.Analysis" fetch="select">
            <meta attribute="use-in-equals" inherit="false">true</meta>

            <column name="analysis_id" not-null="true" />
        </many-to-one>

        <many-to-one name="feature" class="org.gmod.gbol.simpleObject.Feature" fetch="select">
            <meta attribute="use-in-equals" inherit="false">true</meta>

            <column name="feature_id" not-null="true" />
        </many-to-one>

        <property name="rawScore" type="java.lang.Double">
            <column name="rawscore" precision="17" scale="17">
                <comment>This is the native score generated by the program; for example, the bitscore generated by blast, sim4 or genscan scores. One should not assume that high
                is necessarily better than low.</comment>
            </column>
        </property>

        <property name="normalizedScore" type="java.lang.Double">
            <column name="normscore" precision="17" scale="17">
                <comment>This is the rawscore but semi-normalized. Complete normalization to allow comparison of features generated by different programs would be nice but too
                difficult. Instead the normalization should strive to enforce the following semantics: * normscores are floating point numbers &gt;= 0, * high normscores are
                better than low one. For most programs, it would be sufficient to make the normscore the same as this rawscore, providing these semantics are satisfied.</comment>
            </column>
        </property>

        <property name="significance" type="java.lang.Double">
            <column name="significance" precision="17" scale="17">
                <comment>This is some kind of expectation or probability metric, representing the probability that the analysis would appear randomly given the model. As such, any
                program or person querying this table can assume the following semantics: * 0 &lt;= significance &lt;= n, where n is a positive number, theoretically unbounded but
                unlikely to be more than 10 * low numbers are better than high numbers.</comment>
            </column>
        </property>

        <property name="identity" type="java.lang.Double">
            <column name="identity" precision="17" scale="17">
                <comment>Percent identity between the locations compared. Note that these 4 metrics do not cover the full range of scores possible; it would be undesirable to list
                every score possible, as this should be kept extensible. instead, for non-standard scores, use the analysisprop table.</comment>
            </column>
        </property>
    </class>
</hibernate-mapping>

