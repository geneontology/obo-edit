package org.obo.dataadapter;

import java.io.IOException;
import java.util.Collection;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Experimental: This code is not in use!!
 * @author jrichter
 *
 */
public class OBOXMLParseEngine extends AbstractParseEngine {

	protected Locator locator;

	protected class OBOContentHandler extends DefaultHandler {

		protected String currentID;

		protected int depth = 0;

		protected boolean inHeader = false;

		protected StringBuffer currentString = new StringBuffer();

		@Override
		public void setDocumentLocator(Locator locator) {
			super.setDocumentLocator(locator);
			OBOXMLParseEngine.this.locator = locator;
		}

		@Override
		public void characters(char[] ch, int start, int length)
				throws SAXException {
			currentString.append(ch, start, length);
		}

		@Override
		public void startElement(String uri, String localName, String qName,
				Attributes attributes) throws SAXException {
			currentString.delete(0, currentString.length());
			depth++;
			try {
				if (isStanzaLevel()) {
					if (localName.equals("header")) {
						inHeader = true;
					} else if (localName.equals("source")) {

					} else {
						parser.startStanza(localName);
					}
				} else if (isTagLevel()) {
				}
			} catch (OBOParseException ex) {
				ex.printStackTrace();
			}
		}

		protected boolean isTagLevel() {
			return depth > 2;
		}

		protected boolean isStanzaLevel() {
			return depth == 2;
		}

		@Override
		public void endElement(String uri, String localName, String qName)
				throws SAXException {
			try {
				if (isStanzaLevel()) {
					if (localName.equals("header")) {
						inHeader = false;
					}
				} else if (isTagLevel()) {
					if (inHeader) {
						if (parser instanceof OBOParser) {
							OBOParser oboParser = (OBOParser) parser;
							if (localName.equals("format-version")) {
								oboParser.readFormatVersion(currentString
										.toString());
							} else if (localName.equals("saved-by")) {
								oboParser.readSavedBy(currentString.toString());
							} else if (localName.equals("auto-generated-by")) {
								oboParser.readAutogeneratedBy(currentString
										.toString());
							}
						}

					}
				}
			} catch (OBOParseException ex) {
				ex.printStackTrace();
			}
			depth--;
			super.endElement(uri, localName, qName);
		}
	}

	@Override
	protected void doParse(String path) throws IOException, OBOParseException {

		// Use an instance of ourselves as the SAX event handler
		// Use the default (non-validating) parser
		SAXParserFactory factory = SAXParserFactory.newInstance();
		DefaultHandler handler = new OBOContentHandler();
		try {

			// Parse the input
			SAXParser saxParser = factory.newSAXParser();
			saxParser.parse(path, handler);

		} catch (Throwable t) {
			t.printStackTrace();
		}
	}

	public String getCurrentLine() {
		return "";
	}

	public int getLineNum() {
		return locator.getLineNumber();
	}

}
