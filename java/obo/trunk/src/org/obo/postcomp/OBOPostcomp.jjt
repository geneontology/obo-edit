
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */
options
{
   MULTI=true;
   STATIC=false;
   VISITOR=true;
   NODE_USES_PARSER=true;
}

PARSER_BEGIN(OBOPostcomp)

package org.obo.postcomp;

import org.apache.log4j.*;

public class OBOPostcomp {
  public static void main(String args[]) {
    Logger logger = Logger.getLogger(OBOPostcomp.class); 
    logger.info("Reading from standard input...");
    OBOPostcomp t = new OBOPostcomp(System.in);
    try {
      SimpleNode n = t.PostcompExpression();

      dump(n, "");
      logger.info("Thank you.");
    } catch (Exception e) {
      logger.info("Oops.");
      logger.info(e.getMessage());
      e.printStackTrace();
    }
  }

  public static void dump(SimpleNode node, String prefix) {
    Logger logger = Logger.getLogger(OBOPostcomp.class); 
    if (node instanceof ASTIdentifier) {
      logger.info(prefix+"Identifier("+((ASTIdentifier) node).val+")");
    } else 
      logger.info(node.toString(prefix)+", class="+node.getClass());
    if (node.children != null) {
      for (int i = 0; i < node.children.length; ++i) {
	SimpleNode n = (SimpleNode)node.children[i];
	if (n != null) {
	  dump(n, prefix + " ");
	}
      }
    }
  }
}

PARSER_END(OBOPostcomp)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z","-",":","#",">",".","/","|"] >
|
  < #DIGIT: ["0"-"9"] >
}

SimpleNode PostcompExpression() : {}
{
   CompoundExpression() <EOF>
  { return jjtThis; }
}

void Identifier() :
{
   Token t;
}
{
    t=<IDENTIFIER>
    {
       jjtThis.val = t.image;
    }
}
/*
void Identifier() : {}
{
  <IDENTIFIER>
}
*/

void Primary() #void : {}
{ 
  LOOKAHEAD(2) DifferentiaExpression() |
  GenusExpression()
}

void GenusExpression() #GenusExpression(1): {}
{
   Identifier()
}

void DifferentiaExpression() #DifferentiaExpression(2): {}
{
   Identifier() "(" CompoundExpression() ")"
}

void SubExpression() #void : {}
{
   LOOKAHEAD(3) Primary() |
   LOOKAHEAD(3) ParensExpression() |
   CompoundExpression()
}

void ParensExpression() #void : {}
{
   "(" CompoundExpression() ")"
}

void CompoundExpression() :
{}
{
  (ParensExpression() | Primary()) (LOOKAHEAD(2) "^" SubExpression())*
}