/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./OBOPostcomp.jj */
/*@egen*/
/*
 * Copyright \u00ac\u00a9 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */
options
{               
   STATIC=false;                                           
}

PARSER_BEGIN(OBOPostcomp)

package org.obo.postcomp;

import org.apache.log4j.*;

public class OBOPostcomp/*@bgen(jjtree)*/implements OBOPostcompTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTOBOPostcompState jjtree = new JJTOBOPostcompState();

/*@egen*/
  public static void main(String args[]) {
    Logger logger = Logger.getLogger(OBOPostcomp.class); 
    logger.info("Reading from standard input...");
    OBOPostcomp t = new OBOPostcomp(System.in);
    try {
      SimpleNode n = t.PostcompExpression();

      dump(n, "");
      logger.info("Thank you.");
    } catch (Exception e) {
      logger.info("Oops.");
      logger.info(e.getMessage());
      e.printStackTrace();
    }
  }

  public static void dump(SimpleNode node, String prefix) {
    Logger logger = Logger.getLogger(OBOPostcomp.class); 
    if (node instanceof ASTIdentifier) {
      logger.info(prefix+"Identifier("+((ASTIdentifier) node).val+")");
    } else 
      logger.info(node.toString(prefix)+", class="+node.getClass());
    if (node.children != null) {
      for (int i = 0; i < node.children.length; ++i) {
	SimpleNode n = (SimpleNode)node.children[i];
	if (n != null) {
	  dump(n, prefix + " ");
	}
      }
    }
  }
}

PARSER_END(OBOPostcomp)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z","-",":","#",">",".","/","|"] >
|
  < #DIGIT: ["0"-"9"] >
}

SimpleNode PostcompExpression() : {/*@bgen(jjtree) PostcompExpression */
  ASTPostcompExpression jjtn000 = new ASTPostcompExpression(this, JJTPOSTCOMPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PostcompExpression */
   try {
/*@egen*/
   CompoundExpression() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
   ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
       jjtn000.val = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*
void Identifier() : {}
{
  <IDENTIFIER>
}
*/

void Primary()       : {}
{ 
  LOOKAHEAD(2) DifferentiaExpression() |
  GenusExpression()
}

void GenusExpression()                    : {/*@bgen(jjtree) #GenusExpression( 1) */
  ASTGenusExpression jjtn000 = new ASTGenusExpression(this, JJTGENUSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #GenusExpression( 1) */
   try {
/*@egen*/
   Identifier()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000,  1);
     }
   }
/*@egen*/
}

void DifferentiaExpression()                          : {/*@bgen(jjtree) #DifferentiaExpression( 2) */
  ASTDifferentiaExpression jjtn000 = new ASTDifferentiaExpression(this, JJTDIFFERENTIAEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #DifferentiaExpression( 2) */
   try {
/*@egen*/
   Identifier() "(" CompoundExpression() ")"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000,  2);
     }
   }
/*@egen*/
}

void SubExpression()       : {}
{
   LOOKAHEAD(3) Primary() |
   LOOKAHEAD(3) ParensExpression() |
   CompoundExpression()
}

void ParensExpression()       : {}
{
   "(" CompoundExpression() ")"
}

void CompoundExpression() :
{/*@bgen(jjtree) CompoundExpression */
  ASTCompoundExpression jjtn000 = new ASTCompoundExpression(this, JJTCOMPOUNDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundExpression */
  try {
/*@egen*/
  (ParensExpression() | Primary()) (LOOKAHEAD(2) "^" SubExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}