#! /bin/sh

#Try to figure out where go is installed, assuming that the goeditor
#script is in the same directory as the GO runtime files

#Make sure ls uses default behavior
alias ls=ls
unalias ls

JAVAPATH='java'

#Assume that the path to the go editor is the same as the path to this
#script
PATH_TO_ME=`which $0`;

#Now see if the path is actually a symbolic link. If it is, set TEMP
#to true
TEMP=`ls -l $PATH_TO_ME | sed -e "s/.* -> \(.*\)/true/g"`
if [ -z "$TEMP" ]; then
   TEMP='false';
fi

#While we keep finding symbolic links...
while [ "$TEMP" = "true" ]; do
   #Parse the ls output and set PATH_TO_ME to the actual location of the
   #symbolic link
   PATH_TO_ME=`ls -l $PATH_TO_ME | sed -e "s/.* -> \(.*\)/\1/g"`

   TEMP=`ls -l $PATH_TO_ME | sed -e "s/.* -> \(.*\)/true/g"`
   if [ -z "$TEMP" ]; then
      TEMP='false';
   fi
done

#If PATH_TO_ME is a relative link, set TEMP to true, otherwise set
#TEMP to false
TEMP=`echo $PATH_TO_ME | sed -e "s/^\/.*/true/g"`
if [ -z "$TEMP" ]; then
   TEMP='false';
fi

#If PATH_TO_ME was a relative link, change it to an absolute reference
if [ $TEMP != 'true' ]; then
   PATH_TO_ME="$PWD/$PATH_TO_ME"
fi

#Remove the name of this script from the end of the path
PATH_TO_ME=`echo $PATH_TO_ME | sed -e "s/\(.*\)\/.*/\1/g"`

#$JAVAPATH -DlauncherDir=${PATH_TO_ME} -DlauncherName=$0 -jar ${PATH_TO_ME}/oboedit_launcher.jar "$@"
$JAVAPATH -DlauncherDir=${PATH_TO_ME} -DlauncherName=$0 -jar ${PATH_TO_ME}/runtime/oboedit.jar "$@"