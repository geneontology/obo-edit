<!DOCTYPE html PUBLIC "-//W3C//DTD html 3.2//EN">
<html>
<head>
<meta name="GENERATOR" content="Solutionsoft HelpBreeze JavaHelp Edition">
<title>Compound Filtering</title>
<link rel="stylesheet" type="text/css" href="../javahelp.css">
</head>
<body bgcolor="#ffffff">
<h1>Compound Filtering</h1>
<p>Compound filters use the boolean expressions AND and OR 
to combine simple filters into filters with more complex behavior.</p>
<P>It is possible to create compound term filters or compound link filters. The 
interface&nbsp;works exactly the same either way. </P>
<h2>Boolean notation: infix vs. prefix</h2>
<p>Let's say we want to find all the terms that are children of the term 
"molecular_function" AND have a name that contains the word "kinase" or 
"protein". We might express such a filter as:</p>
<p><em>[Ancestor] [Name] [equals] "molecular_function" 
</em><strong>AND</strong></p>
<p><em>([Self] [Name] [contains] "kinase"</em> <strong>OR</strong></p>
<p><em>[Self] [Name] [contains] "protein")</em></p>
<p>This way of writing boolean expressions with the boolean operation between 
the two connected terms&nbsp;is called <strong>infix notation</strong>. Infix 
notation is pretty familiar; it's the way we express boolean statements in 
english, and it's the typical notation in mathematics.</p>
<p>Brace yourself, because&nbsp;OBO-Edit doesn't use this notation.</p>
<p>OBO-Edit uses <strong>prefix notation</strong> for boolean expressions. In 
prefix notation, the boolean operation comes before the terms to be combined. So 
the expression "x AND y" is "AND x y" in prefix notation.</p>
<p>In prefix notation, our search from above could be written as:</p>
<ul>
  <li><strong>AND</strong>
  <ul>
    <li><em>[Ancestor] [Name] [equals] "molecular_function"</em>
    <li><strong>OR</strong>
    <ul>
      <li><em>[Self] [Name] [contains] "kinase"</em>
      <li><em>[Self] [Name] [contains] "protein"</em></li></ul></li></ul></li></ul>
<div class="sidebar">
<h1>Why use this bizarre notation?</h1>
<hr>
<p>Prefix notation has some real benefits over infix 
notation. For one thing, infix notation requires the use of parenthesis so you 
can tell which term goes with which boolean operation. Prefix notation doesn't have this problem.</p>
<P>More importantly, there didn't seem to be a good way to design an interface 
for building boolean filters using infix notation. An expression in prefix 
notation, on the other hand, can easily be represented as a tree. OBO-Edit 
already has lots of good tools for editing trees, so we decided to go with a 
notation that has a simple tree representation and take advantage of our 
existing tree editors.</P>
<P>Prefix notation isn't so hard once you get used to it. Some programming 
languages (like LISP or SCHEME or prolog) use nothing but prefix 
notation.</P></div>
<H2>Building a Compound Filter</H2>
<P>If you are using a user-configurable filter editor, make sure that compound 
filtering is enabled. Go to the "Advanced" tab and make sure that "Keyword 
filtering" is disabled and "Compound filtering" is checked.</P>
<P>When compound filtering is enabled, the interface looks like this:</P>
<P><IMG height=124 hspace=0 src="../images/compound_filter_overview.gif" 
width=585 border=0></P>
<P>There are two new pieces to this interface. At the bottom is a little label 
called the&nbsp;compound filter description box. This box contains a description 
of the compound filter in infix notation. To the left is the compound filter 
editor.</P>
<P>The compound filter editor represents the compound filter as a tree. The 
leaves of the tree are term or link filters. The internal nodes are the boolean 
operators AND and OR.</P>
<P>The boolean operators combine their child nodes. An AND branch of the tree 
matches if all its children match. An OR branch of the tree matches if any of 
its children match.</P>
<H3>Editing Existing Nodes</H3>
<P>To edit a node in the tree, left-click it to select the node. When a node is 
selected, the editor for that node will appear to the right. If the node is a 
term filter or link filter, a standard term or link filter editor will appear 
(as in the screen shot above). The filter can be edited as described in 
the&nbsp;<A href="Term_Filters.htm">Term Filters</A> and <A 
href="Link_Filters.htm">Link Filters</A> sections.</P>
<P>If a boolean operation is selected, a boolean operation editor will 
appear:</P>
<P><IMG height=122 hspace=0 src="../images/compound_filter_boolean_edi.gif" 
width=368 border=0></P>
<P>The boolean operation editor allows you to change the boolean operator. To 
change the operator, choose an operator from the dropdown menu. The available 
options are <STRONG>AND</STRONG> and <STRONG>OR.</STRONG></P>
<H3>Deleting Existing Nodes</H3>
<P>To delete an existing node, select the node to delete by clicking it. Then 
bring up the right-click menu by right-clicking anywhere inside the compound 
filter editor. The right-click menu will appear:</P>
<P><IMG height=60 hspace=0 src="../images/compound_filter_delete_menu.gif" 
width=119 border=0></P>
<P>Choose "Delete" from the right-click menu to delete the currently selected 
node.</P>
<P>Boolean operations can only be deleted if they have no children. If a boolean 
operation has children, all the children must be deleted before the boolean 
operation can be deleted.</P>
<H3>Adding New Nodes</H3>
<P>New nodes can only be added as children of boolean operations. To add a new 
node, select the boolean operation that will be the new node's parent. 
Right-click to bring up the right-click menu:</P>
<P><IMG height=59 hspace=0 src="../images/compound_filter_add_menu.gif" 
width=119 border=0></P>
<P>To add a new filter, choose "Add filter" from the right-click menu. To add a 
new boolean operation, choose "Add Boolean Filter".</P>
<P>Edit the new filter as described above.</P>
<H2>How Compound Filters Are Matched - Speeding Up Your Searches</H2>
<P>Compound filters are matched by evaluating whether their constituent filters 
match.</P>
<P>Constituent filters are matched in the order they were specified. The 
evaluation stops if the value of the compound filter can be determined, even if 
all the constituent filters have not been checked. For example, if the boolean 
operation is AND and one of the constituent filters doesn't match, the 
evaluation stops and the entire compound filter announces that it doesn't match 
(because if even one term of an AND expression is false, the whole expression is 
false). Similarly, if the boolean operation is OR and a constituent filter 
matches, the evaluation stops and the entire compound filter announces that it 
matches (if even one term of an OR expression is true, the whole expression is 
true).</P>
<P>Therefore: <STRONG>When constructing a compound filter, put quickly evaluated 
filters FIRST. </STRONG>For example, it takes a long time to do any search with 
an "Ancestor" or "Descendant" search aspect, because all the descendants or 
ancestors of every term in the ontology have to be calculated. So add any 
filters that use an ancestor or descendant last. Add quickly evaluated filters 
first. That way slow filters don't have to be evaluated unless absolutely 
necessary, and the whole filtering operation will work more 
quickly.</P>
</body>
</html>