<!DOCTYPE html PUBLIC "-//W3C//DTD html 3.2//EN">
<html>
<head>
<meta name="GENERATOR" content="Solutionsoft HelpBreeze JavaHelp Edition">
<title>An Introduction to OBO Ontologies</title>
<link rel="stylesheet" type="text/css" href="../javahelp.css">
</head>
<body bgcolor="#ffffff">
<h1>An Introduction to OBO Ontologies</h1>
<p>OBO-Edit operates on ontologies that conform to the OBO 
ontology format. The complete specification of the OBO ontology format is 
available at <a 
href="http://www.godatabase.org/dev/doc/obo_format_spec.html">http://www.godatabase.org/dev/doc/obo_format_spec.html</a>.</p>
<p>OBO ontologies are similar to the ontologies specified by a description logic language like 
OWL or DAML+OIL, albeit simpler. However, OBO ontologies are designed for the needs 
of the biological community, and thus have some unique (and sometimes 
unexpected) qualities. The OBO format provides the ability to track a large 
amount of meta-data, and includes mechanisms for some basic history auditing. 
The OBO format does not include all the features of OWL or DAML+OIL, and 
sometimes uses different semantics for features that - on the surface - seem to 
be identical to features of a description logic.</p>
<p>This section of the user's guide will give an overview of what sort of 
ontology the OBO format can represent.</p>
<h2>Classes</h2>
<p><a name="classes"></a>Classes (also called "terms" in this guide) model types of objects in 
the real world. Note that classes model <em>types</em>, not <em>instances. 
</em>For example, the Gene Ontology class "mitochondria" models the class of all 
mitochondria, not any particular mitochondria in some particular cell.</p>
<p>Classes may have relationships to each other. These relationships may be of 
one of the pre-defined relationship types in OBO (such as is_a, the relationship 
type that indicates that a class or relation is a sub-type of another class or 
relation) or may be user-defined.</p>
<p>If&nbsp;a class A has an <strong>is_a</strong> relationship to another class 
B, A is a "subclass" of B. This means that all instances of type A are also 
instances of type B, and any object of type A implicitly inherits all the 
characteristics of an object of type B.</p>
<p>For example, a <em>sneaker</em> <strong>is_a</strong> <em>shoe</em>. That 
means that any particular <em>sneaker</em> in the real world (ie any instance of 
the class <em>sneaker</em>) is also a <em>shoe</em>, by definition. All 
<em>sneakers</em> have the characteristics of a general <em>shoe</em>, as well 
as some special characterists that only sneakers have. These special 
characteristics are what differentiate sneakers from shoes to make the category 
"sneaker" meaningful.</p>
<p>OBO classes are analogous to OWL or DAML+OIL classes.</p>
<h2>Relations</h2><a name="relations" >
<p>Relations&nbsp;(also called "relationship types" in this 
guide, or "Propertiess" in other description logic languages) model types of 
relationships between entities.</p>
<p>Any given relation can be applied in two ways, as "class level" relations, 
or as "instance level" relations. Class level relations relate two classes, 
and instance level relations relate two instances. For every class level 
application of a relation, there is at least one possible instance-level 
application of that relation.</p>
<p>Class-level relations can be thought of as describing required 
instance-level relationships that must exist when a class is instantiated. For 
example, consider the class-level relationship <em>finger</em> 
<strong>part_of</strong> <em>hand</em>. This means that for any particular finger in the 
real world (ie John's left index finger) there must be a particular hand in 
the real world (ie John's left hand) that the finger is part of. That 
relationship between particulars (<u>johns_left_index_finger</u> 
<strong>part_of</strong> <u>johns_left_hand</u>) is an instance-level 
relationship.</p>
<h3>  Attributes of 
Relations</h3>
<h4>Directionality</h4>
<p>Relations apply in a single direction (unless they are 
marked "symmetrical", see <A href="#symmetry">Symmetry</a>           
 below).&nbsp;Consider the relationship&nbsp;<em>leaf </em><strong>part_of 
</strong><em>plant.</em> This means that all leaves are part_of some plant. 
It&nbsp;DOES NOT SAY ANYTHING&nbsp;about whether all plants have leaves, because 
the relationship only makes claims in one direction.</p>
<p>To say that all plants have leaves, we would need another relationship 
<em>plant</em> <strong>has_part </strong><em>leaf.</em> (See "Built-in 
Relations" below for information about how the relations 
<strong>has_part</strong> and <strong>part_of</strong> relate to each 
other).</p>
<h4>Symmetry<a name="symmetry"></a></h4>
<p>A relation is symmetrical if it applies in both directions. If P is a 
symmetrical relation, and A has relationship P to B, then B also has 
relationship P to A. A symmetrical relation could be thought of as having an 
inverse_of relationship to itself.</p>
<p>"Equals" and "is next to" are&nbsp;everyday examples of symmetrical 
relations. If A equals B, B equals A. If A is next to B, B is next to A.</p>
<h4>Transitivity<a name="transitivity"></a></h4>
<p>A relation is transitive if relationships of this type 
remain true across chains of links. If P is a symmetrical relation, and A has 
relationship P to B, and B has relationship P to C, then by definition A has 
relationship P to C.</p>
<p>"Is part of" and "is bigger than" are everyday examples 
of symmetrical relations. If A is part of B and B is part of C, A is part of C. 
If A is bigger than B and B is bigger than C, A is bigger than C.</p>
<h4>Cyclicity</h4>
<p>If a relation is cyclic, it is legal to create a cycle 
of links of that relationship type. Note that a cycle of a given relation P may 
contain other relationship types than P; the cycle may include is_a links or 
sub-relations of P.</p>
<p>"develops_from" is an everyday example of a relation 
that may be cyclical. An instance of A may develop from an instance of B, and 
later an instance of B may develop from the instance of A. Cyclic relationships 
often are ones that involve some sense of change over time.</p>
<h4>Domain &amp; Range</h4>
<p>The domain and range of a relation imply certain is_a 
relationships for terms that have a relationship of a given type, or are the 
target of a relationship of a given type. If a relation P has domain D, any term 
with a relationship of type P to <em>any</em> other term is by definition a 
subclass of D. If a relation P has range R, any term that is the <em>target</em> 
of a relationship of type P is by definition a subclass of R. This definition of 
domain and range is identical to that used by OWL.</p>
<p>To illustrate with a concrete example: let's say we 
define a relation <strong>has_pet</strong>. The <strong>has_pet</strong> 
relationship has the domain "person", because anything that has a pet must be a 
person, and the range "animal", because anything that is the target of a 
<strong>has_pet</strong> relationship must be an animal. If we see the 
relationship "K-9 cop" <strong>has_pet</strong> "Doberman", we know that "K-9 
cop" must have an <strong>is_a</strong> relationship to "person", and "Doberman" 
must have an <strong>is_a</strong> relationship to "animal".</p>
<p>Note that this is a very different understanding of 
domain and range than is usually seen in programming languages or in frame-based 
reasoning systems. In those systems, domain and range are used as a means to 
verify the correctness of relationships; domain and range are used to make sure 
a relation is only used in contexts that make sense. In OBO (and OWL, and other 
DL-languages), domain and range are used to infer additional information about 
classes and instances.</p>
<p>This does not mean that our notion of domain and range 
can't be used for verification. If terms are properly marked with 
<strong>disjoint_from</strong>           
            
relationships, an "improperly used" relation will usually imply that a term has 
an is_a relationship to two disjoint classes, and a reasoner will complain.</p>


<h3>Relationships between Relations</h3>
<p>Relations can have relationships to other relations. Normally, relations 
should only have <strong>is_a</strong> or <strong>inverse_of</strong> 
relationships to other relations. However, the OBO format does not prevent 
users from relating relations to each other using user-defined relations.</p>
<p>Like classes, relations can be sub-typed. If a relation A has an 
<strong>is_a</strong> relationship to a another 
relation B, A is a sub-relation of B. Any class-level or instance-level 
relationship of type A is also a <br>           
           relationship 
of type B.</p>
<h3>Built-in Relations</h3>
<p>             
         The 
OBO format allows users to define any number of new relations. 
The OBO format does provide a small number of pre-defined relations that are 
present in all ontologies and cannot be modified: <strong>is_a</strong>, 
<strong>disjoint_from</strong>, <strong>inverse_of</strong>, and 
<strong>union_of</strong>.</p>
<p>The built-in relations are defined as follows:</p>
<ul>
  <li><strong>is_a</strong> - The subtyping relation. This relation indicates 
  that one entity is a subtype of another. If the entities are relations, 
  <strong>is_a</strong> denotes that one relation is a sub-relation of the 
  other. If the entities are classes, <strong>is_a</strong> denotes 
  subclassing.<font face="Arial"> <strong>is_a</strong> may relate two classes or 
  two relations, but cannot relate a class to a relation (or vice versa). 
  <strong>is_a</strong> is similar to the owl relations <font 
  face=Courier>owl:subClassOf</font> and <font 
  face=Courier>owl:subPropertyOf</font><font face="Arial">.</font></font>
  <li><strong>disjoint_from</strong> - 
  This <A href="#symmetry">symmetric</a>   &nbsp;&nbsp;relation indicates 
  that two classes are disjoint. If two classes A and B are marked disjoint, no 
  subclass of A may be a subclass of B, and no subclass of B may be a subclass 
  of A. <strong>disjoint_from</strong> is similar to the owl relation <font 
  face=Courier>owl:disjointWith.</font>
  <li><strong>union_of</strong> - This relation indicates that a class is 
  defined as a union of other classes. The class <em>apples_or_oranges</em> is a 
  <strong>union_of</strong> the class <em>apples</em> and the class 
  <em>oranges</em>. <strong>union_of</strong>&nbsp;can only be used to relate 
  classes to other classes; <strong>union_of </strong>cannot be 
  allowed to relate relations. Use of this relation usually indicates poor 
  ontology design, but it is included here for compatibility with OWL. 
  <li><strong>inverse_of</strong> - 
  This <A href="#symmetry">symmetric</a>    relation indicates that a 
  relation is the inverse of another relation (<strong>part_of</strong>&nbsp; is 
  the <strong>inverse_of</strong> <strong>has_part, is_left_of</strong> 
  is the<strong> inverse of</strong> <strong>is_right_of</strong>). This relation is 
  similar to the OWL relation <code>owl:inverseOf.</code></li></ul>
<h2>Instances</h2>
<p>Instances represent concrete entities that instantiate 
(or realize) an abstract class. I (John Day-Richter, author of OBO-Edit) am an 
instance of "Computer Programmer" (and a number of other classes).</p>
<p>OBO has the ability&nbsp;to represent instances, but 
OBO-Edit does not at present do anything with that information. Look for some 
interesting applications of this in the near future.</p>
<h2>Identifiers</h2>
<p>Every Class, Relation and Instance in OBO-Edit has a unique 
identifier. In OBO format, an identifier is an alphanumeric string of the form 
&lt;idspace_name&gt;:&lt;identifier&gt;, where &lt;idspace_name&gt; is a short 
header string (usually identifying the ontology or organization that originated 
the id) and &lt;identifier&gt; is a string of arbitrary length.</p>
<p>In OBO 1.2, the "idspace" header tag provides a means to 
map the short idspace names to a URI. This mechanism allows OBO ids to be 
converted easily to languages that require more descriptive identifiers, and 
provies a way to avoid namespace clashes. See the <a 
href="http://www.godatabase.org/dev/doc/obo_format_spec.html#S.2.1">OBO 1.2 
specification section 2.1</a> for more information on header tags that help 
manage ids.</p>
<h2>Obsoletes</h2>
<p>OBO ontologies are designed for users who intend to 
iteratively develop their ontologies. Therefore, the OBO format provides a means 
for tracking the ids of terms that have been "deleted".</p>
<p>When a term or relation or instance is "deleted", the 
term does not vanish. Instead, it is marked "obsolete". Obsolete terms are not 
editable (by most tools).</p>
<p>Often, a term is obsoleted because it is replaced with a 
more accurate term. OBO 1.2 provides a mechanism for automatically assigning 
replacements for obsolete terms. See <A 
href="Assigning_Replacement_Terms.htm">Assigning Replacement Terms</a> for more 
information.</p>
<h2>Meta-Data</h2>
<p>Terms, classes and instances support a number of 
different types of meta-data:</p>
<h3>Dbxrefs</h3>
<p>Dbxref is short for "database cross-reference". Dbxrefs 
are used to indicate an analogous item in another database or ontology, OR to 
give a literature reference for a term definition. A dbxref is formatted like an 
OBO identifier (&lt;database_name&gt;:&lt;identifier&gt;) to specify a 
particular object in a database or ontology.</p>
<h3>Definition</h3>
<p>Objects can be given a lengthy text definition. Object 
definitions in OBO must also have at least one dbxref that describes the source 
of the definition.</p>
<h3>Synonyms</h3>
<p>Often a term will have several names that are commonly 
used. Synonyms specify alternate names for a term.</p>
<h3>Comments</h3>
<p>Comments are text annotations about an object in an 
ontology. Comments can contain any free text information required.</p>
<h3>Categories</h3>
<p>An ontology may contain any number of user-defined 
"categories". For example, the Gene Ontology defines&nbsp;a number of categories 
like "terms of interest to plant biologists" and "terms of interest to insect 
biologists". A term may belong to any number of user-defined categories.</p>
<h2>Namespaces</h2>
<p>OBO files are designed to be easily merged and 
separated. Most tools that use OBO files can load many OBO files at 
once.&nbsp;If several ontologies have been loaded together and saved into a single file, it would be 
impossible to know which terms came from which file unless the origin of 
each term is indicated somehow. Namespaces are used to solve this problem by indicating 
a "logical ontology" to which every term, relation, instance OR relationship belongs, i.e. each 
entity is tagged with a Namespace that indicates which ontology it is 
part of.</p>
<p>Namespaces are user-definable. Every ontology object 
belongs to a single namespace. When terms from many ontologies have been loaded 
together, namespaces are used to break the merged ontology back into separate 
files.</p>
</body>
</html>