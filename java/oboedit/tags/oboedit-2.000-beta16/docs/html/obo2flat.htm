<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<meta name="GENERATOR" content="Solutionsoft HelpBreeze JavaHelp Edition">
<title>obo2flat</title>
<link rel="stylesheet" type="text/css" href="../javahelp.css">
</head>
<body bgcolor="#ffffff">
<h1>obo2flat</h1>
<p>          
              
            
         
    The obo2flat utility converts an OBO file to one or 
more GO Flat Files.</p>
<p><strong><code>obo2flat [options]&nbsp;&lt;inputfile1&gt; &lt;inputfile2&gt; 
... &lt;inputfileN&gt;</code></strong>&nbsp;      
</p>
<p>The command line parameters are:</p>
<ul>
  <li><strong> options</strong>           
   &nbsp;-&nbsp;See below for the great number of&nbsp;possible options&nbsp; 
  <li><strong>&lt;inputfileX&gt;</strong>&nbsp;- Any number of OBO 
  files can be used as inputs</li></ul>
<h2>Options</h2>
<h3>IO Switches:</h3>
<ul>
  <li><strong><code>-def &lt;definition_file&gt;</code></strong> - <em>(optional) 
  </em>Specifies the path to the definitions 
  file 
  <li><strong><code>-o &lt;term_id&gt; &lt;path_to_output_file&gt;</code></strong> - 
  <em>(required) </em>Specifies an output file for a particular root id (the 
  save is done as if "export path to root" has been enabled)</li></ul>
<h3>Graph Rearrangement (required):</h3>
<ul>
  <li><strong><code>-cr &lt;term_id&gt; &lt;term_name&gt;</code></strong> - Creates a dummy root with the given name. All 
  roots in the original OBO file will become children of the dummy root. If a 
  term with this id exists in the ontology, it will be destroyed and recreated. 
  <li><strong><code>-co &lt;term_id_of_parent&gt; &lt;term_id_of_new_node&gt; 
  &lt;term_name_of_new_node&gt;</code></strong> - Creates a holder node for obsolete 
  terms under a given parent. This switch only creates the node; use -mapobs and 
  -defaultobs to move children under an obsolete holder node.If a term with this 
  id exists in the ontology, it will be destroyed and recreated. 
  <li><strong><code>-adddef &lt;term_id&gt; &lt;definition&gt;</code></strong> - Adds a definition to a term created by -co or 
  -cr. All definitions created by -adddef must also have at least one dbxref 
  created by -addref. 
  <li><strong><code>-addref &lt;term_id&gt; &lt;dbxref&gt;</code></strong> - Adds a definition dbxref to a term created by -co or 
  -cr. All dbxrefs created by -addref must also have a definition provided by 
  -adddef. 
  <li><strong><code>-mapobs &lt;namespace&gt; &lt;term_id&gt;</code></strong> - Makes obsolete nodes with the 
  given namespace into children of the given term. Any term_id may be used, but 
  usually the term_id will be one specified by a -co switch. 
  <li><strong><code>-defaultobs &lt;term_id&gt;</code></strong> - Specifies the default 
  location for obsolete nodes. Any term that is not assigned to an obsolete node 
  by a -mapobs switch will be assigned to the given node.</li></ul>
<h3>Optional Switches:</h3>
<ul>
  <li><strong><code>-rootreltype &lt;term_id&gt; &lt;type_id&gt;</code></strong>&nbsp;- Specifies the relationship to 
  be used when copying a root from the original .obo file to a dummy root 
  created with the -co switch. 
  <li><strong><code>-symbol &lt;type_id&gt; &lt;symbol&gt;</code></strong> - Specifies a symbol to use in the output file for a 
  given relationship type. The symbol must obey the usual rules for GO flat file 
  relationship type symbols. Types that do not have symbols specified by this 
  tag will be written out using the @REL_TYPE@ encoding. 
  <li><strong><code>-reducefilesize</code></strong> 
  - Uses the reduced file size output format. 
  <li><strong><code>-dangling</code></strong> - Allows dangling parents in the input 
  file.</li></ul>
<h3>Presets:</h3>
<ul>
  <li><strong><code>--gopresets &lt;biological_process_file&gt; 
  &lt;cellular_component_file&gt; &lt;molecular_function_file&gt; 
  &lt;definitions_file&gt;</code></strong> - Sets all options (except for file paths) 
  to suit the Gene Ontology flat files. Equivalent to running obo2flat with the 
  following options:</li></ul>
<p><code>obo2flat -cr GO:0003673 Gene_Ontology \<br>-co GO:0003674 GO:0008369 
'obsolete molecular function' \<br>-co GO:0005575 GO:0008370 'obsolete cellular 
component' \<br>-co GO:0008150 GO:0008371 'obsolete biological process' 
\<br>-mapobs GO:0003674 function \<br>-mapobs GO:0005575 component \<br>-mapobs 
GO:0008150 process \<br>-defaultobs GO:0003674 \<br>-rootreltype GO:0003674 
part_of \<br>-rootreltype GO:0005575 part_of \<br>-rootreltype GO:0008150 
part_of \<br>-symbol part_of '&gt;' \<br>-symbol is_a '%' \<br>-o GO:0003674 
biological_process_output_file \<br>-o GO:0005575 cellular_component_output_file 
\<br>-o GO:0008150 molecular_function_output_file \<br>-def 
definitions_output_file</code></p>
<h3>Other switches:</h3>
<UL>
  <li><strong><code>-v, -verbose</code></strong> - Shows status messages as obo2flat 
runs</li></UL>
<P>Also see <A href="Java_Options_on_the_Command_line.htm">Java Options on the 
Command-line</A> </P>
<H3>Example:</H3>
<p>To convert an OBO file at ~/cvs/go/ontology/gene_ontology.obo into GO 
compatible flat files:</p>
<p><code>obo2flat --gopresets ~/cvs/go/ontology/process.ontology 
~/cvs/go/ontology/component.ontology ~/cvs/go/ontology/function.ontology 
~/cvs/go/docs/GO.defs.current ~/cvs/go/ontology/input.obo</code><CODE></p></CODE>
</body>
</html>