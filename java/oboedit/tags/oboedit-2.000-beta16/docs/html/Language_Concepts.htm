<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<meta name="GENERATOR" content="Solutionsoft HelpBreeze JavaHelp Edition">
<title>Language Concepts</title>
<link rel="stylesheet" type="text/css" href="../javahelp.css">
</head>
<body bgcolor="#ffffff">
<h1>Language Concepts</h1>
<h2> Scope</h2>
<p>Every variable and function in OSL is associated with a 
<strong>scope</strong>. Whether or not a variable or function is 
accessible&nbsp;by a given piece of code is determined by its scope. There are 
two variable scopes in OSL scripts: global and local.</p>
<h3>Local Scope</h3>
<p>By default, variables and functions have <strong>local scope</strong>. Local 
variables declared inside a function are only&nbsp;accessible inside that 
function. Local variables declared outside of a function in the main body of a 
script are only accessible from the main body of the script.</p>
<p>Note that local variables declared in the main body of a script <em>are not 
accessible by functions declared in the same script</em>. Local variables must 
be passed as parameters to a function for a function to access their 
contents.</p>
<h3>Global Scope</h3>
<p>The global scope is accessible anywhere in the current execution environment. 
The execution environment includes every script that has been loaded since 
OBO-Edit or obo2obo was started.</p>
<p>Functions may be declared global by including the <font 
face="Courier">global</font> keyword before the function name. Local variables and 
functions can be made global through the use of the <font 
face="Courier">export</font><font face="Arial"> keyword.</font>    </p>
<p>Note that all functions declared inthe same script always have access to each 
other, even if they have different scopes. For example:</p>
<div class="source"><pre>global function multiplyByTwoAndAddFive(x) {</pre><pre>   return addFive(multiplyByTwo(x));</pre><pre>}</pre><pre>&nbsp;</pre><pre>function multiplyByTwo(x) {</pre><pre>   return x*2;</pre><pre>}</pre><pre>&nbsp;</pre><pre>function addFive(x) {</pre><pre>   return x+5;</pre><pre>}</pre></div>
<p>Because multiplyByTwoAndAddFive is a global function, any other script in the 
same execution environment can call it. Even if <font 
face="Courier">multiplyByTwoAndAddFive</font> is called from a context that cannot 
access the local functions multiplyByTwo or addFive,&nbsp; <font 
face="Courier">multiplyByTwoAndAddFive</font>&nbsp;still has access to those 
functions, so external calls to&nbsp; <font 
face="Courier">multiplyByTwoAndAddFive</font>&nbsp;will work properly.</p>
<h3>Scope Conflicts</h3>
<p>The same variable name may be declared in two different scopes. For example, 
there could be a global variable named x and a function parameter named x. In 
these cases, the local variable always masks the global variable.</p>
<h3>Example</h3>
<p>The following example illustrates several of these points.</p>
<div class="source"><pre><FONT color=#808080> 1:</FONT>global function printWithEmphasis(str) {</pre><pre><FONT color=#808080> 2:</FONT>   println(str+"!");</pre><pre><FONT color=#808080> 3:</FONT>   println("globalX = "+globalX);</pre><pre><FONT color=#808080> 4:</FONT>}</pre><pre><FONT color=#808080> 5:</FONT>&nbsp;</pre><pre><FONT color=#808080> 6:</FONT>globalX="Hello";</pre><pre><FONT color=#808080> 7:</FONT>str="Spicy";</pre><pre><FONT color=#808080> 8:</FONT>export str;</pre><pre><FONT color=#808080> 9:</FONT>printWithEmphasis("Saucy");</pre><pre><FONT color=#808080>10:</FONT>export globalX;</pre><pre><FONT color=#808080>11:</FONT>printWithEmphasis(str);</pre></div>
<p>This program will produce the following output:</p>
<pre><strong>Saucy!
globalX = null
Spicy!
globalX = 

 
Hello </strong></pre>
<p>These results may be a little suprising at first 
glance.</p>
<P>This first line of output is "Saucy!" rather than "Spicy!", because the local 
variable <FONT face=Courier>str</FONT> (which was passed the&nbsp;value "Saucy!" 
on line 9) masks the value of the global variable <FONT 
face=Courier>str</FONT>.</P>
<P>The second line is "globalX = null", because the variable <FONT 
face=Courier>globalX</FONT> is not available to <FONT 
face=Courier>printWithEmphasis</FONT> the first time <FONT 
face=Courier>printWithEmphasis</FONT> is called.</P>
<P>The third line is "Spicy!" because the value of the global variable str has 
been passed to <FONT face=Courier>printWithEmphasis</FONT>.</P>
<P>The last line is "globalX = Hello" because <FONT face=Courier>globalX</FONT> 
became a global variable on line 10. Thus, <FONT face=Courier>globalX</FONT> is 
defined&nbsp;when <FONT face=Courier>printWithEmphasis</FONT><FONT face=Arial> 
runs the second time.</FONT></P>
<h2><a name="functions"></a>Function Calls and Arguments</h2>
<P>Function calls always take the form:</P>
<P><FONT face=Courier><EM>&lt;function name&gt;</EM> ( 
<EM>&lt;argument1&gt;</EM>, <EM>&lt;argument2&gt;</EM> ... 
<EM>&lt;argumentN&gt;</EM>);</FONT></P>
<P>Parameters are always passed by value. But the way that 
the arguments are&nbsp;packaged when they are passed&nbsp;to the function depends on how the 
function was declared.</P>
<H3>Declaring Functions with Positional Parameters</H3>
<P>One way of declaring a function is to provide a name for every parameter 
passed to the function, like so:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> function createRepeatingString(repeatme, times) {</PRE><PRE><FONT color=#808080> 2:</FONT>   out = "";</PRE><PRE><FONT color=#808080> 3:</FONT>   for(i=0; i &lt; times; i++)</PRE><PRE><FONT color=#808080> 4:</FONT>     out = out + repeatme;</PRE><PRE><FONT color=#808080> 5:</FONT>   return out;</PRE><PRE><FONT color=#808080> 6:</FONT> }</PRE><PRE><FONT color=#808080> 7:</FONT> </PRE><PRE><FONT color=#808080> 8:</FONT> print(createRepeatingString("All work and no play makes Jack a dull boy. ", 100));</PRE></DIV>
<P>The script above prints "All work and no play makes Jack a dull boy." one 
hundred times. When createRepeatingString is called, the variables repeatme and 
times are populated with the values "All work and no play makes Jack a dull boy" 
and 100 respectively. The values are passed positionally - the first value is 
copied to the first parameter, the second value to the second parameter, 
etc.</P>
<P>It is not an error to provide more arguments or fewer arguments than the 
function declaration expects when calling a function. If too many arguments are 
provided, the extra arguments are ignored. If too few are provided, <FONT 
face=Courier>null</FONT> is passed as the value of each missing arguments.</P>
<H3>Declaring Functions with List Parameters</H3>
<P>Another way of declaring a function is with a list parameter. The following 
program behaves identically to the program above, but uses list parameters 
instead of named parameters.</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> function createRepeatingString(arguments*) {</PRE><PRE><FONT color=#808080> 2:</FONT>   out = "";</PRE><PRE><FONT color=#808080> 3:</FONT>   for(i=0; i &lt; arguments[1]; i++)</PRE><PRE><FONT color=#808080> 4:</FONT>     out = out + arguments[0];</PRE><PRE><FONT color=#808080> 5:</FONT>   return out;</PRE><PRE><FONT color=#808080> 6:</FONT> }</PRE><PRE><FONT color=#808080> 7:</FONT> </PRE><PRE><FONT color=#808080> 8:</FONT> print(createRepeatingString("All work and no play makes Jack a dull boy. ", 100));</PRE></DIV>
<P>When list parameters are used, only one function parameter is declared. When 
the function is called, all the function parameters are passed in as a single 
list.</P>
<P>List parameters are useful when a function needs to handle an arbitrary 
number of arguments:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> function sum(values*) {</PRE><PRE><PRE><FONT color=#808080> 2:</FONT>   x = 0;</PRE></PRE><PRE><FONT color=#808080> 3:</FONT>    foreach (val in values)</PRE><PRE><FONT color=#808080> 4:</FONT>     x = x + val;</PRE><PRE><FONT color=#808080> 5:<FONT color=#000000>   return x;</FONT></FONT></PRE><PRE><FONT color=#808080> 6:</FONT> }</PRE><PRE><FONT color=#808080> 7:</FONT> </PRE><PRE><FONT color=#808080> 8:</FONT> print(sum(1,2,3,4,5,6,7,8,9,10,11));</PRE></DIV>
<P>&nbsp;The sum function above can be used to add any number of values 
together.</P>
<H2><A name=script_params></A>Script Parameters</H2>
<P>Just as parameters are passed to functions, parameters 
are sometimes passed to an entire script. Script parameters are named variables 
that are automatically available when a script runs. These parameters are 
defined in advance by OBO-Edit or obo2obo. See&nbsp;<A 
href="OBO_Edit_Specific_Variables.htm">OBO-Edit-Specific Variables</A>           
           
           
        &nbsp;for more 
information.</P>
<h2><a name="return_vals"></a>Return Values</h2>
<P>Both functions and scripts always have a <STRONG>return value</STRONG>. The 
return value is passed to whatever code called the function or script 
initially.</P>
<P>When a script is called by OBO-Edit, the return value may or may not be used, based on 
the context in which the script was called. For example, the return value of a <A 
href="Backtick_Expressions.htm">backtick expressions</A> is used to set a layout 
parameter or define a search, but the return value of a script passed to obo2obo 
is ignored.</P>
<P>Normally, the return value of a function or script is the 
value of the last statement in the function or script. For example, the 
following script:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> x = 5;</PRE><PRE><FONT color=#808080> 2:</FONT> x + 2;</PRE></DIV>
<P>&nbsp;produces a return value of <FONT face=Courier>7</FONT><FONT 
face=Arial>.</FONT></P>
<P>It is possible to immediately end a script or function and return a value 
with the return statement. The following script:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> x = 5;</PRE><PRE><FONT color=#808080> 2:</FONT> return 8;</PRE><PRE><FONT color=#808080> 3:</FONT> x + 2;</PRE></DIV>
<P>&nbsp;produces a return value of <FONT face=Courier>8</FONT><FONT 
face=Arial>. Line 3 is never even executed, because execution halts immediately 
when the return statement is encountered.</FONT></P>
<P>The return statement is particularly useful when performing a long 
calculation that&nbsp;should end abruptly when a certain condition is met:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> function getIndex(list, target) {</PRE><PRE><PRE><FONT color=#808080> 2:</FONT>   i = 0;</PRE><FONT color=#808080> 3:</FONT>   foreach (val in list) {</PRE><PRE><PRE><PRE><FONT color=#808080> 4:</FONT>      if (val == target)</PRE><PRE><PRE><FONT color=#808080> 5:</FONT>        return i;</PRE><PRE><FONT color=#808080> 6:</FONT>      i++;</PRE></PRE></PRE></PRE><PRE><FONT color=#808080> 7:</FONT>   }</PRE><PRE><PRE><FONT color=#808080> 8:</FONT>   -1;</PRE></PRE><PRE><FONT color=#808080> 9: </FONT>}</PRE></DIV>
<P><FONT face=Arial>The example above uses both methods of returning a value. If 
the desired item in the list is found, the index of the item is immediately 
returned (see line 5). If the item is not found, -1, the value of the last 
statement (line 8), is returned.</FONT></P>
<h2><a name="var_functions"></a>Assigning Functions to Variables</h2>
<P>Functions may be assigned to variables by referring to the function name with 
no parameters or parentheses:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> function addFive(x) {</PRE><PRE><FONT color=#808080> 2:</FONT>   return x+5;</PRE><PRE><FONT color=#808080> 3:</FONT> }</PRE><PRE><FONT color=#808080> 4:</FONT></PRE><PRE><FONT color=#808080> 5:</FONT> y = addFive;</PRE><PRE><FONT color=#808080> 6:</FONT> y(3);</PRE></DIV>
<P><FONT face=Arial>The script above returns the value 8, because y(3) has 
become&nbsp;equivalent to addFive(3).</FONT></P>
<P>Functions may also be passed as parameters to other functions:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> function map(list, mappingFunction) {</PRE><PRE><FONT color=#808080> 2:</FONT>   // this function uses the Util library provided by OBO-Edit and obo2obo</PRE><PRE><FONT color=#808080> 3:</FONT>   out = Util.createList();</PRE><PRE><PRE><FONT color=#808080> 4:</FONT>   foreach (x in list) {</PRE><PRE><PRE><FONT color=#808080> 5:</FONT>     out.add(mappingFunction(x));</PRE><PRE><PRE><FONT color=#808080> 6:</FONT>   }</PRE><PRE><PRE><FONT color=#808080> 7:</FONT>   return out;</PRE><PRE><FONT color=#808080> 8:</FONT> }</PRE></PRE></PRE></PRE></PRE></DIV>
<P><FONT face=Arial>The map function is 
passed a list and a mapping function. The mapping function is called on each 
item in the list, and the result is added to an output list. The result is a 
copy of the original list with each item replaced by the results of the mapping function. </FONT></P>
<h2><a name="java_method"></a>Interacting with Java and Method 
Calls</h2>
<P>OSL scripts are often given access to Java objects. Java objects are passed 
in as <A href="#script_params">script parameters</A>, or returned from method 
calls on a Java object. All OSL literals are actually implemented as Java 
objects, so Java methods can be called on strings, numbers, and other 
primitives.s</P>
<P>Method calls in OSL have exactly the same syntax as in Java:</P>
<DIV class=source><PRE><FONT color=#808080> 1:</FONT> x =  "Welcome to Paris!";</PRE><PRE><FONT color=#808080> 2:</FONT> x = x.replaceAll("Paris", "Epcot Center");</PRE></DIV>
<P><FONT face=Arial>See <A 
href="http://java.sun.com/j2se/1.4.2/docs/api/">The Java API Reference</A> and 
the <A href="../../apidocs/index.html">OBO-Edit API Reference</A> for the 
methods available for the various Java objects in OSL. </FONT></P>
<H2>Object Types, Primitives&nbsp;&amp; Casting</H2>
<P>OSL is an untyped language. Any variable can hold a value of any type.</P>
<P>However, all OSL objects are implemented as Java objects, and all Java 
objects have specific types. This has some side effects that can be 
surprising.</P>
<UL>
  <LI><STRONG>Method calls</STRONG> - 
  OSL must guess what method signature to use when the provided parameters match 
  several possible signatures. In general, OSL will use the signature that calls 
  for the most specific subtype of the available parameters. 
  <LI><STRONG>Primitives</STRONG> - 
  OSL never handles primitives; all primitives are wrapped in the Java wrapper 
  classes. When operations are performed on these "primitives", the wrapper 
  classes are unwrapped, the operation is performed, and the results are 
  rewrapped. 
  <LI><STRONG>Casting problems</STRONG> - Variable assignments will never cause 
  a type mismatch error, but type mismatch errors can easily occur when calling 
  Java methods from OSL.s</LI></UL>
</body>
</html>