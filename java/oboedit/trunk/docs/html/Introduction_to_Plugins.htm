<!DOCTYPE html PUBLIC "-//W3C//DTD html 3.2//EN">
<html>
<HEAD>
<META NAME="GENERATOR" CONTENT="Solutionsoft HelpBreeze JavaHelp Edition">
<TITLE>Introduction to Plugins</TITLE>
<LINK REL="stylesheet" TYPE="text/css" HREF=../javahelp.css>
</HEAD>
<BODY bgColor=#ffffff>
<H1>Introduction to Plugins</H1>
<P><STRONG>Plugins</STRONG> are extensions to OBO-Edit that 
aren't part of the standard OBO-Edit package. Plugins add new functionality to 
the standard OBO-Edit capabilities.</P>

<h3>Writing Plugins</h3>
<p>
It's very simple to write plugins for OBO-Edit 2.0. In OBO-Edit, a plugin can be anything. Tasks, gui components, data adapters, menu items, 
button icons, it doesn't matter.
</p>

<h3> When Plugins are Loaded </h3>
<p>Plugin loading is almost the very first step of the OBO-Edit startup process. Plugins are loaded after the preferences directories are 
initialized and logging is configured, but before any other step in the process, including the initialization of default data adapters, 
gui components, or tasks.
</p>

<p>
Some plugins may need to execute later in the startup process. For example, a plugin that needs to disable some default gui component may 
need to execute after the default gui components have been created. Plugins like this should install a <code>GUITask</code> using 
the method <code>GUIManager.installStartupTask</code>. Startup tasks are executed after the default startup routine has completed,
but before the application gui appears on the screen.
</p>


 <h3>Where OBO-Edit Looks for Plugins </h3>
<p>OBO-Edit plugins must be archived in a jar file whose name ends with the ".jar" suffix. OBO-Edit looks for jars in two places:
</p>

<p>
<ul>
<li> The path <code>[OBO-Edit Installation Directory]/extensions</code></li>
<li> The path <a href="../html/Configuration_Manager.htm"><code>[User Configuration Directory]</code></a><code>/extensions</code></li>
</ul>
</p>

<p>
Note that other BBOP framework applications (like Phenote 2) use a similar plugin system, but may look for their plugins in different locations. 
For example, Phenote 2 looks for plugins in the '~/.phenote/extensions' directory.
</p>

<p>
 <h3>The Easy Way to Write 99% of Plugins </h3>
</p>

<p>
Most plugins will do one of the following:
</p>

<p>
<ul>
<li> Create a task that does something at startup</li>
<li> Create a task that listens for some kind of event as the program runs</li>
<li> Add a new gui component</li>
<li> Add a new data adapter</li>
<li> Add a new search criterion</li>
<li> Add a new renderer field</li>
</ul>
</p>

<p>
If your plugin does one of these things, all you have to do is include the plugin classes in a jar file, and you're done. OBO-Edit will 
analyze the contents of the jar and automatically install all the classes it recognizes.
</p>

<p>
There's only one rule your plugin has to follow: it must have a public, zero-argument constructor.
</p>

<p>
If your plugin requires additional libraries, put those libraries in a directory called "lib" and zip them right into the jar file with the 
rest of the classes.
</p>

<p>
For example, let's say your plugin contains one class called org.bbop.plugin.DatabasePlugin which relies on mysql.jar. Your jar file will 
contain the following files:
</p>

<p>
<ul>
<li> <code>org/bbop/plugin/DatabasePlugin.class</code></li>
<li> <code>lib/mysql.jar</code></li>
</ul>
</p>

<p>
OBO-Edit will handle the rest automagically.
</p>

<p>
<h3> What OBO-Edit Does with Plugins </h3>
</p>

<p>
When OBO-Edit finds a plugin jar, it creates a special classloader for that jar and attaches it to the larger OBO-Edit classloader tree. 
(Each jar gets its own classloader to prevent name clashes between plugins). If the jar contains library jars in the lib/ directory, they 
are unzipped to a temporary directory and also added to the classpath.
</p>

<p>
OBO-Edit then examines the .class files in the jar, and creates a catalog of the classes included in each jar.
</p>

<p>
When <code>PluginManager.instantiateAll(Class)</code> is called (usually by OBO-Edit's startup routine), all the plugin classes 
of a given type are instantiated and returned to the calling method. The calling method then typically does whatever is required to install 
those classes.
</p>

<p>
 <h3>Getting More Specific About What to Load </h3>
</p>

<p>
Sometimes, you may not want OBO-Edit to load every class in your plugin that it recognizes. For example, if your plugin only installs a 
new <code>GUIComponent</code> under certain circumstances, you won't want that component to be loaded automatically - instead, 
you'll probably want to install a single <code>GUITask</code> that can recognizes the circumstances where the new component 
should be installed, and have that task do the installation when appropriate.
</p>

<p>
If you only want certain classes to be loaded, place a file called 'install.xml' in the root directory of your jar file. 'install.xml' 
should contain an XML encoded Java bean that instantiates the 
class <code>PluginManager.InstallerConfig</code>. <code>InstallerConfig</code> returns a list of classes and libraries 
that should be automatically installed when the plugin is loaded. Any classes that are not explicitly mentioned will be loaded by the classloader
 (and will thus be available to any plugin classes that depend on them), but will not be automatically installed. Any libraries that are not 
 explicitly mentioned will be ignored.
</p>

<p>
For example, imagine that we want to install a single class called 'MyTask' and a single library located in 'mylibs/log4j.jar'. The 
following code will generate the 'installer.xml' file that should be placed in the plugin jar.
<pre>
PluginManager.InstallerConfig config = new PluginManager.InstallerConfig();
Collection<String> classes = new ArrayList<String>();
Collection<String> libs = new ArrayList<String>();
classes.add(MyTask.class.getName());
libs.add("mylibs/log4j.jar");
config.setClasses(classes);
config.setLibs(libs);
try {
    XMLEncoder encoder = new XMLEncoder("installer.xml");
    encoder.writeObject(config);
    encoder.close();
} catch (Exception ex) {
    // do something with exception
}
</pre>
</p>
 <h3>Shared Libraries </h3>
<p>
If many plugins end up using the same libraries, you may wish to save space by sharing the library amongst all the plugins, rather than 
packaging the library inside each plugin jar.
</p>

<p>
Shared libraries may be placed within the 'shared/' subdirectory of any directory from which plugins are loaded (for example, in OBO-Edit
 a shared library may be placed in '~/.oboedit/extensions/shared' or '<i>installationdir</i>/extensions/shared').
</p>



</BODY>
</html>
